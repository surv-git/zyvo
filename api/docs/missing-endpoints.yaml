# Missing Endpoints for OpenAPI Documentation
# These endpoints should be added to the main openapi.yaml file

paths:
  # Cart Endpoints
  /api/v1/cart:
    get:
      summary: 'Get user cart'
      description: 'Retrieve the current user cart with all items'
      tags: [Cart]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Cart retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      cart:
                        $ref: '#/components/schemas/Cart'
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/CartItem'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: 'Cart not found'

    post:
      summary: 'Add item to cart'
      description: 'Add a product variant to the user cart'
      tags: [Cart]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [product_variant_id, quantity]
              properties:
                product_variant_id:
                  type: string
                  description: 'ID of the product variant to add'
                quantity:
                  type: integer
                  minimum: 1
                  description: 'Quantity to add'
                  example: 2
      responses:
        '201':
          description: 'Item added to cart successfully'
        '400':
          description: 'Invalid request data'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: 'Product variant not found'

    delete:
      summary: 'Clear cart'
      description: 'Remove all items from the user cart'
      tags: [Cart]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Cart cleared successfully'
        '401':
          $ref: '#/components/responses/401'

  /api/v1/cart/items/{itemId}:
    patch:
      summary: 'Update cart item'
      description: 'Update quantity of a specific cart item'
      tags: [Cart]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: string
          description: 'Cart item ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [quantity]
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  description: 'New quantity'
      responses:
        '200':
          description: 'Cart item updated successfully'
        '400':
          description: 'Invalid quantity'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: 'Cart item not found'

    delete:
      summary: 'Remove item from cart'
      description: 'Remove a specific item from the cart'
      tags: [Cart]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: string
          description: 'Cart item ID'
      responses:
        '200':
          description: 'Item removed from cart successfully'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: 'Cart item not found'

  # Order Endpoints
  /api/v1/orders:
    get:
      summary: 'Get user orders'
      description: 'Retrieve paginated list of user orders'
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: 'Page number'
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: 'Items per page'
        - in: query
          name: status
          schema:
            type: string
            enum: ['pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled', 'returned']
          description: 'Filter by order status'
      responses:
        '200':
          description: 'Orders retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/401'

    post:
      summary: 'Create new order'
      description: 'Create a new order from cart items'
      tags: [Orders]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [shipping_address, payment_method]
              properties:
                shipping_address:
                  $ref: '#/components/schemas/Address'
                billing_address:
                  $ref: '#/components/schemas/Address'
                payment_method:
                  type: string
                  description: 'Payment method'
                  example: 'credit_card'
                notes:
                  type: string
                  description: 'Order notes'
      responses:
        '201':
          description: 'Order created successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Order'
        '400':
          description: 'Invalid request data or empty cart'
        '401':
          $ref: '#/components/responses/401'

  /api/v1/orders/{id}:
    get:
      summary: 'Get order by ID'
      description: 'Retrieve a specific order with items'
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: 'Order ID'
      responses:
        '200':
          description: 'Order retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      order:
                        $ref: '#/components/schemas/Order'
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/OrderItem'
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: 'Access denied - not your order'
        '404':
          description: 'Order not found'

    patch:
      summary: 'Update order'
      description: 'Update order details (admin only for status changes)'
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: 'Order ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_status:
                  type: string
                  enum: ['pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled', 'returned']
                payment_status:
                  type: string
                  enum: ['pending', 'paid', 'failed', 'refunded', 'partially_refunded']
                tracking_number:
                  type: string
                shipping_carrier:
                  type: string
                notes:
                  type: string
      responses:
        '200':
          description: 'Order updated successfully'
        '400':
          description: 'Invalid request data'
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: 'Access denied'
        '404':
          description: 'Order not found'

  # Favorites Endpoints
  /api/v1/favorites:
    get:
      summary: 'Get user favorites'
      description: 'Retrieve user favorite products'
      tags: [Favorites]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: 'Favorites retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Favorite'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/401'

    post:
      summary: 'Add to favorites'
      description: 'Add a product variant to user favorites'
      tags: [Favorites]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [product_variant_id]
              properties:
                product_variant_id:
                  type: string
                  description: 'Product variant ID to add to favorites'
      responses:
        '201':
          description: 'Added to favorites successfully'
        '400':
          description: 'Invalid request or already in favorites'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: 'Product variant not found'

  /api/v1/favorites/{id}:
    delete:
      summary: 'Remove from favorites'
      description: 'Remove a product from user favorites'
      tags: [Favorites]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: 'Favorite ID'
      responses:
        '200':
          description: 'Removed from favorites successfully'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: 'Favorite not found'

  # Product Reviews Endpoints
  /api/v1/products/{productId}/reviews:
    get:
      summary: 'Get product reviews'
      description: 'Retrieve reviews for a specific product'
      tags: [Reviews]
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: 'Product ID'
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
        - in: query
          name: rating
          schema:
            type: integer
            minimum: 1
            maximum: 5
          description: 'Filter by rating'
      responses:
        '200':
          description: 'Reviews retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductReview'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          description: 'Product not found'

    post:
      summary: 'Create product review'
      description: 'Create a new review for a product'
      tags: [Reviews]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: 'Product ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rating, review_text]
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  description: 'Rating from 1 to 5 stars'
                review_text:
                  type: string
                  maxLength: 2000
                  description: 'Review content'
      responses:
        '201':
          description: 'Review created successfully'
        '400':
          description: 'Invalid request data or user already reviewed this product'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: 'Product not found'

  # Wallet Endpoints
  /api/v1/wallet:
    get:
      summary: 'Get user wallet'
      description: 'Retrieve user wallet information'
      tags: [Wallet]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Wallet retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Wallet'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: 'Wallet not found'

  /api/v1/wallet/transactions:
    get:
      summary: 'Get wallet transactions'
      description: 'Retrieve user wallet transaction history'
      tags: [Wallet]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - in: query
          name: type
          schema:
            type: string
            enum: ['credit', 'debit', 'refund', 'cashback', 'transfer']
          description: 'Filter by transaction type'
      responses:
        '200':
          description: 'Transactions retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WalletTransaction'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/401'

  # Coupon Endpoints
  /api/v1/coupons/validate:
    post:
      summary: 'Validate coupon code'
      description: 'Validate a coupon code for the current cart'
      tags: [Coupons]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [code]
              properties:
                code:
                  type: string
                  description: 'Coupon code to validate'
                  example: 'SAVE20'
      responses:
        '200':
          description: 'Coupon is valid'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      valid:
                        type: boolean
                        example: true
                      discount_amount:
                        type: number
                        example: 25.99
                      coupon:
                        $ref: '#/components/schemas/CouponCampaign'
        '400':
          description: 'Invalid or expired coupon'
        '401':
          $ref: '#/components/responses/401'

  # Blog Endpoints
  /api/v1/blog:
    get:
      summary: 'Get blog posts'
      description: 'Retrieve published blog posts'
      tags: [Blog]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
        - in: query
          name: tag
          schema:
            type: string
          description: 'Filter by tag'
        - in: query
          name: search
          schema:
            type: string
          description: 'Search in title and content'
      responses:
        '200':
          description: 'Blog posts retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BlogPost'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /api/v1/blog/{slug}:
    get:
      summary: 'Get blog post by slug'
      description: 'Retrieve a specific blog post by its slug'
      tags: [Blog]
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
          description: 'Blog post slug'
      responses:
        '200':
          description: 'Blog post retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/BlogPost'
        '404':
          description: 'Blog post not found'

# Additional Components
components:
  schemas:
    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        items_per_page:
          type: integer
          example: 10
        total_items:
          type: integer
          example: 150
        total_pages:
          type: integer
          example: 15
        has_next_page:
          type: boolean
          example: true
        has_prev_page:
          type: boolean
          example: false
