openapi: 3.0.0
info:
    title: 'Zyvo API'
    version: 1.0.0
    description: "\n        A secure Node.js API server built with Express.js that implements \n        security best practices including CORS, CSRF protection, rate limiting, \n        and comprehensive error handling.\n        \n        ## Features\n        - JWT Authentication\n        - Role-based Access Control\n        - Rate Limiting\n        - CSRF Protection\n        - Input Validation\n        - Comprehensive Error Handling\n        \n        ## Security\n        This API implements multiple layers of security:\n        - CORS with configurable origins\n        - CSRF token validation\n        - Rate limiting per IP\n        - Secure HTTP headers via Helmet.js\n        - Input sanitization and validation\n      "
    contact:
        name: 'Zyvo API Support'
        email: support@zyvo.com
        url: 'https://zyvo.com'
    license:
        name: ISC
        url: 'https://opensource.org/licenses/ISC'
servers:
    -
        url: 'http://localhost:3000'
        description: 'Development server'
    -
        url: 'https://api.zyvo.com'
        description: 'Production server'
components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
            description: 'JWT Bearer token authentication'
        csrfToken:
            type: apiKey
            in: header
            name: X-CSRF-Token
            description: 'CSRF token for protection against CSRF attacks'
        BearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
    schemas:
        User:
            type: object
            required: [name, email, password]
            properties: {_id: {type: string, description: 'Unique identifier for the user', example: 64a1b2c3d4e5f6789abcdef0}, name: {type: string, description: 'User full name', minLength: 1, maxLength: 100, example: 'John Doe'}, email: {type: string, format: email, description: 'User email address', example: john.doe@example.com}, role: {type: string, enum: [user, admin], description: 'User role', default: user, example: user}, isActive: {type: boolean, description: 'User active status', default: true, example: true}, lastLogin: {type: string, format: date-time, description: 'Last login timestamp', example: '2025-07-12T10:30:00.000Z'}, createdAt: {type: string, format: date-time, description: 'Creation timestamp', example: '2025-07-12T10:30:00.000Z'}, updatedAt: {type: string, format: date-time, description: 'Last update timestamp', example: '2025-07-12T10:30:00.000Z'}, id: {type: string, description: 'User ID'}, password: {type: string, format: password, description: 'User password (hashed)'}, phone: {type: string, description: 'User phone number'}, address: {type: string, description: 'User address'}, loginCount: {type: number, description: 'Total login count'}, deleted_at: {type: string, format: date-time, description: 'Soft delete timestamp'}}
        Product:
            type: object
            required: [name, description, category_id]
            properties: {_id: {type: string, description: 'Product ID', example: 64a1b2c3d4e5f6789abcdef1}, name: {type: string, description: 'Product name', minLength: 2, maxLength: 200, example: 'Premium Wireless Headphones'}, description: {type: string, description: 'Detailed product description', maxLength: 2000, example: 'High-quality wireless headphones with noise cancellation'}, price: {type: number, format: float, minimum: 0, description: 'Price of the product in USD', example: 299.99}, category: {type: string, description: 'Product category', example: Electronics}, stock: {type: integer, minimum: 0, description: 'Available stock quantity', example: 50}, tags: {type: array, items: {type: string}, description: 'Product tags for categorization', example: [wireless, audio, premium]}, images: {type: array, items: {type: string, format: uri}, description: 'Array of image URLs', example: ['https://example.com/image1.jpg', 'https://example.com/image2.jpg']}, isActive: {type: boolean, description: 'Whether the product is active/available', default: true, example: true}, createdAt: {type: string, format: date-time, description: 'Product creation timestamp', example: '2025-07-12T10:30:00.000Z'}, updatedAt: {type: string, format: date-time, description: 'Product last update timestamp', example: '2025-07-12T10:30:00.000Z'}, slug: {type: string, description: 'Product slug (auto-generated from name)'}, short_description: {type: string, description: 'Brief product summary', maxLength: 500}, category_id: {type: string, description: 'Category reference ID'}, brand_id: {type: string, description: 'Brand reference ID'}, score: {type: number, minimum: 0, maximum: 5, description: 'Product score/rating'}, seo_details: {type: object, properties: {meta_title: {type: string, maxLength: 60}, meta_description: {type: string, maxLength: 160}, meta_keywords: {type: array, items: {type: string}}}}, is_active: {type: boolean, description: 'Product active status'}}
        Category:
            type: object
            required: [name]
            properties: {_id: {type: string, description: 'Unique identifier for the category', example: 64a1b2c3d4e5f6789abcdef2}, name: {type: string, description: 'Name of the category', minLength: 1, maxLength: 100, example: Electronics}, description: {type: string, description: 'Description of the category', maxLength: 500, example: 'Electronic devices and accessories'}, slug: {type: string, description: 'URL-friendly slug for the category', example: electronics}, parent_category: {type: string, description: 'Parent category ID for hierarchical structure', example: 64a1b2c3d4e5f6789abcdef1}, image_url: {type: string, format: uri, description: 'Category image URL', example: 'https://example.com/electronics.jpg'}, is_active: {type: boolean, description: 'Whether the category is active', default: true, example: true}, createdAt: {type: string, format: date-time, description: 'Category creation timestamp', example: '2025-07-12T10:30:00.000Z'}, updatedAt: {type: string, format: date-time, description: 'Category last update timestamp', example: '2025-07-12T10:30:00.000Z'}}
        CategoryTree:
            type: object
            properties: {_id: {type: string, description: 'Category ID', example: 64a1b2c3d4e5f6789abcdef2}, name: {type: string, description: 'Category name', example: Electronics}, slug: {type: string, description: 'Category slug', example: electronics}, description: {type: string, description: 'Category description', example: 'Electronic devices and accessories'}, image_url: {type: string, format: uri, description: 'Category image URL', example: 'https://example.com/electronics.jpg'}, children: {type: array, items: {$ref: '#/components/schemas/CategoryTree'}, description: 'Child categories'}}
        CategoryStats:
            type: object
            properties: {totalCategories: {type: integer, description: 'Total number of categories', example: 50}, activeCategories: {type: integer, description: 'Number of active categories', example: 45}, inactiveCategories: {type: integer, description: 'Number of inactive categories', example: 5}, rootCategories: {type: integer, description: 'Number of root categories', example: 10}, categoriesWithChildren: {type: integer, description: 'Number of categories with child categories', example: 15}, categoriesWithoutChildren: {type: integer, description: 'Number of categories without child categories', example: 30}}
        PaginationInfo:
            type: object
            properties: {page: {type: integer, minimum: 1, description: 'Current page number', example: 1}, limit: {type: integer, minimum: 1, maximum: 100, description: 'Number of items per page', example: 10}, total: {type: integer, minimum: 0, description: 'Total number of items', example: 100}, totalPages: {type: integer, minimum: 0, description: 'Total number of pages', example: 10}, hasNext: {type: boolean, description: 'Whether there is a next page', example: true}, hasPrev: {type: boolean, description: 'Whether there is a previous page', example: false}}
        Error:
            type: object
            properties: {error: {type: string, description: 'Error message', example: 'Validation failed'}, details: {type: array, items: {type: string}, description: 'Detailed error information', example: ['Name is required', 'Email must be valid']}, statusCode: {type: integer, description: 'HTTP status code', example: 400}, timestamp: {type: string, format: date-time, description: 'Error timestamp', example: '2025-07-12T10:30:00.000Z'}}
        Success:
            type: object
            properties: {message: {type: string, description: 'Success message', example: 'Operation completed successfully'}, data: {type: object, description: 'Response data'}, statusCode: {type: integer, description: 'HTTP status code', example: 200}, timestamp: {type: string, format: date-time, description: 'Response timestamp', example: '2025-07-12T10:30:00.000Z'}}
        RegisterRequest:
            type: object
            required: [name, email, password]
            properties: {name: {type: string, minLength: 2, maxLength: 50, pattern: '^[a-zA-Z\s]+$', example: 'John Doe'}, email: {type: string, format: email, example: john@example.com}, password: {type: string, format: password, minLength: 8, maxLength: 128, pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]', example: SecurePass123!}, role: {type: string, enum: [user, admin], default: user}}
        LoginRequest:
            type: object
            required: [email, password]
            properties: {email: {type: string, format: email, example: john@example.com}, password: {type: string, format: password, example: SecurePass123!}}
        ForgotPasswordRequest:
            type: object
            required: [email]
            properties: {email: {type: string, format: email, example: john@example.com}}
        ResetPasswordRequest:
            type: object
            required: [password, confirmPassword]
            properties: {password: {type: string, format: password, minLength: 8, maxLength: 128, pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]', example: NewSecurePass123!}, confirmPassword: {type: string, format: password, example: NewSecurePass123!}}
        AuthResponse:
            type: object
            properties: {success: {type: boolean}, message: {type: string}, accessToken: {type: string}, user: {$ref: '#/components/schemas/User'}}
        ErrorResponse:
            type: object
            properties: {success: {type: boolean, example: false}, message: {type: string}, errors: {type: array, items: {type: object, properties: {field: {type: string}, message: {type: string}}}}}
        Brand:
            type: object
            required: [name]
            properties: {_id: {type: string, description: 'The auto-generated id of the brand'}, name: {type: string, description: 'The official name of the brand', maxLength: 100, minLength: 2}, slug: {type: string, description: 'Auto-generated URL-friendly identifier'}, description: {type: string, description: 'A brief description of the brand', maxLength: 1000}, logo_url: {type: string, description: 'URL to the brand''s logo image', format: uri}, website: {type: string, description: 'Official website URL of the brand', format: uri}, contact_email: {type: string, description: 'General contact email for the brand', format: email}, is_active: {type: boolean, description: 'Whether the brand is currently active', default: true}, display_name: {type: string, description: 'Virtual field returning the brand name'}, logo_image: {type: string, description: 'Virtual field returning the logo URL or null'}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}
            example: {_id: 60d0fe4f5311236168a109ca, name: Nike, slug: nike, description: 'Leading athletic footwear and apparel brand', logo_url: 'https://example.com/nike-logo.png', website: 'https://www.nike.com', contact_email: info@nike.com, is_active: true, display_name: Nike, logo_image: 'https://example.com/nike-logo.png', createdAt: '2023-06-22T09:30:00.000Z', updatedAt: '2023-06-22T09:30:00.000Z'}
        BrandResponse:
            type: object
            properties: {success: {type: boolean}, message: {type: string}, data: {$ref: '#/components/schemas/Brand'}}
        BrandsListResponse:
            type: object
            properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/Brand'}}, pagination: {type: object, properties: {currentPage: {type: number}, totalPages: {type: number}, totalItems: {type: number}, itemsPerPage: {type: number}, hasNextPage: {type: boolean}, hasPrevPage: {type: boolean}}}}
        Inventory:
            type: object
            properties: {_id: {type: string, description: 'Unique identifier for the inventory record'}, product_variant_id: {type: string, description: 'Reference to the base unit product variant'}, stock_quantity: {type: number, minimum: 0, description: 'Physical stock quantity for base unit'}, last_restock_date: {type: string, format: date-time, description: 'Last restock timestamp'}, last_sold_date: {type: string, format: date-time, description: 'Last sale timestamp'}, min_stock_level: {type: number, minimum: 0, description: 'Minimum stock threshold'}, location: {type: string, description: 'Physical storage location'}, notes: {type: string, description: 'Internal inventory notes'}, is_active: {type: boolean, description: 'Whether inventory record is active'}, computed_stock_quantity: {type: number, description: 'Computed stock for pack variants'}, stock_status: {type: string, enum: ['Out of Stock', 'Low Stock', 'Medium Stock', 'High Stock'], description: 'Current stock status'}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}
            required: [product_variant_id, stock_quantity]
        Listing:
            type: object
            properties: {_id: {type: string, description: 'Unique identifier for the listing'}, product_variant_id: {type: string, description: 'Reference to the product variant'}, platform_id: {type: string, description: 'Reference to the platform'}, platform_sku: {type: string, description: 'Platform-specific SKU'}, platform_product_id: {type: string, description: 'Platform-specific product ID'}, listing_status: {type: string, enum: [Draft, 'Pending Review', Live, Rejected, Deactivated], description: 'Current status of the listing'}, platform_price: {type: number, minimum: 0, description: 'Price on the platform'}, platform_commission_percentage: {type: number, minimum: 0, maximum: 100, description: 'Commission percentage for this variant'}, platform_fixed_fee: {type: number, minimum: 0, description: 'Fixed fee per sale'}, platform_shipping_fee: {type: number, minimum: 0, description: 'Shipping fee charged by platform'}, last_synced_at: {type: string, format: date-time, description: 'Last synchronization timestamp'}, platform_specific_data: {type: object, description: 'Platform-specific attributes'}, is_active_on_platform: {type: boolean, description: 'Whether listing is active on platform'}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}
            required: [product_variant_id, platform_id]
        Option:
            type: object
            required: [option_type, option_value]
            properties: {_id: {type: string, description: 'The auto-generated id of the option'}, option_type: {type: string, description: 'The type of option (e.g., Color, Size, Weight)', maxLength: 50}, option_value: {type: string, description: 'The value of the option (e.g., Red, Large, 500g)', maxLength: 100}, name: {type: string, description: 'Display name for the option (defaults to option_value)', maxLength: 100}, slug: {type: string, description: 'Auto-generated URL-friendly identifier'}, is_active: {type: boolean, description: 'Whether the option is currently active', default: true}, sort_order: {type: number, description: 'Sort order for displaying options', default: 0}, full_name: {type: string, description: 'Virtual field combining option_type and name'}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}
            example: {_id: 60d0fe4f5311236168a109ca, option_type: Color, option_value: Red, name: 'Bright Red', slug: color-red, is_active: true, sort_order: 1, full_name: 'Color: Bright Red', createdAt: '2023-06-22T09:30:00.000Z', updatedAt: '2023-06-22T09:30:00.000Z'}
        OptionType:
            type: object
            properties: {option_type: {type: string, description: 'The type of option'}, values: {type: array, items: {type: object, properties: {_id: {type: string}, option_value: {type: string}, name: {type: string}, slug: {type: string}, sort_order: {type: number}}}}}
            example: {option_type: Color, values: [{_id: 60d0fe4f5311236168a109ca, option_value: Red, name: 'Bright Red', slug: color-red, sort_order: 1}]}
        OptionResponse:
            type: object
            properties: {success: {type: boolean}, message: {type: string}, data: {$ref: '#/components/schemas/Option'}}
        OptionsListResponse:
            type: object
            properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/Option'}}, pagination: {type: object, properties: {currentPage: {type: number}, totalPages: {type: number}, totalItems: {type: number}, itemsPerPage: {type: number}, hasNextPage: {type: boolean}, hasPrevPage: {type: boolean}}}}
        Platform:
            type: object
            required: [name]
            properties: {_id: {type: string, description: 'Unique platform identifier'}, name: {type: string, description: 'Platform name (e.g., ''Amazon India'', ''Flipkart'')', maxLength: 100}, slug: {type: string, description: 'URL-friendly platform identifier (auto-generated)'}, description: {type: string, description: 'Brief description of the platform', maxLength: 500}, base_url: {type: string, format: uri, description: 'Main URL of the platform', maxLength: 200}, logo_url: {type: string, format: uri, description: 'URL to the platform''s logo', maxLength: 300}, api_credentials_placeholder: {type: string, description: 'Placeholder for API credentials (sensitive data should be stored securely)', maxLength: 200}, is_active: {type: boolean, description: 'Whether the platform is active', default: true}, has_api_credentials: {type: boolean, description: 'Virtual field indicating if API credentials are configured'}, display_name: {type: string, description: 'Virtual field for formatted display name'}, createdAt: {type: string, format: date-time, description: 'Platform creation timestamp'}, updatedAt: {type: string, format: date-time, description: 'Platform last update timestamp'}}
            example: {_id: 64a7b8c9d0e1f2a3b4c5d6e7, name: 'Amazon India', slug: amazon-india, description: 'India''s largest e-commerce marketplace', base_url: 'https://www.amazon.in', logo_url: 'https://example.com/amazon-logo.png', api_credentials_placeholder: 'API credentials configured', is_active: true, has_api_credentials: true, display_name: 'Amazon India', createdAt: '2024-07-14T10:30:00.000Z', updatedAt: '2024-07-14T10:30:00.000Z'}
        PlatformList:
            type: object
            properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/Platform'}}, pagination: {type: object, properties: {currentPage: {type: integer}, totalPages: {type: integer}, totalCount: {type: integer}, limit: {type: integer}, hasNextPage: {type: boolean}, hasPrevPage: {type: boolean}}}, filters: {type: object, properties: {is_active: {type: boolean}, search: {type: string}}}}
        PlatformFee:
            type: object
            properties: {_id: {type: string, description: 'Unique identifier for the platform fee'}, platform_id: {type: string, description: 'Reference to the platform'}, fee_type: {type: string, enum: ['Commission Percentage', 'Fixed Listing Fee', 'Payment Gateway Fee', 'Shipping Fee', 'Storage Fee', Other], description: 'Type of fee'}, description: {type: string, description: 'Detailed description of the fee'}, value: {type: number, minimum: 0, description: 'Fee value (percentage or fixed amount)'}, is_percentage: {type: boolean, description: 'Whether the value is a percentage'}, effective_date: {type: string, format: date-time, description: 'When the fee becomes effective'}, end_date: {type: string, format: date-time, description: 'When the fee expires (optional)'}, is_active: {type: boolean, description: 'Whether the fee is active'}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}
            required: [platform_id, fee_type, value]
        ProductCreateRequest:
            type: object
            required: [name, description, category_id]
            properties: {name: {type: string, minLength: 2, maxLength: 200}, description: {type: string, minLength: 1, maxLength: 2000}, short_description: {type: string, maxLength: 500}, category_id: {type: string}, brand_id: {type: string}, images: {type: array, items: {type: string}}, score: {type: number, minimum: 0, maximum: 5}, seo_details: {type: object, properties: {meta_title: {type: string, maxLength: 60}, meta_description: {type: string, maxLength: 160}, meta_keywords: {type: array, items: {type: string}}}}}
        ProductUpdateRequest:
            type: object
            properties: {name: {type: string, minLength: 2, maxLength: 200}, description: {type: string, minLength: 1, maxLength: 2000}, short_description: {type: string, maxLength: 500}, category_id: {type: string}, brand_id: {type: string}, images: {type: array, items: {type: string}}, score: {type: number, minimum: 0, maximum: 5}, is_active: {type: boolean}, seo_details: {type: object, properties: {meta_title: {type: string, maxLength: 60}, meta_description: {type: string, maxLength: 160}, meta_keywords: {type: array, items: {type: string}}}}}
        ProductStats:
            type: object
            properties: {totalProducts: {type: number}, activeProducts: {type: number}, inactiveProducts: {type: number}}
        PaginatedProducts:
            type: object
            properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/Product'}}, pagination: {type: object, properties: {currentPage: {type: number}, totalPages: {type: number}, totalItems: {type: number}, itemsPerPage: {type: number}, hasNextPage: {type: boolean}, hasPrevPage: {type: boolean}}}}
        DiscountDetails:
            type: object
            properties: {price: {type: number, minimum: 0, description: 'Discounted price'}, percentage: {type: number, minimum: 0, maximum: 100, description: 'Discount percentage'}, end_date: {type: string, format: date-time, description: 'Discount end date'}, is_on_sale: {type: boolean, description: 'Whether variant is currently on sale'}}
        Dimensions:
            type: object
            properties: {length: {type: number, minimum: 0}, width: {type: number, minimum: 0}, height: {type: number, minimum: 0}, unit: {type: string, enum: [cm, in], default: cm}}
        Weight:
            type: object
            properties: {value: {type: number, minimum: 0}, unit: {type: string, enum: [g, kg, lb, oz], default: g}}
        ProductVariant:
            type: object
            required: [product_id, sku_code, price]
            properties: {_id: {type: string, description: 'The auto-generated id of the variant'}, product_id: {type: string, description: 'Reference to the main Product'}, option_values: {type: array, items: {type: string}, description: 'Array of Option IDs defining this variant'}, sku_code: {type: string, description: 'Unique SKU code for inventory tracking', example: TSH-RED-L}, price: {type: number, minimum: 0, description: 'Regular price of the variant'}, discount_details: {$ref: '#/components/schemas/DiscountDetails'}, slug: {type: string, description: 'URL-friendly identifier'}, dimensions: {$ref: '#/components/schemas/Dimensions'}, weight: {$ref: '#/components/schemas/Weight'}, packaging_cost: {type: number, minimum: 0, default: 0}, shipping_cost: {type: number, minimum: 0, default: 0}, images: {type: array, items: {type: string}, description: 'Array of image URLs for this variant'}, is_active: {type: boolean, default: true}, sort_order: {type: number, default: 0}, effective_price: {type: number, description: 'Price after discount (virtual field)'}, savings: {type: number, description: 'Amount saved if on sale (virtual field)'}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}
            example: {_id: 60d0fe4f5311236168a109cb, product_id: 60d0fe4f5311236168a109ca, option_values: [60d0fe4f5311236168a109cc, 60d0fe4f5311236168a109cd], sku_code: TSH-RED-L, price: 29.99, discount_details: {price: 24.99, percentage: 17, is_on_sale: true}, slug: basic-tshirt-red-large, dimensions: {length: 70, width: 50, height: 2, unit: cm}, weight: {value: 200, unit: g}, packaging_cost: 1.5, shipping_cost: 5, images: ['https://example.com/tshirt-red-front.jpg'], is_active: true, sort_order: 1}
        ProductVariantResponse:
            type: object
            properties: {success: {type: boolean}, message: {type: string}, data: {$ref: '#/components/schemas/ProductVariant'}}
        ProductVariantsListResponse:
            type: object
            properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/ProductVariant'}}, pagination: {type: object, properties: {currentPage: {type: number}, totalPages: {type: number}, totalItems: {type: number}, itemsPerPage: {type: number}, hasNextPage: {type: boolean}, hasPrevPage: {type: boolean}}}}
        Supplier:
            type: object
            required: [name]
            properties: {_id: {type: string, description: 'Unique identifier for the supplier'}, name: {type: string, description: 'Official name of the supplier company', minLength: 2, maxLength: 150}, slug: {type: string, description: 'URL-friendly identifier (auto-generated)'}, description: {type: string, description: 'Brief description of the supplier', maxLength: 1000}, logo_url: {type: string, format: uri, description: 'URL to the supplier''s logo'}, address: {type: object, properties: {address_line_1: {type: string, description: 'Primary address line'}, address_line_2: {type: string, description: 'Secondary address line'}, city: {type: string, description: 'City name'}, state: {type: string, description: 'State or province'}, zipcode: {type: string, description: 'Postal/ZIP code'}, country: {type: string, description: 'Country name'}}}, email: {type: string, format: email, description: 'Primary company email'}, website: {type: string, format: uri, description: 'Company website URL'}, rating: {type: number, minimum: 0, maximum: 5, description: 'Internal supplier rating'}, payment_terms: {type: string, description: 'Payment terms and conditions', maxLength: 500}, delivery_terms: {type: string, description: 'Delivery terms and conditions', maxLength: 500}, status: {type: string, enum: [Active, Inactive, 'On Hold', 'Pending Approval'], description: 'Current supplier status'}, notes: {type: string, description: 'Internal notes about the supplier', maxLength: 2000}, product_categories_supplied: {type: array, items: {type: string}, description: 'Array of category IDs this supplier provides'}, is_active: {type: boolean, description: 'Whether the supplier is active'}, createdAt: {type: string, format: date-time, description: 'Creation timestamp'}, updatedAt: {type: string, format: date-time, description: 'Last update timestamp'}}
            example: {name: 'TechSupply Corp', description: 'Leading technology supplier for electronics', email: contact@techsupply.com, website: 'https://www.techsupply.com', address: {address_line_1: '123 Tech Street', city: 'San Francisco', state: CA, zipcode: '94102', country: USA}, rating: 4.5, status: Active, payment_terms: 'Net 30 days', delivery_terms: 'FOB destination'}
        SupplierContactNumber:
            type: object
            required: [supplier_id, contact_number]
            properties: {_id: {type: string, description: 'Unique identifier for the contact number'}, supplier_id: {type: string, description: 'Reference to the supplier'}, contact_number: {type: string, description: 'The actual phone number', minLength: 7, maxLength: 20}, contact_name: {type: string, description: 'Name of the person associated with this number', maxLength: 100}, type: {type: string, enum: [Mobile, Landline, Fax, Whatsapp, Toll-Free, Other], default: Mobile, description: 'Type of contact number'}, extension: {type: string, description: 'Phone extension if applicable', maxLength: 10}, is_primary: {type: boolean, default: false, description: 'Whether this is the primary contact number'}, notes: {type: string, description: 'Additional notes about this contact number', maxLength: 500}, is_active: {type: boolean, default: true, description: 'Whether the contact number is active'}, createdAt: {type: string, format: date-time, description: 'Creation timestamp'}, updatedAt: {type: string, format: date-time, description: 'Last update timestamp'}}
            example: {supplier_id: 60b5d5f5e8b5e5001f8b4567, contact_number: +1-555-123-4567, contact_name: 'John Doe', type: Mobile, extension: '123', is_primary: true, notes: 'Primary contact for urgent matters'}
        UserCreateRequest:
            type: object
            required: [name, email, password]
            properties: {name: {type: string}, email: {type: string, format: email}, password: {type: string, format: password}, role: {type: string, enum: [user, admin]}, phone: {type: string}, address: {type: string}}
        UserUpdateRequest:
            type: object
            properties: {name: {type: string}, email: {type: string, format: email}, phone: {type: string}, address: {type: string}, role: {type: string, enum: [user, admin], description: 'Only admin can update role'}, isActive: {type: boolean, description: 'Only admin can update active status'}}
    responses:
        '400':
            description: 'Bad Request - Invalid input data'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        '401':
            description: 'Unauthorized - Authentication required'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        '403':
            description: 'Forbidden - Insufficient permissions'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        '404':
            description: 'Not Found - Resource not found'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        '429':
            description: 'Too Many Requests - Rate limit exceeded'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        '500':
            description: 'Internal Server Error'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
    tags:
        name: Brands
        description: 'Brand management endpoints'
tags:
    -
        name: Authentication
        description: 'Authentication and authorization operations'
    -
        name: Users
        description: 'User management operations'
    -
        name: Categories
        description: 'Category management operations with hierarchical structure'
    -
        name: Products
        description: 'Product catalog operations'
    -
        name: Health
        description: 'System health and monitoring'
    -
        name: Options
        description: 'Product option management endpoints (Color, Size, Weight, etc.)'
    -
        name: 'Product Variants'
        description: 'Product variant management endpoints (SKUs and purchasable versions)'
paths:
    /api/v1/admin/dashboard:
        get:
            summary: 'Get admin dashboard data'
            description: 'Retrieve administrative dashboard statistics and data'
            tags: [Admin]
            security: [{bearerAuth: []}]
            responses: {'200': {description: 'Dashboard data retrieved successfully'}, '401': {description: 'Admin authentication required'}}
    /api/v1/admin/products:
        post:
            summary: 'Create new product'
            description: 'Create a new product in the system'
            tags: [Admin]
            security: [{bearerAuth: []}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {name: {type: string, description: 'Product name'}, price: {type: number, description: 'Product price'}, category: {type: string, description: 'Product category'}, description: {type: string, description: 'Product description'}, stock: {type: integer, description: 'Initial stock quantity'}}}}}}
            responses: {'201': {description: 'Product created successfully'}, '400': {description: 'Invalid input data'}, '401': {description: 'Admin authentication required'}}
    '/api/v1/admin/products/{id}':
        put:
            summary: 'Update product'
            description: 'Update an existing product'
            tags: [Admin]
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Product ID'}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {name: {type: string}, price: {type: number}, category: {type: string}, description: {type: string}, stock: {type: integer}}}}}}
            responses: {'200': {description: 'Product updated successfully'}, '401': {description: 'Admin authentication required'}, '404': {description: 'Product not found'}}
        delete:
            summary: 'Delete product'
            description: 'Delete a product from the system'
            tags: [Admin]
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Product ID'}, {in: query, name: permanent, schema: {type: boolean}, description: 'Whether to permanently delete the product'}]
            responses: {'200': {description: 'Product deleted successfully'}, '401': {description: 'Admin authentication required'}, '404': {description: 'Product not found'}}
    '/api/v1/admin/users/{userId}/manage':
        post:
            summary: 'Manage user account'
            description: 'Perform administrative actions on user accounts'
            tags: [Admin]
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: userId, required: true, schema: {type: string}, description: 'User ID'}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {action: {type: string, enum: [activate, deactivate, suspend, delete], description: 'Action to perform'}, reason: {type: string, description: 'Reason for the action'}}}}}}
            responses: {'200': {description: 'User account managed successfully'}, '401': {description: 'Admin authentication required'}, '404': {description: 'User not found'}}
    /api/v1/admin/settings:
        put:
            summary: 'Update system settings'
            description: 'Update global system configuration'
            tags: [Admin]
            security: [{bearerAuth: []}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {settings: {type: object, description: 'System settings to update'}}}}}}
            responses: {'200': {description: 'System settings updated successfully'}, '401': {description: 'Admin authentication required'}}
    /api/v1/admin/reports/sales:
        get:
            summary: 'Export sales data'
            description: 'Export sales data for reporting purposes'
            tags: [Admin]
            security: [{bearerAuth: []}]
            parameters: [{in: query, name: startDate, schema: {type: string, format: date}, description: 'Start date for the report'}, {in: query, name: endDate, schema: {type: string, format: date}, description: 'End date for the report'}, {in: query, name: format, schema: {type: string, enum: [csv, xlsx, json]}, description: 'Export format'}]
            responses: {'200': {description: 'Sales data exported successfully'}, '401': {description: 'Admin authentication required'}}
    /api/v1/auth/register:
        post:
            summary: 'Register a new user'
            tags: [Authentication]
            requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/RegisterRequest'}}}}
            responses: {'201': {description: 'User registered successfully', content: {application/json: {schema: {$ref: '#/components/schemas/AuthResponse'}}}, headers: {Set-Cookie: {schema: {type: string}, description: 'HTTP-only refresh token cookie'}}}, '400': {description: 'Validation error or user already exists', content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}, '500': {description: 'Internal server error'}}
    /api/v1/auth/login:
        post:
            summary: 'Login user'
            tags: [Authentication]
            requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/LoginRequest'}}}}
            responses: {'200': {description: 'Login successful', content: {application/json: {schema: {$ref: '#/components/schemas/AuthResponse'}}}, headers: {Set-Cookie: {schema: {type: string}, description: 'HTTP-only refresh token cookie'}}}, '400': {description: 'Validation error', content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}, '401': {description: 'Invalid credentials or account deactivated', content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}, '429': {description: 'Too many login attempts', content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}}
    /api/v1/auth/logout:
        post:
            summary: 'Logout user'
            tags: [Authentication]
            security: [{bearerAuth: []}]
            responses: {'204': {description: 'Logout successful'}, '401': {description: Unauthorized}}
    /api/v1/auth/refresh-token:
        post:
            summary: 'Refresh access token'
            tags: [Authentication]
            description: 'Refresh access token using HTTP-only refresh token cookie'
            responses: {'200': {description: 'Token refreshed successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, message: {type: string}, accessToken: {type: string}}}}}, headers: {Set-Cookie: {schema: {type: string}, description: 'New HTTP-only refresh token cookie'}}}, '401': {description: 'Invalid or expired refresh token', content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}}
    /api/v1/auth/forgot-password:
        post:
            summary: 'Request password reset'
            tags: [Authentication]
            requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/ForgotPasswordRequest'}}}}
            responses: {'200': {description: 'Password reset email sent (always returns success to prevent email enumeration)', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, message: {type: string}}}}}}, '400': {description: 'Validation error', content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}, '429': {description: 'Too many password reset requests', content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}, '500': {description: 'Email service error'}}
    '/api/v1/auth/reset-password/{token}':
        post:
            summary: 'Reset password using token'
            tags: [Authentication]
            parameters: [{in: path, name: token, required: true, schema: {type: string}, description: 'Password reset token'}]
            requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/ResetPasswordRequest'}}}}
            responses: {'200': {description: 'Password reset successful', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, message: {type: string}}}}}}, '400': {description: 'Validation error, passwords don''t match, or invalid/expired token', content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}, '500': {description: 'Internal server error'}}
    /api/v1/auth/profile:
        get:
            summary: 'Get current user profile'
            tags: [Authentication]
            security: [{bearerAuth: []}]
            responses: {'200': {description: 'Profile retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {$ref: '#/components/schemas/User'}}}}}}, '401': {description: Unauthorized}}
    /api/v1/auth/verify-email/request:
        post:
            summary: 'Request email verification'
            tags: [Authentication]
            security: [{bearerAuth: []}]
            responses: {'200': {description: 'Verification email sent successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, message: {type: string}}}}}}, '400': {description: 'Email already verified'}, '401': {description: Unauthorized}, '429': {description: 'Rate limit exceeded'}}
    /api/v1/auth/verify-email/complete:
        post:
            summary: 'Complete email verification'
            tags: [Authentication]
            requestBody: {required: true, content: {application/json: {schema: {type: object, required: [token], properties: {token: {type: string, description: 'Email verification token'}}}}}}
            responses: {'200': {description: 'Email verified successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, message: {type: string}}}}}}, '400': {description: 'Invalid or expired token'}}
    /api/v1/auth/verify-phone/request:
        post:
            summary: 'Request phone verification'
            tags: [Authentication]
            security: [{bearerAuth: []}]
            responses: {'200': {description: 'Verification code sent successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, message: {type: string}}}}}}, '400': {description: 'Phone already verified or phone number missing'}, '401': {description: Unauthorized}, '429': {description: 'Rate limit exceeded'}}
    /api/v1/auth/verify-phone/complete:
        post:
            summary: 'Complete phone verification'
            tags: [Authentication]
            security: [{bearerAuth: []}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, required: [otp_code], properties: {otp_code: {type: string, pattern: '^\\d{6}$', description: '6-digit OTP code'}}}}}}
            responses: {'200': {description: 'Phone verified successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, message: {type: string}}}}}}, '400': {description: 'Invalid or expired OTP code'}, '401': {description: Unauthorized}}
    /api/v1/brands:
        post:
            summary: 'Create a new brand'
            tags: [Brands]
            security: [{BearerAuth: []}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, required: [name], properties: {name: {type: string, minLength: 2, maxLength: 100, example: Nike}, description: {type: string, maxLength: 1000, example: 'Leading athletic footwear and apparel brand'}, logo_url: {type: string, format: uri, example: 'https://example.com/nike-logo.png'}, website: {type: string, format: uri, example: 'https://www.nike.com'}, contact_email: {type: string, format: email, example: info@nike.com}}}}}}
            responses: {'201': {description: 'Brand created successfully', content: {application/json: {schema: {$ref: '#/components/schemas/BrandResponse'}}}}, '400': {description: 'Validation error or duplicate brand name'}, '401': {description: 'Unauthorized - Admin access required'}, '500': {description: 'Internal server error'}}
        get:
            summary: 'Get all brands with filtering and pagination'
            tags: [Brands]
            parameters: [{in: query, name: page, schema: {type: integer, minimum: 1, default: 1}, description: 'Page number for pagination'}, {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 100, default: 10}, description: 'Number of items per page'}, {in: query, name: search, schema: {type: string, maxLength: 100}, description: 'Search in brand name and description'}, {in: query, name: sort, schema: {type: string, enum: [name, createdAt, updatedAt], default: name}, description: 'Sort field'}, {in: query, name: order, schema: {type: string, enum: [asc, desc], default: asc}, description: 'Sort order'}, {in: query, name: is_active, schema: {type: boolean}, description: 'Filter by active status (admin only)'}, {in: query, name: include_inactive, schema: {type: boolean, default: false}, description: 'Include inactive brands (admin only)'}]
            responses: {'200': {description: 'List of brands retrieved successfully', content: {application/json: {schema: {$ref: '#/components/schemas/BrandsListResponse'}}}}, '400': {description: 'Invalid query parameters'}, '500': {description: 'Internal server error'}}
    /api/v1/brands/stats:
        get:
            summary: 'Get brand statistics'
            tags: [Brands]
            security: [{BearerAuth: []}]
            responses: {'200': {description: 'Brand statistics retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {type: object, properties: {totalBrands: {type: number}, activeBrands: {type: number}, inactiveBrands: {type: number}, brandsWithLogos: {type: number}, brandsWithWebsites: {type: number}, logoPercentage: {type: string}, websitePercentage: {type: string}}}}}}}}, '401': {description: 'Unauthorized - Admin access required'}, '500': {description: 'Internal server error'}}
    '/api/v1/brands/{identifier}':
        get:
            summary: 'Get a single brand by ID or slug'
            tags: [Brands]
            parameters: [{in: path, name: identifier, required: true, schema: {type: string}, description: 'Brand ID or slug', example: nike}]
            responses: {'200': {description: 'Brand retrieved successfully', content: {application/json: {schema: {$ref: '#/components/schemas/BrandResponse'}}}}, '404': {description: 'Brand not found'}, '500': {description: 'Internal server error'}}
    '/api/v1/brands/{id}':
        patch:
            summary: 'Update a brand'
            tags: [Brands]
            security: [{BearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Brand ID'}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {name: {type: string, minLength: 2, maxLength: 100}, description: {type: string, maxLength: 1000}, logo_url: {type: string, format: uri}, website: {type: string, format: uri}, contact_email: {type: string, format: email}, is_active: {type: boolean}}}}}}
            responses: {'200': {description: 'Brand updated successfully', content: {application/json: {schema: {$ref: '#/components/schemas/BrandResponse'}}}}, '400': {description: 'Validation error or duplicate brand name'}, '401': {description: 'Unauthorized - Admin access required'}, '404': {description: 'Brand not found'}, '500': {description: 'Internal server error'}}
        delete:
            summary: 'Soft delete a brand'
            tags: [Brands]
            security: [{BearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Brand ID'}]
            responses: {'204': {description: 'Brand deleted successfully'}, '401': {description: 'Unauthorized - Admin access required'}, '404': {description: 'Brand not found'}, '500': {description: 'Internal server error'}}
    /api/v1/categories:
        get:
            summary: 'Get all categories'
            description: 'Retrieve a paginated list of categories with optional filtering'
            tags: [Categories]
            parameters: [{in: query, name: page, schema: {type: integer, minimum: 1, default: 1}, description: 'Page number for pagination'}, {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 100, default: 10}, description: 'Number of items per page'}, {in: query, name: search, schema: {type: string}, description: 'Search term for category name or description'}, {in: query, name: parent_id, schema: {type: string}, description: 'Filter by parent category ID (use ''null'' for root categories)'}, {in: query, name: sort_by, schema: {type: string, enum: [name, createdAt, updatedAt], default: name}, description: 'Field to sort by'}, {in: query, name: sort_order, schema: {type: string, enum: [asc, desc], default: asc}, description: 'Sort order'}, {in: query, name: include_inactive, schema: {type: boolean, default: false}, description: 'Include inactive categories (admin only)'}]
            responses: {'200': {description: 'Categories retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean, example: true}, message: {type: string, example: 'Categories retrieved successfully'}, data: {type: array, items: {$ref: '#/components/schemas/Category'}}, pagination: {$ref: '#/components/schemas/PaginationInfo'}}}}}}, '400': {$ref: '#/components/responses/400'}, '500': {$ref: '#/components/responses/500'}}
        post:
            summary: 'Create a new category'
            description: 'Create a new category (admin only)'
            tags: [Categories]
            security: [{bearerAuth: []}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, required: [name], properties: {name: {type: string, minLength: 1, maxLength: 100, example: Electronics}, description: {type: string, maxLength: 500, example: 'Electronic devices and accessories'}, parent_category: {type: string, description: 'MongoDB ObjectID of parent category', example: 64a1b2c3d4e5f6789abcdef1}, image_url: {type: string, format: uri, example: 'https://example.com/electronics.jpg'}}}}}}
            responses: {'201': {description: 'Category created successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean, example: true}, message: {type: string, example: 'Category created successfully'}, data: {$ref: '#/components/schemas/Category'}}}}}}, '400': {$ref: '#/components/responses/400'}, '401': {$ref: '#/components/responses/401'}, '403': {$ref: '#/components/responses/403'}, '500': {$ref: '#/components/responses/500'}}
    /api/v1/categories/tree:
        get:
            summary: 'Get category tree'
            description: 'Retrieve hierarchical category tree structure'
            tags: [Categories]
            parameters: [{in: query, name: include_inactive, schema: {type: boolean, default: false}, description: 'Include inactive categories (admin only)'}]
            responses: {'200': {description: 'Category tree retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean, example: true}, message: {type: string, example: 'Category tree retrieved successfully'}, data: {type: array, items: {$ref: '#/components/schemas/CategoryTree'}}}}}}}, '500': {$ref: '#/components/responses/500'}}
    /api/v1/categories/admin/stats:
        get:
            summary: 'Get category statistics'
            description: 'Retrieve category statistics for admin dashboard'
            tags: [Categories]
            security: [{bearerAuth: []}]
            responses: {'200': {description: 'Category statistics retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean, example: true}, message: {type: string, example: 'Category statistics retrieved successfully'}, data: {$ref: '#/components/schemas/CategoryStats'}}}}}}, '401': {$ref: '#/components/responses/401'}, '403': {$ref: '#/components/responses/403'}, '500': {$ref: '#/components/responses/500'}}
    '/api/v1/categories/{identifier}':
        get:
            summary: 'Get category by ID or slug'
            description: 'Retrieve a specific category by its ID or slug'
            tags: [Categories]
            parameters: [{in: path, name: identifier, required: true, schema: {type: string}, description: 'Category ID or slug', example: electronics}]
            responses: {'200': {description: 'Category retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean, example: true}, message: {type: string, example: 'Category retrieved successfully'}, data: {type: object, allOf: [{$ref: '#/components/schemas/Category'}, {type: object, properties: {categoryPath: {type: array, items: {type: object, properties: {name: {type: string}, slug: {type: string}}}, description: 'Breadcrumb path to category'}, subcategories: {type: array, items: {$ref: '#/components/schemas/Category'}, description: 'Direct child categories'}}}]}}}}}}, '404': {$ref: '#/components/responses/404'}, '500': {$ref: '#/components/responses/500'}}
        put:
            summary: 'Update category'
            description: 'Update an existing category (admin only)'
            tags: [Categories]
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: identifier, required: true, schema: {type: string}, description: 'Category ID', example: 64a1b2c3d4e5f6789abcdef2}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {name: {type: string, minLength: 1, maxLength: 100, example: 'Updated Electronics'}, description: {type: string, maxLength: 500, example: 'Updated description for electronic devices'}, parent_category: {type: string, description: 'MongoDB ObjectID of parent category', example: 64a1b2c3d4e5f6789abcdef1}, image_url: {type: string, format: uri, example: 'https://example.com/updated-electronics.jpg'}, is_active: {type: boolean, example: true}}}}}}
            responses: {'200': {description: 'Category updated successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean, example: true}, message: {type: string, example: 'Category updated successfully'}, data: {$ref: '#/components/schemas/Category'}}}}}}, '400': {$ref: '#/components/responses/400'}, '401': {$ref: '#/components/responses/401'}, '403': {$ref: '#/components/responses/403'}, '404': {$ref: '#/components/responses/404'}, '500': {$ref: '#/components/responses/500'}}
        delete:
            summary: 'Delete category'
            description: 'Delete a category (admin only). Soft delete by default, hard delete optional.'
            tags: [Categories]
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: identifier, required: true, schema: {type: string}, description: 'Category ID', example: 64a1b2c3d4e5f6789abcdef2}, {in: query, name: hard_delete, schema: {type: boolean, default: false}, description: 'Perform hard delete (permanent removal)'}]
            responses: {'204': {description: 'Category deleted successfully'}, '400': {$ref: '#/components/responses/400'}, '401': {$ref: '#/components/responses/401'}, '403': {$ref: '#/components/responses/403'}, '404': {$ref: '#/components/responses/404'}, '500': {$ref: '#/components/responses/500'}}
    /api/v1/inventory:
        post:
            summary: 'Create a new inventory record'
            tags: [Inventory]
            security: [{adminAuth: []}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, required: [product_variant_id], properties: {product_variant_id: {type: string, description: 'ID of the base unit product variant'}, stock_quantity: {type: number, minimum: 0, default: 0, description: 'Initial stock quantity'}, min_stock_level: {type: number, minimum: 0, default: 0, description: 'Minimum stock threshold'}, location: {type: string, maxLength: 200, description: 'Physical storage location'}, notes: {type: string, maxLength: 1000, description: 'Internal notes'}}}}}}
            responses: {'201': {description: 'Inventory record created successfully'}, '400': {description: 'Validation error or pack variant provided'}, '401': {description: 'Unauthorized - admin access required'}, '500': {description: 'Internal server error'}}
        get:
            summary: 'Get all inventory records with pagination and filtering'
            tags: [Inventory]
            security: [{adminAuth: []}]
            parameters: [{in: query, name: page, schema: {type: integer, minimum: 1, default: 1}, description: 'Page number for pagination'}, {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 100, default: 10}, description: 'Number of items per page'}, {in: query, name: is_active, schema: {type: boolean}, description: 'Filter by active status'}, {in: query, name: stock_status, schema: {type: string, enum: [out_of_stock, low_stock, in_stock]}, description: 'Filter by stock status'}, {in: query, name: location, schema: {type: string}, description: 'Filter by location (partial match)'}, {in: query, name: product_id, schema: {type: string}, description: 'Filter by product ID'}, {in: query, name: search, schema: {type: string}, description: 'Search across SKU, location, and notes'}, {in: query, name: include_computed_packs, schema: {type: boolean, default: false}, description: 'Include computed stock for pack variants'}, {in: query, name: sort_by, schema: {type: string, enum: [createdAt, updatedAt, stock_quantity, min_stock_level, last_restock_date], default: createdAt}, description: 'Field to sort by'}, {in: query, name: sort_order, schema: {type: string, enum: [asc, desc], default: desc}, description: 'Sort order'}]
            responses: {'200': {description: 'Inventory records retrieved successfully'}, '401': {description: 'Unauthorized - admin access required'}, '500': {description: 'Internal server error'}}
    '/api/v1/inventory/variant/{productVariantId}':
        get:
            summary: 'Get inventory by product variant ID (computed stock)'
            tags: [Inventory]
            security: [{adminAuth: []}]
            parameters: [{in: path, name: productVariantId, required: true, schema: {type: string}, description: 'Product variant ID (base unit or pack)'}]
            responses: {'200': {description: 'Inventory record retrieved successfully with computed stock'}, '400': {description: 'Invalid product variant ID'}, '401': {description: 'Unauthorized - admin access required'}, '404': {description: 'Inventory record not found'}, '500': {description: 'Internal server error'}}
    '/api/v1/inventory/{id}':
        patch:
            summary: 'Update inventory record'
            tags: [Inventory]
            security: [{adminAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Inventory record ID'}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {stock_quantity: {type: number, minimum: 0, description: 'Updated stock quantity'}, min_stock_level: {type: number, minimum: 0, description: 'Updated minimum stock level'}, location: {type: string, maxLength: 200, description: 'Updated storage location'}, notes: {type: string, maxLength: 1000, description: 'Updated notes'}, is_active: {type: boolean, description: 'Updated active status'}}}}}}
            responses: {'200': {description: 'Inventory record updated successfully'}, '400': {description: 'Validation error or invalid inventory ID'}, '401': {description: 'Unauthorized - admin access required'}, '404': {description: 'Inventory record not found'}, '500': {description: 'Internal server error'}}
        delete:
            summary: 'Delete inventory record (soft delete)'
            tags: [Inventory]
            security: [{adminAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Inventory record ID'}]
            responses: {'204': {description: 'Inventory record deleted successfully'}, '400': {description: 'Invalid inventory ID'}, '401': {description: 'Unauthorized - admin access required'}, '404': {description: 'Inventory record not found'}, '500': {description: 'Internal server error'}}
    /api/v1/listings:
        post:
            summary: 'Create a new listing'
            tags: [Listings]
            security: [{adminAuth: []}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, required: [product_variant_id, platform_id], properties: {product_variant_id: {type: string, description: 'ID of the product variant'}, platform_id: {type: string, description: 'ID of the platform'}, platform_sku: {type: string, maxLength: 100}, platform_product_id: {type: string, maxLength: 150}, listing_status: {type: string, enum: [Draft, 'Pending Review', Live, Rejected, Deactivated], default: Draft}, platform_price: {type: number, minimum: 0}, platform_commission_percentage: {type: number, minimum: 0, maximum: 100}, platform_fixed_fee: {type: number, minimum: 0}, platform_shipping_fee: {type: number, minimum: 0}, platform_specific_data: {type: object}, is_active_on_platform: {type: boolean, default: true}}}}}}
            responses: {'201': {description: 'Listing created successfully'}, '400': {description: 'Validation error or duplicate variant-platform combination'}, '401': {description: 'Unauthorized - admin access required'}, '500': {description: 'Internal server error'}}
        get:
            summary: 'Get all listings with pagination and filtering'
            tags: [Listings]
            security: [{adminAuth: []}]
            parameters: [{in: query, name: page, schema: {type: integer, minimum: 1, default: 1}, description: 'Page number for pagination'}, {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 100, default: 10}, description: 'Number of items per page'}, {in: query, name: platform_id, schema: {type: string}, description: 'Filter by platform ID'}, {in: query, name: product_variant_id, schema: {type: string}, description: 'Filter by product variant ID'}, {in: query, name: listing_status, schema: {type: string, enum: [Draft, 'Pending Review', Live, Rejected, Deactivated]}, description: 'Filter by listing status'}, {in: query, name: is_active_on_platform, schema: {type: boolean}, description: 'Filter by active status'}, {in: query, name: platform_sku, schema: {type: string}, description: 'Filter by platform SKU (partial match)'}, {in: query, name: platform_product_id, schema: {type: string}, description: 'Filter by platform product ID (partial match)'}, {in: query, name: needs_sync, schema: {type: boolean}, description: 'Filter listings that need synchronization'}, {in: query, name: has_price, schema: {type: boolean}, description: 'Filter listings with valid platform price'}, {in: query, name: search, schema: {type: string}, description: 'Search across platform SKU and product ID'}, {in: query, name: sort_by, schema: {type: string, enum: [createdAt, updatedAt, platform_price, listing_status, last_synced_at], default: createdAt}, description: 'Field to sort by'}, {in: query, name: sort_order, schema: {type: string, enum: [asc, desc], default: desc}, description: 'Sort order'}]
            responses: {'200': {description: 'Listings retrieved successfully'}, '401': {description: 'Unauthorized - admin access required'}, '500': {description: 'Internal server error'}}
    '/api/v1/listings/{id}':
        get:
            summary: 'Get listing by ID'
            tags: [Listings]
            security: [{adminAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Listing ID'}]
            responses: {'200': {description: 'Listing retrieved successfully'}, '400': {description: 'Invalid listing ID'}, '401': {description: 'Unauthorized - admin access required'}, '404': {description: 'Listing not found'}, '500': {description: 'Internal server error'}}
        patch:
            summary: 'Update listing'
            tags: [Listings]
            security: [{adminAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Listing ID'}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {platform_sku: {type: string, maxLength: 100}, platform_product_id: {type: string, maxLength: 150}, listing_status: {type: string, enum: [Draft, 'Pending Review', Live, Rejected, Deactivated]}, platform_price: {type: number, minimum: 0}, platform_commission_percentage: {type: number, minimum: 0, maximum: 100}, platform_fixed_fee: {type: number, minimum: 0}, platform_shipping_fee: {type: number, minimum: 0}, platform_specific_data: {type: object}, is_active_on_platform: {type: boolean}}}}}}
            responses: {'200': {description: 'Listing updated successfully'}, '400': {description: 'Validation error or invalid listing ID'}, '401': {description: 'Unauthorized - admin access required'}, '404': {description: 'Listing not found'}, '500': {description: 'Internal server error'}}
        delete:
            summary: 'Delete listing (soft delete)'
            tags: [Listings]
            security: [{adminAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Listing ID'}]
            responses: {'204': {description: 'Listing deleted successfully'}, '400': {description: 'Invalid listing ID'}, '401': {description: 'Unauthorized - admin access required'}, '404': {description: 'Listing not found'}, '500': {description: 'Internal server error'}}
    /api/v1/options:
        post:
            summary: 'Create a new option'
            tags: [Options]
            security: [{BearerAuth: []}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, required: [option_type, option_value], properties: {option_type: {type: string, maxLength: 50, example: Color}, option_value: {type: string, maxLength: 100, example: Red}, name: {type: string, maxLength: 100, example: 'Bright Red'}, sort_order: {type: number, minimum: 0, example: 1}}}}}}
            responses: {'201': {description: 'Option created successfully', content: {application/json: {schema: {$ref: '#/components/schemas/OptionResponse'}}}}, '400': {description: 'Validation error or duplicate option'}, '401': {description: 'Unauthorized - Admin access required'}, '500': {description: 'Internal server error'}}
        get:
            summary: 'Get all options with filtering and pagination'
            tags: [Options]
            parameters: [{in: query, name: page, schema: {type: integer, minimum: 1}, description: 'Page number for pagination'}, {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 100}, description: 'Number of items per page'}, {in: query, name: option_type, schema: {type: string, maxLength: 50}, description: 'Filter by option type (case-insensitive)'}, {in: query, name: is_active, schema: {type: boolean}, description: 'Filter by active status (admin only)'}, {in: query, name: search, schema: {type: string, maxLength: 100}, description: 'Search in name, option_value, and option_type'}, {in: query, name: sort, schema: {type: string, enum: [option_type, name, sort_order]}, description: 'Sort field'}, {in: query, name: order, schema: {type: string, enum: [asc, desc]}, description: 'Sort order'}, {in: query, name: include_inactive, schema: {type: boolean}, description: 'Include inactive options (admin only)'}]
            responses: {'200': {description: 'List of options retrieved successfully', content: {application/json: {schema: {$ref: '#/components/schemas/OptionsListResponse'}}}}, '400': {description: 'Invalid query parameters'}, '500': {description: 'Internal server error'}}
    /api/v1/options/types:
        get:
            summary: 'Get all option types with their values'
            tags: [Options]
            parameters: [{in: query, name: include_inactive, schema: {type: boolean}, description: 'Include inactive options (admin only)'}]
            responses: {'200': {description: 'Option types retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/OptionType'}}}}}}}, '500': {description: 'Internal server error'}}
    /api/v1/options/stats:
        get:
            summary: 'Get option statistics'
            tags: [Options]
            security: [{BearerAuth: []}]
            responses: {'200': {description: 'Option statistics retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {type: object, properties: {totalOptions: {type: number}, activeOptions: {type: number}, inactiveOptions: {type: number}, totalOptionTypes: {type: number}, topOptionTypes: {type: array, items: {type: object, properties: {option_type: {type: string}, count: {type: number}}}}}}}}}}}, '401': {description: 'Unauthorized - Admin access required'}, '500': {description: 'Internal server error'}}
    '/api/v1/options/{id}':
        get:
            summary: 'Get a single option by ID'
            tags: [Options]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Option ID'}]
            responses: {'200': {description: 'Option retrieved successfully', content: {application/json: {schema: {$ref: '#/components/schemas/OptionResponse'}}}}, '400': {description: 'Invalid option ID format'}, '404': {description: 'Option not found'}, '500': {description: 'Internal server error'}}
        patch:
            summary: 'Update an option'
            tags: [Options]
            security: [{BearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Option ID'}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {option_type: {type: string, maxLength: 50}, option_value: {type: string, maxLength: 100}, name: {type: string, maxLength: 100}, is_active: {type: boolean}, sort_order: {type: number, minimum: 0}}}}}}
            responses: {'200': {description: 'Option updated successfully', content: {application/json: {schema: {$ref: '#/components/schemas/OptionResponse'}}}}, '400': {description: 'Validation error or duplicate option'}, '401': {description: 'Unauthorized - Admin access required'}, '404': {description: 'Option not found'}, '500': {description: 'Internal server error'}}
        delete:
            summary: 'Soft delete an option'
            tags: [Options]
            security: [{BearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Option ID'}]
            responses: {'204': {description: 'Option deleted successfully'}, '400': {description: 'Invalid option ID format'}, '401': {description: 'Unauthorized - Admin access required'}, '404': {description: 'Option not found'}, '500': {description: 'Internal server error'}}
    /api/v1/platforms:
        post:
            summary: 'Create a new platform'
            description: "Creates a new e-commerce platform in the system. Requires admin authentication.\nThe slug is automatically generated from the platform name.\n"
            tags: [Platforms]
            security: [{AdminAuth: []}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, required: [name], properties: {name: {type: string, description: 'Platform name', maxLength: 100, example: 'Amazon India'}, description: {type: string, description: 'Brief description of the platform', maxLength: 500, example: 'India''s largest e-commerce marketplace'}, base_url: {type: string, format: uri, description: 'Main URL of the platform', maxLength: 200, example: 'https://www.amazon.in'}, logo_url: {type: string, format: uri, description: 'URL to the platform''s logo', maxLength: 300, example: 'https://example.com/amazon-logo.png'}, api_credentials_placeholder: {type: string, description: 'Placeholder for API credentials', maxLength: 200, example: 'API credentials configured'}}}}}}
            responses: {'201': {description: 'Platform created successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean, example: true}, message: {type: string, example: 'Platform created successfully'}, data: {$ref: '#/components/schemas/Platform'}}}}}}, '400': {description: 'Bad request - validation errors or duplicate name', content: {application/json: {schema: {type: object, properties: {success: {type: boolean, example: false}, message: {type: string, example: 'Platform with this name already exists'}, errors: {type: array, items: {type: string}}}}}}}, '401': {description: 'Unauthorized - Admin access required'}, '500': {description: 'Internal server error'}}
        get:
            summary: 'Get all platforms'
            description: "Retrieves a paginated list of platforms with optional filtering and searching.\nSupports filtering by active status and searching by name or description.\n"
            tags: [Platforms]
            security: [{AdminAuth: []}]
            parameters: [{in: query, name: page, schema: {type: integer, minimum: 1, default: 1}, description: 'Page number for pagination'}, {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 50, default: 10}, description: 'Number of platforms per page'}, {in: query, name: is_active, schema: {type: boolean}, description: 'Filter by active status'}, {in: query, name: search, schema: {type: string, maxLength: 100}, description: 'Search term for name or description'}, {in: query, name: sort, schema: {type: string, enum: [name, createdAt, updatedAt], default: createdAt}, description: 'Field to sort by'}, {in: query, name: order, schema: {type: string, enum: [asc, desc], default: desc}, description: 'Sort order'}]
            responses: {'200': {description: 'Platforms retrieved successfully', content: {application/json: {schema: {$ref: '#/components/schemas/PlatformList'}}}}, '400': {description: 'Bad request - invalid query parameters'}, '401': {description: 'Unauthorized - Admin access required'}, '500': {description: 'Internal server error'}}
    '/api/v1/platforms/{identifier}':
        get:
            summary: 'Get platform by ID or slug'
            description: "Retrieves a single platform by its MongoDB ObjectId or slug.\nFirst attempts to find by ID, then falls back to slug if not found.\n"
            tags: [Platforms]
            security: [{AdminAuth: []}]
            parameters: [{in: path, name: identifier, required: true, schema: {type: string}, description: 'Platform ID (ObjectId) or slug', example: 64a7b8c9d0e1f2a3b4c5d6e7}]
            responses: {'200': {description: 'Platform retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean, example: true}, data: {$ref: '#/components/schemas/Platform'}}}}}}, '400': {description: 'Bad request - identifier is required'}, '401': {description: 'Unauthorized - Admin access required'}, '404': {description: 'Platform not found'}, '500': {description: 'Internal server error'}}
    '/api/v1/platforms/{id}':
        patch:
            summary: 'Update a platform'
            description: "Updates an existing platform. Only provided fields will be updated.\nIf the name is changed, the slug will be automatically regenerated.\n"
            tags: [Platforms]
            security: [{AdminAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Platform ID (ObjectId)', example: 64a7b8c9d0e1f2a3b4c5d6e7}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {name: {type: string, maxLength: 100, example: 'Amazon India Updated'}, description: {type: string, maxLength: 500, example: 'Updated description'}, base_url: {type: string, format: uri, maxLength: 200, example: 'https://www.amazon.in'}, logo_url: {type: string, format: uri, maxLength: 300, example: 'https://example.com/new-logo.png'}, api_credentials_placeholder: {type: string, maxLength: 200, example: 'Updated API credentials'}, is_active: {type: boolean, example: true}}}}}}
            responses: {'200': {description: 'Platform updated successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean, example: true}, message: {type: string, example: 'Platform updated successfully'}, data: {$ref: '#/components/schemas/Platform'}}}}}}, '400': {description: 'Bad request - validation errors or invalid ID'}, '401': {description: 'Unauthorized - Admin access required'}, '404': {description: 'Platform not found'}, '500': {description: 'Internal server error'}}
        delete:
            summary: 'Delete a platform (soft delete)'
            description: "Soft deletes a platform by setting is_active to false.\nThe platform record is not physically removed from the database.\n"
            tags: [Platforms]
            security: [{AdminAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Platform ID (ObjectId)', example: 64a7b8c9d0e1f2a3b4c5d6e7}]
            responses: {'204': {description: 'Platform deleted successfully (no content)'}, '400': {description: 'Bad request - invalid platform ID format'}, '401': {description: 'Unauthorized - Admin access required'}, '404': {description: 'Platform not found'}, '500': {description: 'Internal server error'}}
    /api/v1/platform-fees:
        post:
            summary: 'Create a new platform fee'
            tags: ['Platform Fees']
            security: [{adminAuth: []}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, required: [platform_id, fee_type, value], properties: {platform_id: {type: string, description: 'ID of the platform'}, fee_type: {type: string, enum: ['Commission Percentage', 'Fixed Listing Fee', 'Payment Gateway Fee', 'Shipping Fee', 'Storage Fee', Other]}, description: {type: string, maxLength: 500}, value: {type: number, minimum: 0, description: 'Fee value'}, is_percentage: {type: boolean, default: false}, effective_date: {type: string, format: date-time}, end_date: {type: string, format: date-time}}}}}}
            responses: {'201': {description: 'Platform fee created successfully'}, '400': {description: 'Validation error or invalid platform ID'}, '401': {description: 'Unauthorized - admin access required'}, '500': {description: 'Internal server error'}}
        get:
            summary: 'Get all platform fees with pagination and filtering'
            tags: ['Platform Fees']
            security: [{adminAuth: []}]
            parameters: [{in: query, name: page, schema: {type: integer, minimum: 1, default: 1}, description: 'Page number for pagination'}, {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 100, default: 10}, description: 'Number of items per page'}, {in: query, name: platform_id, schema: {type: string}, description: 'Filter by platform ID'}, {in: query, name: fee_type, schema: {type: string, enum: ['Commission Percentage', 'Fixed Listing Fee', 'Payment Gateway Fee', 'Shipping Fee', 'Storage Fee', Other]}, description: 'Filter by fee type'}, {in: query, name: is_active, schema: {type: boolean}, description: 'Filter by active status'}, {in: query, name: is_currently_active, schema: {type: boolean}, description: 'Filter by current activity (within date range)'}, {in: query, name: effective_date_from, schema: {type: string, format: date}, description: 'Filter fees effective from this date'}, {in: query, name: effective_date_to, schema: {type: string, format: date}, description: 'Filter fees effective until this date'}, {in: query, name: end_date_from, schema: {type: string, format: date}, description: 'Filter fees ending from this date'}, {in: query, name: end_date_to, schema: {type: string, format: date}, description: 'Filter fees ending until this date'}, {in: query, name: sort_by, schema: {type: string, enum: [createdAt, updatedAt, effective_date, value, fee_type], default: createdAt}, description: 'Field to sort by'}, {in: query, name: sort_order, schema: {type: string, enum: [asc, desc], default: desc}, description: 'Sort order'}]
            responses: {'200': {description: 'Platform fees retrieved successfully'}, '401': {description: 'Unauthorized - admin access required'}, '500': {description: 'Internal server error'}}
    '/api/v1/platform-fees/{id}':
        get:
            summary: 'Get platform fee by ID'
            tags: ['Platform Fees']
            security: [{adminAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Platform fee ID'}]
            responses: {'200': {description: 'Platform fee retrieved successfully'}, '400': {description: 'Invalid platform fee ID'}, '401': {description: 'Unauthorized - admin access required'}, '404': {description: 'Platform fee not found'}, '500': {description: 'Internal server error'}}
        patch:
            summary: 'Update platform fee'
            tags: ['Platform Fees']
            security: [{adminAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Platform fee ID'}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {platform_id: {type: string}, fee_type: {type: string, enum: ['Commission Percentage', 'Fixed Listing Fee', 'Payment Gateway Fee', 'Shipping Fee', 'Storage Fee', Other]}, description: {type: string, maxLength: 500}, value: {type: number, minimum: 0}, is_percentage: {type: boolean}, effective_date: {type: string, format: date-time}, end_date: {type: string, format: date-time}, is_active: {type: boolean}}}}}}
            responses: {'200': {description: 'Platform fee updated successfully'}, '400': {description: 'Validation error or invalid platform fee ID'}, '401': {description: 'Unauthorized - admin access required'}, '404': {description: 'Platform fee not found'}, '500': {description: 'Internal server error'}}
        delete:
            summary: 'Delete platform fee (soft delete)'
            tags: ['Platform Fees']
            security: [{adminAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Platform fee ID'}]
            responses: {'204': {description: 'Platform fee deleted successfully'}, '400': {description: 'Invalid platform fee ID'}, '401': {description: 'Unauthorized - admin access required'}, '404': {description: 'Platform fee not found'}, '500': {description: 'Internal server error'}}
    /api/v1/products:
        post:
            summary: 'Create a new product'
            tags: [Products]
            security: [{bearerAuth: []}]
            requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/ProductCreateRequest'}}}}
            responses: {'201': {description: 'Product created successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, message: {type: string}, data: {$ref: '#/components/schemas/Product'}}}}}}, '400': {description: 'Validation error or duplicate product'}, '401': {description: 'Unauthorized - Admin access required'}, '403': {description: 'Forbidden - Admin access required'}}
        get:
            summary: 'Get all products with pagination and filtering'
            tags: [Products]
            parameters: [{in: query, name: page, schema: {type: integer, minimum: 1, default: 1}, description: 'Page number'}, {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 100, default: 10}, description: 'Number of items per page'}, {in: query, name: category_id, schema: {type: string}, description: 'Filter by category ID'}, {in: query, name: brand_id, schema: {type: string}, description: 'Filter by brand ID'}, {in: query, name: search, schema: {type: string}, description: 'Search in product name and description'}, {in: query, name: sort, schema: {type: string, enum: [name, createdAt, score, updatedAt], default: createdAt}, description: 'Sort field'}, {in: query, name: order, schema: {type: string, enum: [asc, desc], default: desc}, description: 'Sort order'}, {in: query, name: include_inactive, schema: {type: boolean, default: false}, description: 'Include inactive products (admin only)'}]
            responses: {'200': {description: 'Products retrieved successfully', content: {application/json: {schema: {$ref: '#/components/schemas/PaginatedProducts'}}}}}
    /api/v1/products/stats:
        get:
            summary: 'Get product statistics'
            tags: [Products]
            security: [{bearerAuth: []}]
            responses: {'200': {description: 'Product statistics retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {$ref: '#/components/schemas/ProductStats'}}}}}}, '401': {description: 'Unauthorized - Admin access required'}, '403': {description: 'Forbidden - Admin access required'}}
    '/api/v1/products/{identifier}':
        get:
            summary: 'Get a product by ID or slug'
            tags: [Products]
            parameters: [{in: path, name: identifier, required: true, schema: {type: string}, description: 'Product ID or slug'}]
            responses: {'200': {description: 'Product retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {$ref: '#/components/schemas/Product'}}}}}}, '404': {description: 'Product not found'}}
    '/api/v1/products/{id}':
        patch:
            summary: 'Update a product'
            tags: [Products]
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Product ID'}]
            requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/ProductUpdateRequest'}}}}
            responses: {'200': {description: 'Product updated successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, message: {type: string}, data: {$ref: '#/components/schemas/Product'}}}}}}, '400': {description: 'Validation error or duplicate product'}, '401': {description: 'Unauthorized - Admin access required'}, '403': {description: 'Forbidden - Admin access required'}, '404': {description: 'Product not found'}}
        delete:
            summary: 'Soft delete a product'
            tags: [Products]
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Product ID'}]
            responses: {'204': {description: 'Product deleted successfully'}, '401': {description: 'Unauthorized - Admin access required'}, '403': {description: 'Forbidden - Admin access required'}, '404': {description: 'Product not found'}}
    /api/v1/product-variants:
        post:
            summary: 'Create a new product variant'
            tags: ['Product Variants']
            security: [{BearerAuth: []}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, required: [product_id, sku_code, price], properties: {product_id: {type: string, example: 60d0fe4f5311236168a109ca}, option_values: {type: array, items: {type: string}, example: [60d0fe4f5311236168a109cc, 60d0fe4f5311236168a109cd]}, sku_code: {type: string, example: TSH-RED-L}, price: {type: number, example: 29.99}, discount_details: {$ref: '#/components/schemas/DiscountDetails'}, dimensions: {$ref: '#/components/schemas/Dimensions'}, weight: {$ref: '#/components/schemas/Weight'}, packaging_cost: {type: number, example: 1.5}, shipping_cost: {type: number, example: 5}, images: {type: array, items: {type: string}, example: ['https://example.com/image.jpg']}}}}}}
            responses: {'201': {description: 'Product variant created successfully', content: {application/json: {schema: {$ref: '#/components/schemas/ProductVariantResponse'}}}}, '400': {description: 'Validation error or duplicate SKU'}, '401': {description: 'Unauthorized - Admin access required'}, '500': {description: 'Internal server error'}}
        get:
            summary: 'Get all product variants with filtering and pagination'
            tags: ['Product Variants']
            parameters: [{in: query, name: page, schema: {type: integer, minimum: 1}, description: 'Page number for pagination'}, {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 100}, description: 'Number of items per page'}, {in: query, name: product_id, schema: {type: string}, description: 'Filter by product ID'}, {in: query, name: is_active, schema: {type: boolean}, description: 'Filter by active status (admin only)'}, {in: query, name: is_on_sale, schema: {type: boolean}, description: 'Filter variants on sale'}, {in: query, name: min_price, schema: {type: number}, description: 'Minimum price filter'}, {in: query, name: max_price, schema: {type: number}, description: 'Maximum price filter'}, {in: query, name: search, schema: {type: string}, description: 'Search in SKU codes'}, {in: query, name: sort, schema: {type: string, enum: [price, sku_code, createdAt, sort_order]}, description: 'Sort field'}, {in: query, name: order, schema: {type: string, enum: [asc, desc]}, description: 'Sort order'}, {in: query, name: include_inactive, schema: {type: boolean}, description: 'Include inactive variants (admin only)'}]
            responses: {'200': {description: 'List of product variants retrieved successfully', content: {application/json: {schema: {$ref: '#/components/schemas/ProductVariantsListResponse'}}}}, '400': {description: 'Invalid query parameters'}, '500': {description: 'Internal server error'}}
    /api/v1/product-variants/stats:
        get:
            summary: 'Get product variant statistics'
            tags: ['Product Variants']
            security: [{BearerAuth: []}]
            responses: {'200': {description: 'Product variant statistics retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {type: object, properties: {totalVariants: {type: number}, activeVariants: {type: number}, inactiveVariants: {type: number}, onSaleVariants: {type: number}, priceStatistics: {type: object, properties: {avgPrice: {type: number}, minPrice: {type: number}, maxPrice: {type: number}}}, topProductsByVariants: {type: array, items: {type: object, properties: {product_id: {type: string}, product_name: {type: string}, variant_count: {type: number}}}}}}}}}}}, '401': {description: 'Unauthorized - Admin access required'}, '500': {description: 'Internal server error'}}
    '/api/v1/product-variants/{identifier}':
        get:
            summary: 'Get a single product variant by ID or SKU code'
            tags: ['Product Variants']
            parameters: [{in: path, name: identifier, required: true, schema: {type: string}, description: 'Variant ID or SKU code'}]
            responses: {'200': {description: 'Product variant retrieved successfully', content: {application/json: {schema: {$ref: '#/components/schemas/ProductVariantResponse'}}}}, '404': {description: 'Product variant not found'}, '500': {description: 'Internal server error'}}
    '/api/v1/product-variants/{id}':
        patch:
            summary: 'Update a product variant'
            tags: ['Product Variants']
            security: [{BearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Variant ID'}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {sku_code: {type: string}, price: {type: number}, discount_details: {$ref: '#/components/schemas/DiscountDetails'}, dimensions: {$ref: '#/components/schemas/Dimensions'}, weight: {$ref: '#/components/schemas/Weight'}, packaging_cost: {type: number}, shipping_cost: {type: number}, images: {type: array, items: {type: string}}, is_active: {type: boolean}, sort_order: {type: number}}}}}}
            responses: {'200': {description: 'Product variant updated successfully', content: {application/json: {schema: {$ref: '#/components/schemas/ProductVariantResponse'}}}}, '400': {description: 'Validation error or duplicate SKU'}, '401': {description: 'Unauthorized - Admin access required'}, '404': {description: 'Product variant not found'}, '500': {description: 'Internal server error'}}
        delete:
            summary: 'Soft delete a product variant'
            tags: ['Product Variants']
            security: [{BearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Variant ID'}]
            responses: {'204': {description: 'Product variant deleted successfully'}, '401': {description: 'Unauthorized - Admin access required'}, '404': {description: 'Product variant not found'}, '500': {description: 'Internal server error'}}
    /api/v1/suppliers:
        post:
            summary: 'Create a new supplier'
            tags: [Suppliers]
            security: [{bearerAuth: []}]
            requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/Supplier'}}}}
            responses: {'201': {description: 'Supplier created successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, message: {type: string}, data: {$ref: '#/components/schemas/Supplier'}}}}}}, '400': {description: 'Validation error or duplicate supplier'}, '401': {description: 'Unauthorized - Admin access required'}}
        get:
            summary: 'Get all suppliers with pagination, filtering, and search'
            tags: [Suppliers]
            security: [{bearerAuth: []}]
            parameters: [{in: query, name: page, schema: {type: integer, minimum: 1, default: 1}, description: 'Page number'}, {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 100, default: 10}, description: 'Items per page'}, {in: query, name: status, schema: {type: string, enum: [Active, Inactive, 'On Hold', 'Pending Approval']}, description: 'Filter by supplier status'}, {in: query, name: country, schema: {type: string}, description: 'Filter by country'}, {in: query, name: product_categories_supplied, schema: {type: string}, description: 'Filter by category ID'}, {in: query, name: search, schema: {type: string}, description: 'Search in name, description, email'}, {in: query, name: sort, schema: {type: string, enum: [name, createdAt, rating, status], default: createdAt}, description: 'Sort field'}, {in: query, name: order, schema: {type: string, enum: [asc, desc], default: desc}, description: 'Sort order'}, {in: query, name: include_inactive, schema: {type: boolean, default: false}, description: 'Include inactive suppliers (admin only)'}]
            responses: {'200': {description: 'Suppliers retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/Supplier'}}, pagination: {type: object, properties: {currentPage: {type: integer}, totalPages: {type: integer}, totalItems: {type: integer}, itemsPerPage: {type: integer}, hasNextPage: {type: boolean}, hasPrevPage: {type: boolean}}}}}}}}}
    /api/v1/suppliers/stats:
        get:
            summary: 'Get supplier statistics'
            tags: [Suppliers]
            security: [{bearerAuth: []}]
            responses: {'200': {description: 'Supplier statistics retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {type: object, properties: {overview: {type: object, properties: {totalSuppliers: {type: integer}, activeSuppliers: {type: integer}, inactiveSuppliers: {type: integer}, averageRating: {type: number}}}, statusBreakdown: {type: array, items: {type: object, properties: {_id: {type: string}, count: {type: integer}}}}, topCountries: {type: array, items: {type: object, properties: {_id: {type: string}, count: {type: integer}}}}}}}}}}}, '401': {description: 'Unauthorized - Admin access required'}}
    '/api/v1/suppliers/{identifier}':
        get:
            summary: 'Get a supplier by ID or slug'
            tags: [Suppliers]
            parameters: [{in: path, name: identifier, required: true, schema: {type: string}, description: 'Supplier ID or slug'}]
            responses: {'200': {description: 'Supplier retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {$ref: '#/components/schemas/Supplier'}}}}}}, '404': {description: 'Supplier not found'}}
    '/api/v1/suppliers/{id}':
        patch:
            summary: 'Update a supplier'
            tags: [Suppliers]
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Supplier ID'}]
            requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/Supplier'}}}}
            responses: {'200': {description: 'Supplier updated successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, message: {type: string}, data: {$ref: '#/components/schemas/Supplier'}}}}}}, '400': {description: 'Validation error'}, '401': {description: 'Unauthorized - Admin access required'}, '404': {description: 'Supplier not found'}}
        delete:
            summary: 'Soft delete a supplier'
            tags: [Suppliers]
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Supplier ID'}]
            responses: {'204': {description: 'Supplier deleted successfully'}, '401': {description: 'Unauthorized - Admin access required'}, '404': {description: 'Supplier not found'}}
    /api/v1/supplier-contact-numbers:
        post:
            summary: 'Create a new supplier contact number'
            tags: ['Supplier Contact Numbers']
            security: [{bearerAuth: []}]
            requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/SupplierContactNumber'}}}}
            responses: {'201': {description: 'Supplier contact number created successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, message: {type: string}, data: {$ref: '#/components/schemas/SupplierContactNumber'}}}}}}, '400': {description: 'Validation error or duplicate contact number'}, '401': {description: 'Unauthorized - Admin access required'}}
        get:
            summary: 'Get all supplier contact numbers with pagination and filtering'
            tags: ['Supplier Contact Numbers']
            security: [{bearerAuth: []}]
            parameters: [{in: query, name: page, schema: {type: integer, minimum: 1, default: 1}, description: 'Page number'}, {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 100, default: 10}, description: 'Items per page'}, {in: query, name: supplier_id, schema: {type: string}, description: 'Filter by supplier ID'}, {in: query, name: is_primary, schema: {type: boolean}, description: 'Filter by primary contact flag'}, {in: query, name: type, schema: {type: string, enum: [Mobile, Landline, Fax, Whatsapp, Toll-Free, Other]}, description: 'Filter by contact type'}, {in: query, name: search, schema: {type: string}, description: 'Search in contact number or contact name'}, {in: query, name: sort, schema: {type: string, enum: [supplier_id, contact_name, is_primary, createdAt, type], default: supplier_id}, description: 'Sort field'}, {in: query, name: order, schema: {type: string, enum: [asc, desc], default: asc}, description: 'Sort order'}, {in: query, name: include_inactive, schema: {type: boolean, default: false}, description: 'Include inactive contact numbers'}]
            responses: {'200': {description: 'Contact numbers retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/SupplierContactNumber'}}, pagination: {type: object, properties: {currentPage: {type: integer}, totalPages: {type: integer}, totalItems: {type: integer}, itemsPerPage: {type: integer}, hasNextPage: {type: boolean}, hasPrevPage: {type: boolean}}}}}}}}, '401': {description: 'Unauthorized - Admin access required'}}
    '/api/v1/supplier-contact-numbers/supplier/{supplierId}':
        get:
            summary: 'Get contact numbers for a specific supplier'
            tags: ['Supplier Contact Numbers']
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: supplierId, required: true, schema: {type: string}, description: 'Supplier ID'}, {in: query, name: include_inactive, schema: {type: boolean, default: false}, description: 'Include inactive contact numbers'}]
            responses: {'200': {description: 'Contact numbers retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/SupplierContactNumber'}}, supplier: {type: object, properties: {_id: {type: string}, name: {type: string}, slug: {type: string}, email: {type: string}}}}}}}}, '401': {description: 'Unauthorized - Admin access required'}, '404': {description: 'Supplier not found'}}
    '/api/v1/supplier-contact-numbers/{id}':
        get:
            summary: 'Get a supplier contact number by ID'
            tags: ['Supplier Contact Numbers']
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Contact number ID'}]
            responses: {'200': {description: 'Contact number retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {$ref: '#/components/schemas/SupplierContactNumber'}}}}}}, '401': {description: 'Unauthorized - Admin access required'}, '404': {description: 'Contact number not found'}}
        patch:
            summary: 'Update a supplier contact number'
            tags: ['Supplier Contact Numbers']
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Contact number ID'}]
            requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/SupplierContactNumber'}}}}
            responses: {'200': {description: 'Contact number updated successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, message: {type: string}, data: {$ref: '#/components/schemas/SupplierContactNumber'}}}}}}, '400': {description: 'Validation error'}, '401': {description: 'Unauthorized - Admin access required'}, '404': {description: 'Contact number not found'}}
        delete:
            summary: 'Soft delete a supplier contact number'
            tags: ['Supplier Contact Numbers']
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Contact number ID'}]
            responses: {'204': {description: 'Contact number deleted successfully'}, '401': {description: 'Unauthorized - Admin access required'}, '404': {description: 'Contact number not found'}}
    '/api/v1/supplier-contact-numbers/{id}/set-primary':
        patch:
            summary: 'Set a contact number as primary for its supplier'
            tags: ['Supplier Contact Numbers']
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Contact number ID'}]
            responses: {'200': {description: 'Contact number set as primary successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, message: {type: string}, data: {$ref: '#/components/schemas/SupplierContactNumber'}}}}}}, '401': {description: 'Unauthorized - Admin access required'}, '404': {description: 'Contact number not found'}}
    /api/v1/users:
        post:
            summary: 'Create a new user (Registration)'
            tags: [Users]
            requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/UserCreateRequest'}}}}
            responses: {'201': {description: 'User created successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, message: {type: string}, data: {$ref: '#/components/schemas/User'}}}}}}, '400': {description: 'User already exists or validation error'}, '500': {description: 'Internal server error'}}
        get:
            summary: 'Get all users with advanced search, filtering, and pagination'
            tags: [Users]
            security: [{bearerAuth: []}]
            parameters: [{in: query, name: page, schema: {type: integer, default: 1}, description: 'Page number'}, {in: query, name: limit, schema: {type: integer, default: 10}, description: 'Items per page'}, {in: query, name: search, schema: {type: string}, description: 'Search term (name, email, phone, address)'}, {in: query, name: role, schema: {type: string, enum: [user, admin]}, description: 'Filter by role'}, {in: query, name: is_active, schema: {type: boolean}, description: 'Filter by active status (admin only for inactive)'}, {in: query, name: min_createdAt, schema: {type: string, format: date-time}, description: 'Minimum creation date'}, {in: query, name: max_createdAt, schema: {type: string, format: date-time}, description: 'Maximum creation date'}, {in: query, name: min_lastLoginAt, schema: {type: string, format: date-time}, description: 'Minimum last login date'}, {in: query, name: max_lastLoginAt, schema: {type: string, format: date-time}, description: 'Maximum last login date'}, {in: query, name: sort, schema: {type: string, default: createdAt}, description: 'Sort field'}, {in: query, name: order, schema: {type: string, enum: [asc, desc], default: desc}, description: 'Sort order'}]
            responses: {'200': {description: 'List of users retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/User'}}, pagination: {type: object, properties: {currentPage: {type: integer}, totalPages: {type: integer}, totalItems: {type: integer}, itemsPerPage: {type: integer}, hasNextPage: {type: boolean}, hasPreviousPage: {type: boolean}}}}}}}}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '500': {description: 'Internal server error'}}
    '/api/v1/users/{id}':
        get:
            summary: 'Get user by ID'
            tags: [Users]
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'User ID'}]
            responses: {'200': {description: 'User retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {$ref: '#/components/schemas/User'}}}}}}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'User not found'}, '500': {description: 'Internal server error'}}
        patch:
            summary: 'Update user profile'
            tags: [Users]
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'User ID'}]
            requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/UserUpdateRequest'}}}}
            responses: {'200': {description: 'User updated successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, message: {type: string}, data: {$ref: '#/components/schemas/User'}}}}}}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'User not found'}, '500': {description: 'Internal server error'}}
        delete:
            summary: 'Delete user (soft delete by default, hard delete option for admin)'
            tags: [Users]
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'User ID'}, {in: query, name: hard_delete, schema: {type: boolean, default: false}, description: 'Perform hard delete (admin only)'}]
            responses: {'204': {description: 'User deleted successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, message: {type: string}}}}}}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'User not found'}, '500': {description: 'Internal server error'}}
    /api/v1/admin/users/trends/registrations:
        get:
            summary: 'Get user registration trends (Admin only)'
            tags: [Users]
            security: [{bearerAuth: []}]
            parameters: [{in: query, name: period, schema: {type: string, enum: [daily, weekly, monthly, yearly], default: daily}, description: 'Time period for grouping'}, {in: query, name: startDate, schema: {type: string, format: date}, description: 'Start date for analysis'}, {in: query, name: endDate, schema: {type: string, format: date}, description: 'End date for analysis'}]
            responses: {'200': {description: 'Registration trends retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {type: array, items: {type: object, properties: {date: {type: string}, count: {type: integer}}}}}}}}}, '401': {description: Unauthorized}, '403': {description: 'Forbidden - Admin only'}, '500': {description: 'Internal server error'}}
    /api/v1/admin/users/trends/active:
        get:
            summary: 'Get active users count (Admin only)'
            tags: [Users]
            security: [{bearerAuth: []}]
            parameters: [{in: query, name: lastActivityDays, schema: {type: integer, default: 30}, description: 'Number of days to consider for activity'}]
            responses: {'200': {description: 'Active users count retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {type: object, properties: {activeUsers: {type: integer}, period: {type: string}, thresholdDate: {type: string, format: date-time}}}}}}}}, '401': {description: Unauthorized}, '403': {description: 'Forbidden - Admin only'}, '500': {description: 'Internal server error'}}
    /api/v1/admin/users/trends/top-activity:
        get:
            summary: 'Get top users by activity (Admin only)'
            tags: [Users]
            security: [{bearerAuth: []}]
            parameters: [{in: query, name: type, schema: {type: string, enum: [logins, orders, reviews], default: logins}, description: 'Type of activity to analyze'}, {in: query, name: limit, schema: {type: integer, default: 10}, description: 'Number of top users to return'}]
            responses: {'200': {description: 'Top users by activity retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {type: array, items: {type: object, properties: {_id: {type: string}, name: {type: string}, email: {type: string}, lastLogin: {type: string, format: date-time}, loginCount: {type: integer}}}}}}}}}, '401': {description: Unauthorized}, '403': {description: 'Forbidden - Admin only'}, '500': {description: 'Internal server error'}}
    /api/v1/admin/users/trends/roles:
        get:
            summary: 'Get user role distribution (Admin only)'
            tags: [Users]
            security: [{bearerAuth: []}]
            responses: {'200': {description: 'Role distribution retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {type: object, properties: {user: {type: integer}, admin: {type: integer}}}}}}}}, '401': {description: Unauthorized}, '403': {description: 'Forbidden - Admin only'}, '500': {description: 'Internal server error'}}
    /health:
        get:
            summary: 'Health check endpoint'
            description: "Returns the current health status of the API server. This endpoint is \nuseful for monitoring systems, load balancers, and automated health checks.\n\nThe response includes:\n- Server status\n- Current timestamp\n- Server uptime in seconds\n- Current environment\n"
            tags: [Health]
            responses: {'200': {description: 'Server is healthy and operational', content: {application/json: {schema: {type: object, properties: {status: {type: string, example: OK}, timestamp: {type: string, format: date-time, example: '2025-07-12T10:30:00.000Z'}, uptime: {type: number, description: 'Server uptime in seconds', example: 3600.5}, environment: {type: string, example: development}}}, examples: {healthy: {summary: 'Healthy server response', value: {status: OK, timestamp: '2025-07-12T10:30:00.000Z', uptime: 3600.5, environment: development}}}}}}, '500': {$ref: '#/components/responses/500'}}
    /api/v1/csrf-token:
        get:
            summary: 'Get CSRF token'
            description: "Returns a CSRF token that must be included in subsequent requests that modify data.\nThis endpoint is used by client applications to obtain a valid CSRF token for \nprotection against Cross-Site Request Forgery attacks.\n\nThe token should be included in the `X-CSRF-Token` header for all \nPOST, PUT, PATCH, and DELETE requests.\n"
            tags: [Authentication]
            responses: {'200': {description: 'CSRF token retrieved successfully', content: {application/json: {schema: {type: object, properties: {csrfToken: {type: string, description: 'The CSRF token to be used in subsequent requests', example: a4f8b2c1-9d3e-4f5a-8b7c-1e2d3f4a5b6c}}}, examples: {success: {summary: 'Successful CSRF token response', value: {csrfToken: a4f8b2c1-9d3e-4f5a-8b7c-1e2d3f4a5b6c}}}}}}, '500': {$ref: '#/components/responses/500'}}
    /:
        get:
            summary: 'Welcome endpoint'
            description: "Basic welcome endpoint that provides information about the API server.\nThis endpoint can be used to verify that the server is running and \nto get basic information about the API.\n"
            tags: [Health]
            responses: {'200': {description: 'Welcome message with API information', content: {application/json: {schema: {type: object, properties: {message: {type: string, example: 'Welcome to Zyvo API'}, version: {type: string, example: 1.0.0}, environment: {type: string, example: development}, csrfToken: {type: string, description: 'CSRF token for this session', example: a4f8b2c1-9d3e-4f5a-8b7c-1e2d3f4a5b6c}}}, examples: {welcome: {summary: 'Welcome response', value: {message: 'Welcome to Zyvo API', version: 1.0.0, environment: development, csrfToken: a4f8b2c1-9d3e-4f5a-8b7c-1e2d3f4a5b6c}}}}}}, '500': {$ref: '#/components/responses/500'}}
    /api-docs:
        get:
            summary: 'API Documentation'
            description: "Serves the interactive API documentation generated with Redoc.\nThis endpoint provides access to the complete API documentation \nincluding all endpoints, schemas, and examples.\n"
            tags: [Health]
            responses: {'200': {description: 'API documentation page', content: {text/html: {schema: {type: string, example: '<!DOCTYPE html><html>...</html>'}}}}, '404': {description: 'Documentation not found (may not be generated yet)', content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}}}
