openapi: 3.0.0
info:
    title: 'Zyvo API'
    version: 1.0.0
    description: "\n        A secure Node.js API server built with Express.js that implements \n        security best practices including CORS, CSRF protection, rate limiting, \n        and comprehensive error handling.\n        \n        ## Features\n        - JWT Authentication\n        - Role-based Access Control\n        - Rate Limiting\n        - CSRF Protection\n        - Input Validation\n        - Comprehensive Error Handling\n        \n        ## Security\n        This API implements multiple layers of security:\n        - CORS with configurable origins\n        - CSRF token validation\n        - Rate limiting per IP\n        - Secure HTTP headers via Helmet.js\n        - Input sanitization and validation\n      "
    contact:
        name: 'Zyvo API Support'
        email: support@zyvo.com
        url: 'https://zyvo.com'
    license:
        name: ISC
        url: 'https://opensource.org/licenses/ISC'
servers:
    -
        url: 'http://localhost:3100'
        description: 'Development server'
    -
        url: 'https://api.zyvo.com'
        description: 'Production server'
components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
            description: 'JWT Bearer token authentication'
        csrfToken:
            type: apiKey
            in: header
            name: X-CSRF-Token
            description: 'CSRF token for protection against CSRF attacks'
        BearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
    schemas:
        User:
            type: object
            required: [name, email, password]
            properties: {_id: {type: string, description: 'Unique identifier for the user', example: 64a1b2c3d4e5f6789abcdef0}, name: {type: string, description: 'User full name', minLength: 1, maxLength: 100, example: 'John Doe'}, email: {type: string, format: email, description: 'User email address', example: john.doe@example.com}, role: {type: string, enum: [user, admin], description: 'User role', default: user, example: user}, isActive: {type: boolean, description: 'User active status', default: true, example: true}, lastLogin: {type: string, format: date-time, description: 'Last login timestamp', example: '2025-07-12T10:30:00.000Z'}, createdAt: {type: string, format: date-time, description: 'Creation timestamp', example: '2025-07-12T10:30:00.000Z'}, updatedAt: {type: string, format: date-time, description: 'Last update timestamp', example: '2025-07-12T10:30:00.000Z'}, id: {type: string, description: 'User ID'}, password: {type: string, format: password, description: 'User password (hashed)'}, phone: {type: string, description: 'User phone number'}, address: {type: string, description: 'User address'}, loginCount: {type: number, description: 'Total login count'}, deleted_at: {type: string, format: date-time, description: 'Soft delete timestamp'}}
        Product:
            type: object
            required: [name, description, category_id]
            properties: {_id: {type: string, description: 'Product ID', example: 64a1b2c3d4e5f6789abcdef1}, name: {type: string, description: 'Product name', minLength: 2, maxLength: 200, example: 'Premium Wireless Headphones'}, description: {type: string, description: 'Detailed product description', maxLength: 2000, example: 'High-quality wireless headphones with noise cancellation'}, price: {type: number, format: float, minimum: 0, description: 'Price of the product in USD', example: 299.99}, category: {type: string, description: 'Product category', example: Electronics}, stock: {type: integer, minimum: 0, description: 'Available stock quantity', example: 50}, tags: {type: array, items: {type: string}, description: 'Product tags for categorization', example: [wireless, audio, premium]}, images: {type: array, items: {type: string, format: uri}, description: 'Array of image URLs', example: ['https://example.com/image1.jpg', 'https://example.com/image2.jpg']}, isActive: {type: boolean, description: 'Whether the product is active/available', default: true, example: true}, createdAt: {type: string, format: date-time, description: 'Product creation timestamp', example: '2025-07-12T10:30:00.000Z'}, updatedAt: {type: string, format: date-time, description: 'Product last update timestamp', example: '2025-07-12T10:30:00.000Z'}, slug: {type: string, description: 'Product slug (auto-generated from name)'}, short_description: {type: string, description: 'Brief product summary', maxLength: 500}, category_id: {type: string, description: 'Category reference ID'}, brand_id: {type: string, description: 'Brand reference ID'}, score: {type: number, minimum: 0, maximum: 5, description: 'Product score/rating'}, seo_details: {type: object, properties: {meta_title: {type: string, maxLength: 60}, meta_description: {type: string, maxLength: 160}, meta_keywords: {type: array, items: {type: string}}}}, is_active: {type: boolean, description: 'Product active status'}, min_price: {type: number, minimum: 0, description: 'Minimum price from all active variants'}, min_discounted_price: {type: number, minimum: 0, description: 'Minimum discounted price from all active variants'}, variants: {type: array, items: {$ref: '#/components/schemas/ProductVariant'}, description: 'Array of active product variants'}}
        Category:
            type: object
            required: [name]
            properties: {_id: {type: string, description: 'Unique identifier for the category', example: 64a1b2c3d4e5f6789abcdef2}, name: {type: string, description: 'Name of the category', minLength: 1, maxLength: 100, example: Electronics}, description: {type: string, description: 'Description of the category', maxLength: 500, example: 'Electronic devices and accessories'}, slug: {type: string, description: 'URL-friendly slug for the category', example: electronics}, parent_category: {type: string, description: 'Parent category ID for hierarchical structure', example: 64a1b2c3d4e5f6789abcdef1}, image_url: {type: string, format: uri, description: 'Category image URL', example: 'https://example.com/electronics.jpg'}, is_active: {type: boolean, description: 'Whether the category is active', default: true, example: true}, createdAt: {type: string, format: date-time, description: 'Category creation timestamp', example: '2025-07-12T10:30:00.000Z'}, updatedAt: {type: string, format: date-time, description: 'Category last update timestamp', example: '2025-07-12T10:30:00.000Z'}}
        CategoryTree:
            type: object
            properties: {_id: {type: string, description: 'Category ID', example: 64a1b2c3d4e5f6789abcdef2}, name: {type: string, description: 'Category name', example: Electronics}, slug: {type: string, description: 'Category slug', example: electronics}, description: {type: string, description: 'Category description', example: 'Electronic devices and accessories'}, image_url: {type: string, format: uri, description: 'Category image URL', example: 'https://example.com/electronics.jpg'}, children: {type: array, items: {$ref: '#/components/schemas/CategoryTree'}, description: 'Child categories'}}
        CategoryStats:
            type: object
            properties: {totalCategories: {type: integer, description: 'Total number of categories', example: 50}, activeCategories: {type: integer, description: 'Number of active categories', example: 45}, inactiveCategories: {type: integer, description: 'Number of inactive categories', example: 5}, rootCategories: {type: integer, description: 'Number of root categories', example: 10}, categoriesWithChildren: {type: integer, description: 'Number of categories with child categories', example: 15}, categoriesWithoutChildren: {type: integer, description: 'Number of categories without child categories', example: 30}}
        PaginationInfo:
            type: object
            properties: {page: {type: integer, minimum: 1, description: 'Current page number', example: 1}, limit: {type: integer, minimum: 1, maximum: 100, description: 'Number of items per page', example: 10}, total: {type: integer, minimum: 0, description: 'Total number of items', example: 100}, totalPages: {type: integer, minimum: 0, description: 'Total number of pages', example: 10}, hasNext: {type: boolean, description: 'Whether there is a next page', example: true}, hasPrev: {type: boolean, description: 'Whether there is a previous page', example: false}}
        Error:
            type: object
            properties: {error: {type: string, description: 'Error message', example: 'Validation failed'}, details: {type: array, items: {type: string}, description: 'Detailed error information', example: ['Name is required', 'Email must be valid']}, statusCode: {type: integer, description: 'HTTP status code', example: 400}, timestamp: {type: string, format: date-time, description: 'Error timestamp', example: '2025-07-12T10:30:00.000Z'}}
        Success:
            type: object
            properties: {message: {type: string, description: 'Success message', example: 'Operation completed successfully'}, data: {type: object, description: 'Response data'}, statusCode: {type: integer, description: 'HTTP status code', example: 200}, timestamp: {type: string, format: date-time, description: 'Response timestamp', example: '2025-07-12T10:30:00.000Z'}}
        RegisterRequest:
            type: object
            required: [name, email, password]
            properties: {name: {type: string, minLength: 2, maxLength: 50, pattern: '^[a-zA-Z\s]+$', example: 'John Doe'}, email: {type: string, format: email, example: john@example.com}, password: {type: string, format: password, minLength: 8, maxLength: 128, pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]', example: SecurePass123!}, role: {type: string, enum: [user, admin], default: user}}
        LoginRequest:
            type: object
            required: [email, password]
            properties: {email: {type: string, format: email, example: john@example.com}, password: {type: string, format: password, example: SecurePass123!}}
        ForgotPasswordRequest:
            type: object
            required: [email]
            properties: {email: {type: string, format: email, example: john@example.com}}
        ResetPasswordRequest:
            type: object
            required: [password, confirmPassword]
            properties: {password: {type: string, format: password, minLength: 8, maxLength: 128, pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]', example: NewSecurePass123!}, confirmPassword: {type: string, format: password, example: NewSecurePass123!}}
        AuthResponse:
            type: object
            properties: {success: {type: boolean}, message: {type: string}, accessToken: {type: string}, user: {$ref: '#/components/schemas/User'}}
        ErrorResponse:
            type: object
            properties: {success: {type: boolean, example: false}, message: {type: string}, errors: {type: array, items: {type: object, properties: {field: {type: string}, message: {type: string}}}}}
        Brand:
            type: object
            required: [name]
            properties: {_id: {type: string, description: 'The auto-generated id of the brand'}, name: {type: string, description: 'The official name of the brand', maxLength: 100, minLength: 2}, slug: {type: string, description: 'Auto-generated URL-friendly identifier'}, description: {type: string, description: 'A brief description of the brand', maxLength: 1000}, logo_url: {type: string, description: 'URL to the brand''s logo image', format: uri}, website: {type: string, description: 'Official website URL of the brand', format: uri}, contact_email: {type: string, description: 'General contact email for the brand', format: email}, is_active: {type: boolean, description: 'Whether the brand is currently active', default: true}, display_name: {type: string, description: 'Virtual field returning the brand name'}, logo_image: {type: string, description: 'Virtual field returning the logo URL or null'}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}
            example: {_id: 60d0fe4f5311236168a109ca, name: Nike, slug: nike, description: 'Leading athletic footwear and apparel brand', logo_url: 'https://example.com/nike-logo.png', website: 'https://www.nike.com', contact_email: info@nike.com, is_active: true, display_name: Nike, logo_image: 'https://example.com/nike-logo.png', createdAt: '2023-06-22T09:30:00.000Z', updatedAt: '2023-06-22T09:30:00.000Z'}
        BrandResponse:
            type: object
            properties: {success: {type: boolean}, message: {type: string}, data: {$ref: '#/components/schemas/Brand'}}
        BrandsListResponse:
            type: object
            properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/Brand'}}, pagination: {type: object, properties: {currentPage: {type: number}, totalPages: {type: number}, totalItems: {type: number}, itemsPerPage: {type: number}, hasNextPage: {type: boolean}, hasPrevPage: {type: boolean}}}}
        Inventory:
            type: object
            properties: {_id: {type: string, description: 'Unique identifier for the inventory record'}, product_variant_id: {type: string, description: 'Reference to the base unit product variant'}, stock_quantity: {type: number, minimum: 0, description: 'Physical stock quantity for base unit'}, last_restock_date: {type: string, format: date-time, description: 'Last restock timestamp'}, last_sold_date: {type: string, format: date-time, description: 'Last sale timestamp'}, min_stock_level: {type: number, minimum: 0, description: 'Minimum stock threshold'}, location: {type: string, description: 'Physical storage location'}, notes: {type: string, description: 'Internal inventory notes'}, is_active: {type: boolean, description: 'Whether inventory record is active'}, computed_stock_quantity: {type: number, description: 'Computed stock for pack variants'}, stock_status: {type: string, enum: ['Out of Stock', 'Low Stock', 'Medium Stock', 'High Stock'], description: 'Current stock status'}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}
            required: [product_variant_id, stock_quantity]
        Listing:
            type: object
            properties: {_id: {type: string, description: 'Unique identifier for the listing'}, product_variant_id: {type: string, description: 'Reference to the product variant'}, platform_id: {type: string, description: 'Reference to the platform'}, platform_sku: {type: string, description: 'Platform-specific SKU'}, platform_product_id: {type: string, description: 'Platform-specific product ID'}, listing_status: {type: string, enum: [Draft, 'Pending Review', Live, Rejected, Deactivated], description: 'Current status of the listing'}, platform_price: {type: number, minimum: 0, description: 'Price on the platform'}, platform_commission_percentage: {type: number, minimum: 0, maximum: 100, description: 'Commission percentage for this variant'}, platform_fixed_fee: {type: number, minimum: 0, description: 'Fixed fee per sale'}, platform_shipping_fee: {type: number, minimum: 0, description: 'Shipping fee charged by platform'}, last_synced_at: {type: string, format: date-time, description: 'Last synchronization timestamp'}, platform_specific_data: {type: object, description: 'Platform-specific attributes'}, is_active_on_platform: {type: boolean, description: 'Whether listing is active on platform'}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}
            required: [product_variant_id, platform_id]
        Option:
            type: object
            required: [option_type, option_value]
            properties: {_id: {type: string, description: 'The auto-generated id of the option'}, option_type: {type: string, description: 'The type of option (e.g., Color, Size, Weight)', maxLength: 50}, option_value: {type: string, description: 'The value of the option (e.g., Red, Large, 500g)', maxLength: 100}, name: {type: string, description: 'Display name for the option (defaults to option_value)', maxLength: 100}, slug: {type: string, description: 'Auto-generated URL-friendly identifier'}, is_active: {type: boolean, description: 'Whether the option is currently active', default: true}, sort_order: {type: number, description: 'Sort order for displaying options', default: 0}, full_name: {type: string, description: 'Virtual field combining option_type and name'}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}
            example: {_id: 60d0fe4f5311236168a109ca, option_type: Color, option_value: Red, name: 'Bright Red', slug: color-red, is_active: true, sort_order: 1, full_name: 'Color: Bright Red', createdAt: '2023-06-22T09:30:00.000Z', updatedAt: '2023-06-22T09:30:00.000Z'}
        OptionType:
            type: object
            properties: {option_type: {type: string, description: 'The type of option'}, values: {type: array, items: {type: object, properties: {_id: {type: string}, option_value: {type: string}, name: {type: string}, slug: {type: string}, sort_order: {type: number}}}}}
            example: {option_type: Color, values: [{_id: 60d0fe4f5311236168a109ca, option_value: Red, name: 'Bright Red', slug: color-red, sort_order: 1}]}
        OptionResponse:
            type: object
            properties: {success: {type: boolean}, message: {type: string}, data: {$ref: '#/components/schemas/Option'}}
        OptionsListResponse:
            type: object
            properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/Option'}}, pagination: {type: object, properties: {currentPage: {type: number}, totalPages: {type: number}, totalItems: {type: number}, itemsPerPage: {type: number}, hasNextPage: {type: boolean}, hasPrevPage: {type: boolean}}}}
        Platform:
            type: object
            required: [name]
            properties: {_id: {type: string, description: 'Unique platform identifier'}, name: {type: string, description: 'Platform name (e.g., ''Amazon India'', ''Flipkart'')', maxLength: 100}, slug: {type: string, description: 'URL-friendly platform identifier (auto-generated)'}, description: {type: string, description: 'Brief description of the platform', maxLength: 500}, base_url: {type: string, format: uri, description: 'Main URL of the platform', maxLength: 200}, logo_url: {type: string, format: uri, description: 'URL to the platform''s logo', maxLength: 300}, api_credentials_placeholder: {type: string, description: 'Placeholder for API credentials (sensitive data should be stored securely)', maxLength: 200}, is_active: {type: boolean, description: 'Whether the platform is active', default: true}, has_api_credentials: {type: boolean, description: 'Virtual field indicating if API credentials are configured'}, display_name: {type: string, description: 'Virtual field for formatted display name'}, createdAt: {type: string, format: date-time, description: 'Platform creation timestamp'}, updatedAt: {type: string, format: date-time, description: 'Platform last update timestamp'}}
            example: {_id: 64a7b8c9d0e1f2a3b4c5d6e7, name: 'Amazon India', slug: amazon-india, description: 'India''s largest e-commerce marketplace', base_url: 'https://www.amazon.in', logo_url: 'https://example.com/amazon-logo.png', api_credentials_placeholder: 'API credentials configured', is_active: true, has_api_credentials: true, display_name: 'Amazon India', createdAt: '2024-07-14T10:30:00.000Z', updatedAt: '2024-07-14T10:30:00.000Z'}
        PlatformList:
            type: object
            properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/Platform'}}, pagination: {type: object, properties: {currentPage: {type: integer}, totalPages: {type: integer}, totalCount: {type: integer}, limit: {type: integer}, hasNextPage: {type: boolean}, hasPrevPage: {type: boolean}}}, filters: {type: object, properties: {is_active: {type: boolean}, search: {type: string}}}}
        PlatformFee:
            type: object
            properties: {_id: {type: string, description: 'Unique identifier for the platform fee'}, platform_id: {type: string, description: 'Reference to the platform'}, fee_type: {type: string, enum: ['Commission Percentage', 'Fixed Listing Fee', 'Payment Gateway Fee', 'Shipping Fee', 'Storage Fee', Other], description: 'Type of fee'}, description: {type: string, description: 'Detailed description of the fee'}, value: {type: number, minimum: 0, description: 'Fee value (percentage or fixed amount)'}, is_percentage: {type: boolean, description: 'Whether the value is a percentage'}, effective_date: {type: string, format: date-time, description: 'When the fee becomes effective'}, end_date: {type: string, format: date-time, description: 'When the fee expires (optional)'}, is_active: {type: boolean, description: 'Whether the fee is active'}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}
            required: [platform_id, fee_type, value]
        ProductCreateRequest:
            type: object
            required: [name, description, category_id]
            properties: {name: {type: string, minLength: 2, maxLength: 200}, description: {type: string, minLength: 1, maxLength: 2000}, short_description: {type: string, maxLength: 500}, category_id: {type: string}, brand_id: {type: string}, images: {type: array, items: {type: string}}, score: {type: number, minimum: 0, maximum: 5}, seo_details: {type: object, properties: {meta_title: {type: string, maxLength: 60}, meta_description: {type: string, maxLength: 160}, meta_keywords: {type: array, items: {type: string}}}}}
        ProductUpdateRequest:
            type: object
            properties: {name: {type: string, minLength: 2, maxLength: 200}, description: {type: string, minLength: 1, maxLength: 2000}, short_description: {type: string, maxLength: 500}, category_id: {type: string}, brand_id: {type: string}, images: {type: array, items: {type: string}}, score: {type: number, minimum: 0, maximum: 5}, is_active: {type: boolean}, seo_details: {type: object, properties: {meta_title: {type: string, maxLength: 60}, meta_description: {type: string, maxLength: 160}, meta_keywords: {type: array, items: {type: string}}}}}
        ProductStats:
            type: object
            properties: {totalProducts: {type: number}, activeProducts: {type: number}, inactiveProducts: {type: number}}
        PaginatedProducts:
            type: object
            properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/Product'}}, pagination: {type: object, properties: {currentPage: {type: number}, totalPages: {type: number}, totalItems: {type: number}, itemsPerPage: {type: number}, hasNextPage: {type: boolean}, hasPrevPage: {type: boolean}}}}
        DiscountDetails:
            type: object
            properties: {price: {type: number, minimum: 0, description: 'Discounted price'}, percentage: {type: number, minimum: 0, maximum: 100, description: 'Discount percentage'}, end_date: {type: string, format: date-time, description: 'Discount end date'}, is_on_sale: {type: boolean, description: 'Whether variant is currently on sale'}}
        Dimensions:
            type: object
            properties: {length: {type: number, minimum: 0}, width: {type: number, minimum: 0}, height: {type: number, minimum: 0}, unit: {type: string, enum: [cm, in], default: cm}}
        Weight:
            type: object
            properties: {value: {type: number, minimum: 0}, unit: {type: string, enum: [g, kg, lb, oz], default: g}}
        ProductVariant:
            type: object
            required: [product_id, sku_code, price]
            properties: {_id: {type: string, description: 'The auto-generated id of the variant'}, product_id: {type: string, description: 'Reference to the main Product'}, option_values: {type: array, items: {type: string}, description: 'Array of Option IDs defining this variant'}, sku_code: {type: string, description: 'Unique SKU code for inventory tracking', example: TSH-RED-L}, price: {type: number, minimum: 0, description: 'Regular price of the variant'}, discount_details: {$ref: '#/components/schemas/DiscountDetails'}, slug: {type: string, description: 'URL-friendly identifier'}, dimensions: {$ref: '#/components/schemas/Dimensions'}, weight: {$ref: '#/components/schemas/Weight'}, packaging_cost: {type: number, minimum: 0, default: 0}, shipping_cost: {type: number, minimum: 0, default: 0}, images: {type: array, items: {type: string}, description: 'Array of image URLs for this variant'}, is_active: {type: boolean, default: true}, sort_order: {type: number, default: 0}, effective_price: {type: number, description: 'Price after discount (virtual field)'}, savings: {type: number, description: 'Amount saved if on sale (virtual field)'}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}
            example: {_id: 60d0fe4f5311236168a109cb, product_id: 60d0fe4f5311236168a109ca, option_values: [60d0fe4f5311236168a109cc, 60d0fe4f5311236168a109cd], sku_code: TSH-RED-L, price: 29.99, discount_details: {price: 24.99, percentage: 17, is_on_sale: true}, slug: basic-tshirt-red-large, dimensions: {length: 70, width: 50, height: 2, unit: cm}, weight: {value: 200, unit: g}, packaging_cost: 1.5, shipping_cost: 5, images: ['https://example.com/tshirt-red-front.jpg'], is_active: true, sort_order: 1}
        ProductVariantResponse:
            type: object
            properties: {success: {type: boolean}, message: {type: string}, data: {$ref: '#/components/schemas/ProductVariant'}}
        ProductVariantsListResponse:
            type: object
            properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/ProductVariant'}}, pagination: {type: object, properties: {currentPage: {type: number}, totalPages: {type: number}, totalItems: {type: number}, itemsPerPage: {type: number}, hasNextPage: {type: boolean}, hasPrevPage: {type: boolean}}}}
        Supplier:
            type: object
            required: [name]
            properties: {_id: {type: string, description: 'Unique identifier for the supplier'}, name: {type: string, description: 'Official name of the supplier company', minLength: 2, maxLength: 150}, slug: {type: string, description: 'URL-friendly identifier (auto-generated)'}, description: {type: string, description: 'Brief description of the supplier', maxLength: 1000}, logo_url: {type: string, format: uri, description: 'URL to the supplier''s logo'}, address: {type: object, properties: {address_line_1: {type: string, description: 'Primary address line'}, address_line_2: {type: string, description: 'Secondary address line'}, city: {type: string, description: 'City name'}, state: {type: string, description: 'State or province'}, zipcode: {type: string, description: 'Postal/ZIP code'}, country: {type: string, description: 'Country name'}}}, email: {type: string, format: email, description: 'Primary company email'}, website: {type: string, format: uri, description: 'Company website URL'}, rating: {type: number, minimum: 0, maximum: 5, description: 'Internal supplier rating'}, payment_terms: {type: string, description: 'Payment terms and conditions', maxLength: 500}, delivery_terms: {type: string, description: 'Delivery terms and conditions', maxLength: 500}, status: {type: string, enum: [Active, Inactive, 'On Hold', 'Pending Approval'], description: 'Current supplier status'}, notes: {type: string, description: 'Internal notes about the supplier', maxLength: 2000}, product_categories_supplied: {type: array, items: {type: string}, description: 'Array of category IDs this supplier provides'}, is_active: {type: boolean, description: 'Whether the supplier is active'}, createdAt: {type: string, format: date-time, description: 'Creation timestamp'}, updatedAt: {type: string, format: date-time, description: 'Last update timestamp'}}
            example: {name: 'TechSupply Corp', description: 'Leading technology supplier for electronics', email: contact@techsupply.com, website: 'https://www.techsupply.com', address: {address_line_1: '123 Tech Street', city: 'San Francisco', state: CA, zipcode: '94102', country: USA}, rating: 4.5, status: Active, payment_terms: 'Net 30 days', delivery_terms: 'FOB destination'}
        SupplierContactNumber:
            type: object
            required: [supplier_id, contact_number]
            properties: {_id: {type: string, description: 'Unique identifier for the contact number'}, supplier_id: {type: string, description: 'Reference to the supplier'}, contact_number: {type: string, description: 'The actual phone number', minLength: 7, maxLength: 20}, contact_name: {type: string, description: 'Name of the person associated with this number', maxLength: 100}, type: {type: string, enum: [Mobile, Landline, Fax, Whatsapp, Toll-Free, Other], default: Mobile, description: 'Type of contact number'}, extension: {type: string, description: 'Phone extension if applicable', maxLength: 10}, is_primary: {type: boolean, default: false, description: 'Whether this is the primary contact number'}, notes: {type: string, description: 'Additional notes about this contact number', maxLength: 500}, is_active: {type: boolean, default: true, description: 'Whether the contact number is active'}, createdAt: {type: string, format: date-time, description: 'Creation timestamp'}, updatedAt: {type: string, format: date-time, description: 'Last update timestamp'}}
            example: {supplier_id: 60b5d5f5e8b5e5001f8b4567, contact_number: +1-555-123-4567, contact_name: 'John Doe', type: Mobile, extension: '123', is_primary: true, notes: 'Primary contact for urgent matters'}
        Purchase:
            type: object
            required: [product_variant_id, supplier_id, quantity, unit_price_at_purchase, packaging_cost, shipping_cost, landing_price]
            properties: 
                _id: 
                    type: string
                    description: 'Unique identifier for the purchase'
                    example: '60d0fe4f5311236168a109ca'
                product_variant_id: 
                    type: string
                    description: 'Reference to the product variant being purchased'
                    example: '60d0fe4f5311236168a109cb'
                supplier_id: 
                    type: string
                    description: 'Reference to the supplier'
                    example: '60d0fe4f5311236168a109cc'
                purchase_order_number: 
                    type: string
                    description: 'Unique purchase order number'
                    maxLength: 50
                    example: 'PO-2025-001'
                purchase_date: 
                    type: string
                    format: date-time
                    description: 'Date when the purchase was made'
                    example: '2025-07-20T10:30:00.000Z'
                expected_delivery_date: 
                    type: string
                    format: date-time
                    description: 'Expected delivery date'
                    example: '2025-07-25T10:30:00.000Z'
                received_date: 
                    type: string
                    format: date-time
                    description: 'Date when the purchase was received'
                    example: '2025-07-24T14:20:00.000Z'
                quantity: 
                    type: integer
                    minimum: 1
                    description: 'Quantity of items purchased'
                    example: 50
                unit_price_at_purchase: 
                    type: number
                    minimum: 0
                    description: 'Unit price at time of purchase'
                    example: 25.99
                packaging_cost: 
                    type: number
                    minimum: 0
                    description: 'Packaging cost for the purchase'
                    example: 5.00
                shipping_cost: 
                    type: number
                    minimum: 0
                    description: 'Shipping cost for the purchase'
                    example: 15.00
                landing_price: 
                    type: number
                    minimum: 0
                    description: 'Total landing price (unit_price * quantity + packaging + shipping)'
                    example: 1319.50
                status: 
                    type: string
                    enum: [Planned, Pending, Completed, Cancelled, 'Partially Received']
                    default: Planned
                    description: 'Current status of the purchase'
                    example: 'Completed'
                notes: 
                    type: string
                    maxLength: 1000
                    description: 'Additional notes about the purchase'
                    example: 'Bulk discount applied - 10% off total order'
                inventory_updated_on_completion: 
                    type: boolean
                    default: false
                    description: 'Whether inventory was updated when purchase completed'
                    example: true
                is_active: 
                    type: boolean
                    default: true
                    description: 'Whether the purchase record is active'
                    example: true
                createdAt: 
                    type: string
                    format: date-time
                    description: 'Creation timestamp'
                    example: '2025-07-20T10:30:00.000Z'
                updatedAt: 
                    type: string
                    format: date-time
                    description: 'Last update timestamp'
                    example: '2025-07-20T10:30:00.000Z'
            example: 
                _id: '60d0fe4f5311236168a109ca'
                product_variant_id: '60d0fe4f5311236168a109cb'
                supplier_id: '60d0fe4f5311236168a109cc'
                purchase_order_number: 'PO-2025-001'
                purchase_date: '2025-07-20T10:30:00.000Z'
                expected_delivery_date: '2025-07-25T10:30:00.000Z'
                received_date: '2025-07-24T14:20:00.000Z'
                quantity: 50
                unit_price_at_purchase: 25.99
                packaging_cost: 5.00
                shipping_cost: 15.00
                landing_price: 1319.50
                status: 'Completed'
                notes: 'Bulk discount applied - 10% off total order'
                inventory_updated_on_completion: true
                is_active: true
        UserCreateRequest:
            type: object
            required: [name, email, password]
            properties: {name: {type: string}, email: {type: string, format: email}, password: {type: string, format: password}, role: {type: string, enum: [user, admin]}, phone: {type: string}, address: {type: string}}
        UserUpdateRequest:
            type: object
            properties: {name: {type: string}, email: {type: string, format: email}, phone: {type: string}, address: {type: string}, role: {type: string, enum: [user, admin], description: 'Only admin can update role'}, isActive: {type: boolean, description: 'Only admin can update active status'}}
        BlogPost:
            type: object
            required: [author_id, title, content, category_id]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                author_id: {type: string, description: 'Reference to User who authored the post'}
                title: {type: string, maxLength: 200, description: 'Blog post title'}
                slug: {type: string, description: 'URL-friendly version of title (auto-generated)'}
                excerpt: {type: string, maxLength: 500, description: 'Short summary/excerpt'}
                content: {type: string, description: 'Main blog post content (HTML/Markdown)'}
                featured_image_url: {type: string, format: uri, description: 'URL of featured image'}
                featured_image_alt_text: {type: string, description: 'Alt text for featured image accessibility'}
                category_id: {type: string, description: 'Reference to Category'}
                tags: {type: array, items: {type: string}, description: 'Array of blog post tags'}
                read_time_minutes: {type: integer, minimum: 1, description: 'Estimated reading time in minutes'}
                status: {type: string, enum: [DRAFT, PUBLISHED, PENDING_REVIEW, ARCHIVED], default: DRAFT, description: 'Publication status'}
                published_at: {type: string, format: date-time, description: 'Publication timestamp'}
                views_count: {type: integer, default: 0, minimum: 0, description: 'Number of views'}
                seo_title: {type: string, maxLength: 70, description: 'SEO meta title override'}
                meta_description: {type: string, maxLength: 160, description: 'SEO meta description'}
                is_featured: {type: boolean, default: false, description: 'Whether post is featured'}
                comments_enabled: {type: boolean, default: true, description: 'Whether comments are enabled'}
                createdAt: {type: string, format: date-time, description: 'Creation timestamp'}
                updatedAt: {type: string, format: date-time, description: 'Last update timestamp'}
                deleted_at: {type: string, format: date-time, description: 'Soft deletion timestamp (null if not deleted)'}
        Cart:
            type: object
            properties:
                _id: {type: string, description: 'Unique identifier'}
                user_id: {type: string, description: 'Reference to User'}
                applied_coupon_code: {type: string, description: 'Applied coupon code'}
                coupon_discount_amount: {type: number, description: 'Discount amount from coupon'}
                cart_total_amount: {type: number, description: 'Total cart value'}
                last_updated_at: {type: string, format: date-time, description: 'Last update timestamp'}
                createdAt: {type: string, format: date-time}
                updatedAt: {type: string, format: date-time}
        CartItem:
            type: object
            required: [cart_id, product_variant_id, quantity, price_at_addition]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                cart_id: {type: string, description: 'Reference to Cart'}
                product_variant_id: {type: string, description: 'Reference to ProductVariant'}
                quantity: {type: integer, minimum: 1, description: 'Item quantity'}
                price_at_addition: {type: number, minimum: 0, description: 'Price when item was added to cart'}
                added_at: {type: string, format: date-time, description: 'When item was added to cart'}
        Order:
            type: object
            required: [user_id, subtotal_amount, grand_total_amount, shipping_address, billing_address]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                order_number: {type: string, description: 'Unique order number (auto-generated)'}
                user_id: {type: string, description: 'Reference to User'}
                shipping_address:
                    type: object
                    required: [full_name, address_line1, city, state, pincode, country, phone_number]
                    properties:
                        full_name: {type: string, maxLength: 100, description: 'Full name for shipping'}
                        address_line1: {type: string, maxLength: 200, description: 'Primary address line'}
                        address_line2: {type: string, maxLength: 200, description: 'Secondary address line (optional)'}
                        city: {type: string, maxLength: 100, description: 'City'}
                        state: {type: string, maxLength: 100, description: 'State/Province'}
                        pincode: {type: string, pattern: '^\\d{6}$', description: '6-digit pincode'}
                        country: {type: string, maxLength: 100, default: 'India', description: 'Country'}
                        phone_number: {type: string, pattern: '^[+]?[\\d\\s-()]{10,15}$', description: 'Phone number'}
                billing_address:
                    type: object
                    required: [full_name, address_line1, city, state, pincode, country, phone_number]
                    properties:
                        full_name: {type: string, maxLength: 100, description: 'Full name for billing'}
                        address_line1: {type: string, maxLength: 200, description: 'Primary address line'}
                        address_line2: {type: string, maxLength: 200, description: 'Secondary address line (optional)'}
                        city: {type: string, maxLength: 100, description: 'City'}
                        state: {type: string, maxLength: 100, description: 'State/Province'}
                        pincode: {type: string, pattern: '^\\d{6}$', description: '6-digit pincode'}
                        country: {type: string, maxLength: 100, default: 'India', description: 'Country'}
                        phone_number: {type: string, pattern: '^[+]?[\\d\\s-()]{10,15}$', description: 'Phone number'}
                payment_method_id: {type: string, description: 'Reference to PaymentMethod'}
                payment_status: {type: string, enum: [PENDING, PAID, FAILED, REFUNDED, PARTIALLY_REFUNDED], default: PENDING, description: 'Payment status'}
                order_status: {type: string, enum: [PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED, RETURN_REQUESTED, RETURNED], default: PENDING, description: 'Order status'}
                subtotal_amount: {type: number, minimum: 0, description: 'Subtotal before taxes, shipping, and discounts'}
                shipping_cost: {type: number, minimum: 0, default: 0, description: 'Shipping cost'}
                tax_amount: {type: number, minimum: 0, default: 0, description: 'Tax amount'}
                discount_amount: {type: number, minimum: 0, default: 0, description: 'Discount amount'}
                applied_coupon_code: {type: string, description: 'Applied coupon code (if any)'}
                grand_total_amount: {type: number, minimum: 0, description: 'Final total amount (calculated)'}
                tracking_number: {type: string, maxLength: 100, description: 'Shipping tracking number'}
                shipping_carrier: {type: string, maxLength: 100, description: 'Shipping carrier name'}
                notes: {type: string, maxLength: 1000, description: 'Order notes'}
                createdAt: {type: string, format: date-time, description: 'Order creation timestamp'}
                updatedAt: {type: string, format: date-time, description: 'Last update timestamp'}
                items: {type: array, items: {$ref: '#/components/schemas/OrderItem'}, description: 'Order items (populated from OrderItem collection)'}
        OrderItem:
            type: object
            required: [order_id, product_variant_id, sku_code, product_name, quantity, price, subtotal]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                order_id: {type: string, description: 'Reference to Order'}
                product_variant_id: {type: string, description: 'Reference to ProductVariant'}
                sku_code: {type: string, description: 'SKU code (snapshotted for historical accuracy)'}
                product_name: {type: string, maxLength: 200, description: 'Product name (snapshotted)'}
                variant_options:
                    type: array
                    items:
                        type: object
                        required: [option_type, option_value]
                        properties:
                            option_type: {type: string, description: 'Variant option type (e.g., Color, Size)'}
                            option_value: {type: string, description: 'Variant option value (e.g., Red, Large)'}
                    description: 'Product variant options (snapshotted)'
                quantity: {type: integer, minimum: 1, description: 'Quantity ordered'}
                price: {type: number, minimum: 0, description: 'Unit price at time of order'}
                subtotal: {type: number, minimum: 0, description: 'Line total (quantity × price)'}
        CouponCampaign:
            type: object
            required: [name, discount_type, discount_value, valid_from, valid_until]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                name: {type: string, maxLength: 100, description: 'Campaign name (required, unique)'}
                slug: {type: string, description: 'Auto-generated URL-friendly identifier'}
                description: {type: string, maxLength: 500, description: 'Campaign description'}
                code_prefix: {type: string, maxLength: 20, description: 'Code prefix for generated coupons (uppercase)'}
                discount_type: {type: string, enum: [PERCENTAGE, AMOUNT, FREE_SHIPPING], description: 'Type of discount'}
                discount_value: {type: number, minimum: 0, description: 'Discount value (0-100 for percentage, positive for amount/free shipping)'}
                min_purchase_amount: {type: number, minimum: 0, default: 0, description: 'Minimum purchase amount required'}
                max_coupon_discount: {type: number, minimum: 0, description: 'Maximum discount amount (for percentage discounts)'}
                valid_from: {type: string, format: date-time, description: 'Campaign start date (required)'}
                valid_until: {type: string, format: date-time, description: 'Campaign end date (required, must be after valid_from)'}
                max_global_usage: {type: integer, minimum: 0, description: 'Maximum total usage limit (null means unlimited)'}
                current_global_usage: {type: integer, minimum: 0, default: 0, description: 'Current usage count'}
                max_usage_per_user: {type: integer, minimum: 1, default: 1, description: 'Maximum usage per user'}
                is_unique_per_user: {type: boolean, default: true, description: 'Whether each user can only use once'}
                eligibility_criteria: {type: array, items: {type: string, enum: [NEW_USER, REFERRAL, FIRST_ORDER, SPECIFIC_USER_GROUP, ALL_USERS, NONE]}, description: 'User eligibility criteria'}
                applicable_category_ids: {type: array, items: {type: string}, description: 'Applicable category ObjectIds'}
                applicable_product_variant_ids: {type: array, items: {type: string}, description: 'Applicable product variant ObjectIds'}
                is_active: {type: boolean, default: true, description: 'Campaign active status'}
                createdAt: {type: string, format: date-time, description: 'Creation timestamp'}
                updatedAt: {type: string, format: date-time, description: 'Last update timestamp'}
                validity_period: {type: object, description: 'Virtual field - validity period info', properties: {from: {type: string, format: date-time}, until: {type: string, format: date-time}, is_currently_valid: {type: boolean}}}
                usage_stats: {type: object, description: 'Virtual field - usage statistics', properties: {current_usage: {type: integer}, max_usage: {type: integer}, usage_percentage: {type: integer}, remaining_usage: {type: integer}}}
        DynamicContent:
            type: object
            required: [name, type, location_key, created_by]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                name: {type: string, maxLength: 200, description: 'Content name (required, unique)'}
                type: {type: string, enum: [CAROUSEL, MARQUEE, ADVERTISEMENT, OFFER, PROMO], description: 'Content type (required)'}
                location_key: {type: string, maxLength: 100, description: 'Location key for content placement (required)'}
                content_order: {type: number, minimum: 0, default: 0, description: 'Display order'}
                is_active: {type: boolean, default: false, description: 'Active status'}
                display_start_date: {type: string, format: date-time, description: 'Content display start date (null for immediate)'}
                display_end_date: {type: string, format: date-time, description: 'Content display end date (null for indefinite, must be after start date)'}
                primary_image_url: {type: string, format: uri, description: 'Primary image URL (required for CAROUSEL, ADVERTISEMENT, OFFER, PROMO)'}
                mobile_image_url: {type: string, format: uri, description: 'Mobile-optimized image URL'}
                alt_text: {type: string, maxLength: 250, description: 'Image alt text for accessibility'}
                caption: {type: string, maxLength: 500, description: 'Image caption'}
                main_text_content: {type: string, maxLength: 1000, description: 'Main text content (required for MARQUEE)'}
                link_url: {type: string, format: uri, description: 'Link URL for clickable content'}
                call_to_action_text: {type: string, maxLength: 50, description: 'Call-to-action button text'}
                target_audience_tags: {type: array, items: {type: string, maxLength: 50}, description: 'Target audience tags for content filtering'}
                metadata: {type: object, description: 'Additional metadata as key-value pairs'}
                created_by: {type: string, description: 'User ID who created the content (required)'}
                updated_by: {type: string, description: 'User ID who last updated the content'}
                createdAt: {type: string, format: date-time, description: 'Creation timestamp'}
                updatedAt: {type: string, format: date-time, description: 'Last update timestamp'}
                is_currently_active: {type: boolean, description: 'Virtual field - whether content is currently active based on dates and status'}
        Favorite:
            type: object
            required: [user_id, product_variant_id]
            properties:
                _id: {type: string, description: 'Unique identifier', example: '64a1b2c3d4e5f6789abcdef0'}
                user_id: {type: string, description: 'Reference to User who favorited the product', example: '64a1b2c3d4e5f6789abcdef1'}
                product_variant_id:
                    oneOf:
                        - type: string
                          description: 'Product variant ID when not populated'
                          example: '64a1b2c3d4e5f6789abcdef2'
                        - type: object
                          description: 'Populated product variant details'
                          properties:
                              _id: {type: string, example: '64a1b2c3d4e5f6789abcdef2'}
                              sku_code: {type: string, example: 'SKU-12345'}
                              price: {type: number, example: 299.99}
                              images: {type: array, items: {type: string}, example: ['https://example.com/image1.jpg']}
                              name: {type: string, example: 'Product Variant Name'}
                              option_values: {type: array, items: {type: object}}
                              is_active: {type: boolean, example: true}
                              discount_details: {type: object}
                              average_rating: {type: number, example: 4.5}
                              reviews_count: {type: integer, example: 25}
                              product_id:
                                  type: object
                                  description: 'Populated product details'
                                  properties:
                                      _id: {type: string, example: '64a1b2c3d4e5f6789abcdef3'}
                                      name: {type: string, example: 'Product Name'}
                                      description: {type: string, example: 'Product description'}
                                      category_id: {type: string, example: '64a1b2c3d4e5f6789abcdef4'}
                                      brand_id: {type: string, example: '64a1b2c3d4e5f6789abcdef5'}
                user_notes: {type: string, maxLength: 500, description: 'Optional user notes about the favorite', example: 'Love this product!'}
                added_at: {type: string, format: date-time, description: 'When the favorite was added', example: '2025-07-28T10:30:00.000Z'}
                is_active: {type: boolean, default: true, description: 'Whether the favorite is active (not soft deleted)', example: true}
                createdAt: {type: string, format: date-time, description: 'Creation timestamp', example: '2025-07-28T10:30:00.000Z'}
                updatedAt: {type: string, format: date-time, description: 'Last update timestamp', example: '2025-07-28T10:30:00.000Z'}
        FavoriteStats:
            type: object
            properties:
                total_favorites: {type: integer, description: 'Total number of favorites'}
                active_favorites: {type: integer, description: 'Number of active favorites'}
                inactive_favorites: {type: integer, description: 'Number of inactive favorites'}
                unique_users_with_favorites: {type: integer, description: 'Number of unique users with favorites'}
                unique_products_favorited: {type: integer, description: 'Number of unique products favorited'}
                average_favorites_per_user: {type: number, description: 'Average favorites per user'}
                most_favorited_products: 
                    type: array
                    items:
                        type: object
                        properties:
                            product_variant_id: {type: string}
                            sku_code: {type: string}
                            product_name: {type: string}
                            price: {type: number}
                            count: {type: integer}
                top_users_by_favorites:
                    type: array
                    items:
                        type: object
                        properties:
                            user_id: {type: string}
                            user_name: {type: string}
                            user_email: {type: string}
                            count: {type: integer}
                daily_stats:
                    type: array
                    items:
                        type: object
                        properties:
                            date: {type: string, format: date}
                            total_added: {type: integer}
                            active_added: {type: integer}
        CartStats:
            type: object
            properties:
                total_carts: {type: integer, description: 'Total number of carts'}
                active_carts: {type: integer, description: 'Number of carts with items'}
                empty_carts: {type: integer, description: 'Number of empty carts'}
                total_cart_value: {type: number, description: 'Sum of all cart values'}
                average_cart_value: {type: number, description: 'Average cart value (excluding empty carts)'}
                average_items_per_cart: {type: number, description: 'Average items per active cart'}
                total_cart_items: {type: integer, description: 'Total number of cart items'}
                carts_with_coupons: {type: integer, description: 'Number of carts with applied coupons'}
                most_popular_products:
                    type: array
                    items:
                        type: object
                        properties:
                            product_variant_id: {type: string}
                            sku_code: {type: string}
                            product_name: {type: string}
                            price: {type: number}
                            carts_count: {type: integer}
                            total_quantity: {type: integer}
                top_users_by_cart_value:
                    type: array
                    items:
                        type: object
                        properties:
                            user_id: {type: string}
                            user_name: {type: string}
                            user_email: {type: string}
                            cart_value: {type: number}
                            item_count: {type: integer}
        PaymentMethod:
            type: object
            required: [user_id, method_type, alias]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                user_id: {type: string, description: 'Reference to User'}
                method_type: 
                    type: string
                    enum: [CREDIT_CARD, DEBIT_CARD, UPI, WALLET, NETBANKING]
                    description: 'Type of payment method'
                alias: {type: string, maxLength: 100, description: 'User-defined name for the payment method'}
                display_name: {type: string, description: 'Computed display name'}
                details:
                    type: object
                    description: 'Payment method specific details (encrypted)'
                    properties:
                        card_brand: {type: string, description: 'Credit/Debit card brand'}
                        last4_digits: {type: string, description: 'Last 4 digits of card'}
                        expiry_month: {type: string, description: 'Card expiry month'}
                        expiry_year: {type: string, description: 'Card expiry year'}
                        card_holder_name: {type: string, description: 'Card holder name'}
                        upi_id: {type: string, description: 'UPI ID'}
                        account_holder_name: {type: string, description: 'Account holder name'}
                        wallet_provider: {type: string, description: 'Wallet provider name'}
                        linked_account_identifier: {type: string, description: 'Wallet linked account'}
                        bank_name: {type: string, description: 'Bank name for netbanking'}
                is_default: {type: boolean, default: false, description: 'Whether this is the default payment method'}
                is_active: {type: boolean, default: true, description: 'Whether the payment method is active'}
                last_used_at: {type: string, format: date-time, description: 'Last time this payment method was used'}
                usage_count: {type: integer, default: 0, description: 'Number of times this payment method has been used'}
                deleted_at: {type: string, format: date-time, description: 'Soft delete timestamp'}
                created_at: {type: string, format: date-time}
                updated_at: {type: string, format: date-time}
        Notification:
            type: object
            required: [title, message, type, target_type]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                title: {type: string, maxLength: 200, description: 'Notification title'}
                message: {type: string, maxLength: 1000, description: 'Notification message'}
                type:
                    type: string
                    enum: [INFO, SUCCESS, WARNING, ERROR, ORDER_UPDATE, PAYMENT_SUCCESS, PAYMENT_FAILED, SHIPPING_UPDATE, DELIVERY_CONFIRMATION, PROMOTION, SYSTEM_MAINTENANCE, SECURITY_ALERT, ADMIN_ALERT, USER_ACTIVITY, INVENTORY_ALERT]
                    description: 'Notification type'
                target_type:
                    type: string
                    enum: [USER, ADMIN, BOTH]
                    description: 'Target audience type'
                recipient:
                    type: object
                    properties:
                        user_id: {type: string, description: 'Reference to User'}
                        admin_id: {type: string, description: 'Reference to Admin User'}
                        is_broadcast: {type: boolean, default: false, description: 'Whether this is a broadcast notification'}
                        target_roles:
                            type: array
                            items:
                                type: string
                                enum: [user, admin, superadmin]
                            description: 'Target roles for broadcast notifications'
                status:
                    type: string
                    enum: [PENDING, SENT, DELIVERED, READ, FAILED]
                    default: PENDING
                    description: 'Notification delivery status'
                priority:
                    type: string
                    enum: [LOW, MEDIUM, HIGH, URGENT]
                    default: MEDIUM
                    description: 'Priority level'
                is_read: {type: boolean, default: false, description: 'Whether the notification has been read'}
                read_at: {type: string, format: date-time, description: 'When the notification was read'}
                action:
                    type: object
                    properties:
                        type:
                            type: string
                            enum: [NONE, NAVIGATE, EXTERNAL_LINK, MODAL, API_CALL]
                            default: NONE
                        url: {type: string, description: 'Action URL'}
                        params: {type: object, description: 'Action parameters'}
                metadata:
                    type: object
                    properties:
                        related_entity:
                            type: object
                            properties:
                                type:
                                    type: string
                                    enum: [ORDER, PAYMENT, USER, PRODUCT, COUPON, REVIEW, CART]
                                id: {type: string, description: 'Related entity ID'}
                        channel:
                            type: string
                            enum: [IN_APP, EMAIL, SMS, PUSH]
                            default: IN_APP
                        sender:
                            type: object
                            properties:
                                type:
                                    type: string
                                    enum: [SYSTEM, ADMIN, USER]
                                    default: SYSTEM
                                name: {type: string, default: 'System'}
                        extra_data: {type: object, description: 'Additional metadata'}
                schedule:
                    type: object
                    properties:
                        send_at: {type: string, format: date-time, description: 'When to send the notification'}
                        expires_at: {type: string, format: date-time, description: 'When the notification expires'}
                        timezone: {type: string, default: 'UTC'}
                display_title: {type: string, description: 'Computed display title'}
                time_ago: {type: string, description: 'Human readable time since creation'}
                is_expired: {type: boolean, description: 'Whether the notification has expired'}
                is_active: {type: boolean, default: true, description: 'Whether the notification is active'}
                deleted_at: {type: string, format: date-time, description: 'Soft delete timestamp'}
                created_at: {type: string, format: date-time}
                updated_at: {type: string, format: date-time}

        Email:
            type: object
            required: [subject, content, email_type, recipients, sender]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                subject: {type: string, maxLength: 200, description: 'Email subject line'}
                content:
                    type: object
                    required: [html]
                    properties:
                        html: {type: string, description: 'HTML content of the email'}
                        text: {type: string, description: 'Plain text content'}
                sender:
                    type: object
                    required: [admin_id, name, email]
                    properties:
                        admin_id: {type: string, description: 'Reference to admin user'}
                        name: {type: string, description: 'Sender name'}
                        email: {type: string, format: email, description: 'Sender email'}
                recipients:
                    type: object
                    required: [type]
                    properties:
                        type:
                            type: string
                            enum: [INDIVIDUAL, BROADCAST, SEGMENT]
                            description: 'Type of recipients'
                        to:
                            type: array
                            items:
                                type: object
                                properties:
                                    user_id: {type: string, description: 'Reference to User'}
                                    email: {type: string, format: email}
                                    name: {type: string}
                                    status:
                                        type: string
                                        enum: [PENDING, SENT, DELIVERED, OPENED, CLICKED, BOUNCED, FAILED]
                                        default: PENDING
                                    sent_at: {type: string, format: date-time}
                                    delivered_at: {type: string, format: date-time}
                                    opened_at: {type: string, format: date-time}
                                    clicked_at: {type: string, format: date-time}
                        broadcast_criteria:
                            type: object
                            properties:
                                user_roles:
                                    type: array
                                    items:
                                        type: string
                                        enum: [user, admin, superadmin]
                                user_status:
                                    type: array
                                    items:
                                        type: string
                                        enum: [active, inactive, suspended, pending]
                        estimated_count: {type: integer, minimum: 0}
                        actual_count: {type: integer, minimum: 0}
                email_type:
                    type: string
                    enum: [PROMOTIONAL, TRANSACTIONAL, NEWSLETTER, WELCOME, ABANDONED_CART, ORDER_CONFIRMATION, SHIPPING_UPDATE, SYSTEM_NOTIFICATION, SURVEY, ANNOUNCEMENT, REMINDER, FEEDBACK_REQUEST, CUSTOM]
                    description: 'Type of email'
                priority:
                    type: string
                    enum: [LOW, MEDIUM, HIGH, URGENT]
                    default: MEDIUM
                    description: 'Email priority level'
                template:
                    type: object
                    properties:
                        template_id: {type: string, description: 'Reference to EmailTemplate'}
                        template_name: {type: string}
                        variables:
                            type: object
                            description: 'Variables used in template'
                scheduling:
                    type: object
                    properties:
                        send_type:
                            type: string
                            enum: [IMMEDIATE, SCHEDULED, RECURRING]
                            default: IMMEDIATE
                        scheduled_at: {type: string, format: date-time}
                        timezone: {type: string, default: UTC}
                status:
                    type: string
                    enum: [DRAFT, SCHEDULED, SENDING, SENT, FAILED, CANCELLED, PAUSED]
                    default: DRAFT
                    description: 'Current email status'
                stats:
                    type: object
                    properties:
                        total_recipients: {type: integer, minimum: 0}
                        sent_count: {type: integer, minimum: 0}
                        delivered_count: {type: integer, minimum: 0}
                        opened_count: {type: integer, minimum: 0}
                        clicked_count: {type: integer, minimum: 0}
                        bounced_count: {type: integer, minimum: 0}
                        failed_count: {type: integer, minimum: 0}
                        delivery_rate: {type: number, minimum: 0, maximum: 100}
                        open_rate: {type: number, minimum: 0, maximum: 100}
                        click_rate: {type: number, minimum: 0, maximum: 100}
                        bounce_rate: {type: number, minimum: 0, maximum: 100}
                provider:
                    type: object
                    properties:
                        service:
                            type: string
                            enum: [SENDGRID, MAILGUN, AWS_SES, SMTP, POSTMARK]
                            default: SMTP
                        message_id: {type: string}
                settings:
                    type: object
                    properties:
                        track_opens: {type: boolean, default: true}
                        track_clicks: {type: boolean, default: true}
                        allow_unsubscribe: {type: boolean, default: true}
                        reply_to: {type: string, format: email}
                attachments:
                    type: array
                    items:
                        type: object
                        properties:
                            filename: {type: string}
                            path: {type: string}
                            size: {type: integer}
                            mime_type: {type: string}
                            is_inline: {type: boolean, default: false}
                campaign:
                    type: object
                    properties:
                        campaign_id: {type: string}
                        campaign_name: {type: string}
                errors:
                    type: array
                    items:
                        type: object
                        properties:
                            error_type:
                                type: string
                                enum: [VALIDATION, SENDING, DELIVERY, TEMPLATE, PROVIDER]
                            error_message: {type: string}
                            error_code: {type: string}
                            occurred_at: {type: string, format: date-time}
                            resolved: {type: boolean, default: false}
                audit:
                    type: object
                    properties:
                        created_by: {type: string, description: 'Reference to User'}
                        updated_by: {type: string, description: 'Reference to User'}
                        approved_by: {type: string, description: 'Reference to User'}
                        approved_at: {type: string, format: date-time}
                created_at: {type: string, format: date-time}
                updated_at: {type: string, format: date-time}
                sent_at: {type: string, format: date-time}
                completed_at: {type: string, format: date-time}

        EmailTemplate:
            type: object
            required: [name, subject_template, html_template, category, created_by]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                name: {type: string, maxLength: 100, description: 'Unique template name'}
                description: {type: string, maxLength: 500, description: 'Template description'}
                subject_template: {type: string, maxLength: 200, description: 'Email subject template with variables'}
                html_template: {type: string, description: 'HTML template content with variables'}
                text_template: {type: string, description: 'Plain text template content'}
                category:
                    type: string
                    enum: [PROMOTIONAL, TRANSACTIONAL, NEWSLETTER, WELCOME, ABANDONED_CART, ORDER_CONFIRMATION, SHIPPING_UPDATE, SYSTEM_NOTIFICATION, SURVEY, ANNOUNCEMENT, REMINDER, FEEDBACK_REQUEST, CUSTOM]
                    description: 'Template category'
                variables:
                    type: array
                    items:
                        type: object
                        required: [name]
                        properties:
                            name: {type: string, description: 'Variable name (used as {{name}} in templates)'}
                            description: {type: string, description: 'Variable description'}
                            type:
                                type: string
                                enum: [string, number, boolean, date, object, array]
                                default: string
                            required: {type: boolean, default: false}
                            default_value: {description: 'Default value for the variable'}
                    description: 'Template variables/placeholders'
                design:
                    type: object
                    properties:
                        layout:
                            type: string
                            enum: [SINGLE_COLUMN, TWO_COLUMN, THREE_COLUMN, CUSTOM]
                            default: SINGLE_COLUMN
                        theme:
                            type: object
                            properties:
                                primary_color: {type: string, default: '#007bff'}
                                secondary_color: {type: string, default: '#6c757d'}
                                background_color: {type: string, default: '#ffffff'}
                                text_color: {type: string, default: '#333333'}
                                font_family: {type: string, default: 'Arial, sans-serif'}
                        header:
                            type: object
                            properties:
                                include_logo: {type: boolean, default: true}
                                logo_url: {type: string}
                                header_text: {type: string}
                                header_color: {type: string}
                        footer:
                            type: object
                            properties:
                                include_unsubscribe: {type: boolean, default: true}
                                company_info: {type: string}
                                social_links:
                                    type: array
                                    items:
                                        type: object
                                        properties:
                                            platform: {type: string}
                                            url: {type: string}
                                            icon_url: {type: string}
                status:
                    type: string
                    enum: [ACTIVE, INACTIVE, ARCHIVED]
                    default: ACTIVE
                    description: 'Template status'
                visibility:
                    type: string
                    enum: [PUBLIC, PRIVATE, SHARED]
                    default: PRIVATE
                    description: 'Template visibility'
                usage_stats:
                    type: object
                    properties:
                        total_uses: {type: integer, minimum: 0, default: 0}
                        last_used: {type: string, format: date-time}
                        success_rate: {type: number, minimum: 0, maximum: 100, default: 0}
                        avg_open_rate: {type: number, minimum: 0, maximum: 100, default: 0}
                        avg_click_rate: {type: number, minimum: 0, maximum: 100, default: 0}
                validation:
                    type: object
                    properties:
                        is_valid: {type: boolean, default: true}
                        validation_errors:
                            type: array
                            items:
                                type: object
                                properties:
                                    type: {type: string}
                                    message: {type: string}
                                    severity:
                                        type: string
                                        enum: [ERROR, WARNING, INFO]
                                        default: ERROR
                        last_validated: {type: string, format: date-time}
                version: {type: integer, minimum: 1, default: 1}
                parent_template: {type: string, description: 'Reference to parent template for versioning'}
                tags:
                    type: array
                    items:
                        type: string
                    description: 'Template tags for organization'
                created_by: {type: string, description: 'Reference to User'}
                shared_with:
                    type: array
                    items:
                        type: object
                        properties:
                            user_id: {type: string, description: 'Reference to User'}
                            permission:
                                type: string
                                enum: [VIEW, EDIT, ADMIN]
                                default: VIEW
                created_at: {type: string, format: date-time}
                updated_at: {type: string, format: date-time}

        ProductReview:
            type: object
            required: [user_id, product_id, rating]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                user_id: {type: string, description: 'Reference to User'}
                product_id: {type: string, description: 'Reference to Product'}
                order_id: {type: string, description: 'Reference to Order'}
                rating: {type: integer, minimum: 1, maximum: 5}
                title: {type: string, maxLength: 100}
                comment: {type: string, maxLength: 2000}
                images: {type: array, items: {type: string}}
                is_verified_purchase: {type: boolean, default: false}
                helpful_count: {type: integer, default: 0}
                status: {type: string, enum: [pending, approved, rejected], default: pending}
                admin_response: {type: string}
                createdAt: {type: string, format: date-time}
                updatedAt: {type: string, format: date-time}
        UserCoupon:
            type: object
            required: [user_id, coupon_campaign_id, code]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                user_id: {type: string, description: 'Reference to User'}
                coupon_campaign_id: {type: string, description: 'Reference to CouponCampaign'}
                code: {type: string, description: 'Unique coupon code', example: 'SAVE20-ABC123'}
                status: {type: string, enum: [ACTIVE, USED, EXPIRED], default: ACTIVE, description: 'Current coupon status'}
                used_at: {type: string, format: date-time, description: 'Timestamp when coupon was used'}
                used_in_order_id: {type: string, description: 'Reference to Order where coupon was used'}
                expires_at: {type: string, format: date-time, description: 'Coupon expiration date'}
                discount_amount_applied: {type: number, description: 'Actual discount amount when used'}
                admin_notes: {type: string, maxLength: 500, description: 'Admin notes about this coupon'}
                is_active: {type: boolean, default: true, description: 'Whether the coupon is active'}
                createdAt: {type: string, format: date-time}
                updatedAt: {type: string, format: date-time}
                campaign_details:
                    allOf:
                        - {$ref: '#/components/schemas/CouponCampaign'}
                        - {description: 'Populated campaign details'}
        ReviewReport:
            type: object
            required: [user_id, review_id, reason]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                user_id: {type: string, description: 'Reference to User reporting'}
                review_id: {type: string, description: 'Reference to ProductReview'}
                reason: {type: string, enum: [spam, inappropriate, fake, misleading, other]}
                description: {type: string, maxLength: 500}
                status: {type: string, enum: [pending, reviewed, resolved], default: pending}
                admin_notes: {type: string}
                createdAt: {type: string, format: date-time}
                updatedAt: {type: string, format: date-time}
        Wallet:
            type: object
            required: [user_id, balance, currency, status]
            properties:
                _id: {type: string, description: 'Unique identifier', example: '64a1b2c3d4e5f6789abcdef0'}
                user_id: {type: string, description: 'Reference to User', example: '64a1b2c3d4e5f6789abcdef1'}
                balance: {type: number, format: decimal, minimum: 0, description: 'Current wallet balance', example: 1500.75}
                currency: {type: string, enum: [INR, USD, EUR, GBP, AUD, CAD], default: INR, description: 'Wallet currency', example: 'INR'}
                status: {type: string, enum: [ACTIVE, BLOCKED, INACTIVE], default: ACTIVE, description: 'Wallet status', example: 'ACTIVE'}
                last_transaction_at: {type: string, format: date-time, description: 'Last transaction timestamp', example: '2025-07-24T10:30:00.000Z'}
                total_credited_amount: {type: number, format: decimal, minimum: 0, description: 'Total amount credited to wallet', example: 2500.00}
                total_debited_amount: {type: number, format: decimal, minimum: 0, description: 'Total amount debited from wallet', example: 999.25}
                total_transactions_count: {type: integer, minimum: 0, description: 'Total number of transactions', example: 15}
                createdAt: {type: string, format: date-time, description: 'Wallet creation timestamp', example: '2025-01-15T08:00:00.000Z'}
                updatedAt: {type: string, format: date-time, description: 'Last update timestamp', example: '2025-07-24T10:30:00.000Z'}
                user: {
                    type: object,
                    description: 'User details (populated in admin responses)',
                    properties: {
                        _id: {type: string, example: '64a1b2c3d4e5f6789abcdef1'},
                        email: {type: string, format: email, example: 'user@example.com'},
                        first_name: {type: string, example: 'John'},
                        last_name: {type: string, example: 'Doe'},
                        phone: {type: string, example: '+1234567890'}
                    }
                }
        WalletTransaction:
            type: object
            required: [wallet_id, user_id, transaction_type, amount, currency, description, status, initiated_by_actor]
            properties:
                _id: {type: string, description: 'Unique identifier', example: '64a1b2c3d4e5f6789abcdef2'}
                wallet_id: {type: string, description: 'Reference to Wallet', example: '64a1b2c3d4e5f6789abcdef0'}
                user_id: {type: string, description: 'Reference to User', example: '64a1b2c3d4e5f6789abcdef1'}
                transaction_type: {type: string, enum: [CREDIT, DEBIT], description: 'Type of transaction', example: 'CREDIT'}
                amount: {type: number, format: decimal, minimum: 0.01, description: 'Transaction amount', example: 250.75}
                currency: {type: string, enum: [INR, USD, EUR, GBP, AUD, CAD], description: 'Transaction currency', example: 'INR'}
                description: {type: string, maxLength: 250, description: 'Transaction description', example: 'Payment gateway credit - successful payment'}
                reference_type: {type: string, enum: [ORDER, REFUND, PAYMENT_GATEWAY, ADMIN_ADJUSTMENT, WITHDRAWAL], description: 'Reference type for linking', example: 'PAYMENT_GATEWAY'}
                reference_id: {type: string, description: 'Reference ID for linking to other entities', example: '64a1b2c3d4e5f6789abcdef3'}
                current_balance_after_transaction: {type: number, format: decimal, description: 'Balance after this transaction', example: 1500.75}
                status: {type: string, enum: [PENDING, COMPLETED, FAILED, ROLLED_BACK], default: PENDING, description: 'Transaction status', example: 'COMPLETED'}
                initiated_by_actor: {type: string, enum: [USER, ADMIN, SYSTEM], description: 'Who initiated the transaction', example: 'USER'}
                failure_reason: {type: string, description: 'Reason for failure (if failed)', example: 'Insufficient funds'}
                payment_method: {type: string, description: 'Payment method used', example: 'UPI'}
                gateway_transaction_id: {type: string, description: 'Gateway transaction ID', example: 'UPI17376834ABCD12'}
                gateway_response: {
                    type: object,
                    description: 'Gateway response details',
                    properties: {
                        status: {type: string, example: 'SUCCESS'},
                        provider: {type: string, example: 'PAYTM'},
                        transaction_fee: {type: number, example: 2.50},
                        processing_time_ms: {type: integer, example: 1500}
                    }
                }
                metadata: {
                    type: object,
                    description: 'Additional transaction metadata',
                    properties: {
                        ip_address: {type: string, example: '192.168.1.100'},
                        user_agent: {type: string, example: 'Mozilla/5.0 (compatible; ZyvoApp/1.0)'},
                        device_type: {type: string, example: 'mobile'}
                    }
                }
                createdAt: {type: string, format: date-time, description: 'Transaction creation timestamp', example: '2025-07-24T10:30:00.000Z'}
                updatedAt: {type: string, format: date-time, description: 'Last update timestamp', example: '2025-07-24T10:30:00.000Z'}
        Address:
            type: object
            required: [user_id, title, full_name, phone, address_line_1, city, state, postal_code]
            properties:
                _id: {type: string, description: 'Unique identifier', example: '64a1b2c3d4e5f6789abcdef2'}
                user_id: {type: string, description: 'Reference to User', example: '64a1b2c3d4e5f6789abcdef1'}
                title: {type: string, maxLength: 50, description: 'Address title for easy identification', example: 'Home'}
                type: {type: string, enum: [HOME, OFFICE, OTHER, BILLING, SHIPPING], default: 'OTHER', description: 'Address type', example: 'HOME'}
                full_name: {type: string, maxLength: 100, description: 'Full name for delivery', example: 'John Doe'}
                phone: {type: string, description: 'Phone number for delivery contact', example: '+1234567890'}
                address_line_1: {type: string, maxLength: 200, description: 'Primary address line', example: '123 Main Street'}
                address_line_2: {type: string, maxLength: 200, description: 'Secondary address line (optional)', example: 'Apt 4B'}
                landmark: {type: string, maxLength: 100, description: 'Nearby landmark for easy location', example: 'Near Central Park'}
                city: {type: string, maxLength: 50, description: 'City name', example: 'New York'}
                state: {type: string, maxLength: 50, description: 'State or province', example: 'NY'}
                postal_code: {type: string, description: 'Postal or ZIP code', example: '10001'}
                country: {type: string, maxLength: 50, default: 'United States', description: 'Country name', example: 'United States'}
                coordinates: {
                    type: object,
                    description: 'Geographic coordinates for delivery optimization',
                    properties: {
                        latitude: {type: number, format: float, minimum: -90, maximum: 90, example: 40.7128},
                        longitude: {type: number, format: float, minimum: -180, maximum: 180, example: -74.0060}
                    }
                }
                is_default: {type: boolean, default: false, description: 'Whether this is the default address', example: true}
                is_active: {type: boolean, default: true, description: 'Whether the address is active', example: true}
                delivery_instructions: {type: string, maxLength: 500, description: 'Special delivery instructions', example: 'Ring the doorbell twice'}
                is_verified: {type: boolean, default: false, description: 'Whether the address has been verified', example: false}
                verification_source: {type: string, enum: [MANUAL, GOOGLE_MAPS, USER_CONFIRMED], description: 'How the address was verified', example: 'GOOGLE_MAPS'}
                usage_count: {type: integer, minimum: 0, default: 0, description: 'Number of times this address was used', example: 5}
                last_used_at: {type: string, format: date-time, description: 'Last time this address was used', example: '2025-07-24T10:30:00.000Z'}
                formatted_address: {type: string, description: 'Full formatted address (virtual field)', example: '123 Main Street, Apt 4B, New York, NY 10001, United States'}
                createdAt: {type: string, format: date-time, description: 'Address creation timestamp', example: '2025-07-24T10:30:00.000Z'}
                updatedAt: {type: string, format: date-time, description: 'Last update timestamp', example: '2025-07-24T10:30:00.000Z'}
        CreateAddressRequest:
            type: object
            required: [title, full_name, phone, address_line_1, city, state, postal_code]
            properties:
                title: {type: string, maxLength: 50, example: 'Home'}
                type: {type: string, enum: [HOME, OFFICE, OTHER, BILLING, SHIPPING], example: 'HOME'}
                full_name: {type: string, maxLength: 100, example: 'John Doe'}
                phone: {type: string, example: '+1234567890'}
                address_line_1: {type: string, maxLength: 200, example: '123 Main Street'}
                address_line_2: {type: string, maxLength: 200, example: 'Apt 4B'}
                landmark: {type: string, maxLength: 100, example: 'Near Central Park'}
                city: {type: string, maxLength: 50, example: 'New York'}
                state: {type: string, maxLength: 50, example: 'NY'}
                postal_code: {type: string, example: '10001'}
                country: {type: string, maxLength: 50, example: 'United States'}
                coordinates: {
                    type: object,
                    properties: {
                        latitude: {type: number, format: float, minimum: -90, maximum: 90, example: 40.7128},
                        longitude: {type: number, format: float, minimum: -180, maximum: 180, example: -74.0060}
                    }
                }
                is_default: {type: boolean, example: false}
                delivery_instructions: {type: string, maxLength: 500, example: 'Ring the doorbell twice'}
        UpdateAddressRequest:
            type: object
            properties:
                title: {type: string, maxLength: 50, example: 'Home'}
                type: {type: string, enum: [HOME, OFFICE, OTHER, BILLING, SHIPPING], example: 'HOME'}
                full_name: {type: string, maxLength: 100, example: 'John Doe'}
                phone: {type: string, example: '+1234567890'}
                address_line_1: {type: string, maxLength: 200, example: '123 Main Street'}
                address_line_2: {type: string, maxLength: 200, example: 'Apt 4B'}
                landmark: {type: string, maxLength: 100, example: 'Near Central Park'}
                city: {type: string, maxLength: 50, example: 'New York'}
                state: {type: string, maxLength: 50, example: 'NY'}
                postal_code: {type: string, example: '10001'}
                country: {type: string, maxLength: 50, example: 'United States'}
                coordinates: {
                    type: object,
                    properties: {
                        latitude: {type: number, format: float, minimum: -90, maximum: 90, example: 40.7128},
                        longitude: {type: number, format: float, minimum: -180, maximum: 180, example: -74.0060}
                    }
                }
                is_default: {type: boolean, example: false}
                is_active: {type: boolean, example: true}
                delivery_instructions: {type: string, maxLength: 500, example: 'Ring the doorbell twice'}
                is_verified: {type: boolean, example: false}
                verification_source: {type: string, enum: [MANUAL, GOOGLE_MAPS, USER_CONFIRMED], example: 'GOOGLE_MAPS'}
        SupportTicket:
            type: object
            required: [user_id, subject, description, priority, category]
            properties:
                _id: {type: string, description: 'Unique identifier for the support ticket', example: '64a1b2c3d4e5f6789abcdef0'}
                ticket_number: {type: string, description: 'Auto-generated ticket number', example: 'TKT-20250101-001'}
                user_id: {type: string, description: 'Reference to the user who created the ticket', example: '64a1b2c3d4e5f6789abcdef1'}
                assigned_to: {type: string, description: 'Reference to the admin assigned to the ticket', example: '64a1b2c3d4e5f6789abcdef2'}
                subject: {type: string, description: 'Ticket subject/title', maxLength: 200, example: 'Unable to complete order checkout'}
                description: {type: string, description: 'Detailed description of the issue', maxLength: 2000, example: 'I am having trouble completing my order. The checkout page keeps showing an error.'}
                category: {type: string, enum: ['ORDER_ISSUE', 'PAYMENT_ISSUE', 'PRODUCT_INQUIRY', 'TECHNICAL_SUPPORT', 'ACCOUNT_ISSUE', 'SHIPPING_INQUIRY', 'RETURN_REFUND', 'GENERAL_INQUIRY', 'FEATURE_REQUEST', 'BUG_REPORT'], description: 'Ticket category', example: 'ORDER_ISSUE'}
                priority: {type: string, enum: ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL'], description: 'Ticket priority level', example: 'MEDIUM'}
                status: {type: string, enum: ['OPEN', 'IN_PROGRESS', 'PENDING_USER', 'RESOLVED', 'CLOSED', 'ESCALATED'], description: 'Current ticket status', default: 'OPEN', example: 'OPEN'}
                messages: 
                    type: array
                    items:
                        type: object
                        properties:
                            _id: {type: string, description: 'Message ID'}
                            sender_id: {type: string, description: 'ID of message sender'}
                            sender_type: {type: string, enum: ['USER', 'ADMIN'], description: 'Type of sender'}
                            message: {type: string, description: 'Message content', maxLength: 1000}
                            attachments: 
                                type: array
                                items:
                                    type: object
                                    properties:
                                        filename: {type: string, description: 'Original filename'}
                                        url: {type: string, description: 'File URL'}
                                        fileType: {type: string, description: 'MIME type'}
                                        fileSize: {type: number, description: 'File size in bytes'}
                            created_at: {type: string, format: date-time, description: 'Message timestamp'}
                            is_internal: {type: boolean, description: 'Whether message is internal (admin-only)', default: false}
                tags: {type: array, items: {type: string}, description: 'Ticket tags for organization', example: ['urgent', 'billing']}
                metadata:
                    type: object
                    description: 'Additional metadata'
                    properties:
                        browser: {type: string, description: 'User browser information'}
                        device: {type: string, description: 'User device information'}
                        ip_address: {type: string, description: 'User IP address'}
                        user_agent: {type: string, description: 'User agent string'}
                        referrer: {type: string, description: 'Referrer URL'}
                        order_id: {type: string, description: 'Related order ID if applicable'}
                        product_id: {type: string, description: 'Related product ID if applicable'}
                sla_due_date: {type: string, format: date-time, description: 'SLA due date for resolution'}
                first_response_at: {type: string, format: date-time, description: 'Timestamp of first admin response'}
                resolved_at: {type: string, format: date-time, description: 'Timestamp when ticket was resolved'}
                closed_at: {type: string, format: date-time, description: 'Timestamp when ticket was closed'}
                escalated_at: {type: string, format: date-time, description: 'Timestamp when ticket was escalated'}
                escalation_level: {type: number, minimum: 0, maximum: 3, description: 'Current escalation level (0-3)', default: 0}
                resolution_time_hours: {type: number, description: 'Time taken to resolve ticket in hours'}
                satisfaction_rating: {type: number, minimum: 1, maximum: 5, description: 'User satisfaction rating (1-5)'}
                satisfaction_feedback: {type: string, description: 'User feedback about resolution', maxLength: 500}
                internal_notes: 
                    type: array
                    items:
                        type: object
                        properties:
                            _id: {type: string, description: 'Note ID'}
                            admin_id: {type: string, description: 'Admin who created the note'}
                            note: {type: string, description: 'Internal note content', maxLength: 1000}
                            created_at: {type: string, format: date-time, description: 'Note timestamp'}
                is_active: {type: boolean, description: 'Whether ticket is active', default: true}
                createdAt: {type: string, format: date-time, description: 'Ticket creation timestamp'}
                updatedAt: {type: string, format: date-time, description: 'Last update timestamp'}
        SupportTicketMessage:
            type: object
            required: [message]
            properties:
                message: {type: string, description: 'Message content', maxLength: 1000, example: 'Thank you for contacting support. We are looking into your issue.'}
                attachments:
                    type: array
                    items:
                        type: object
                        properties:
                            filename: {type: string, description: 'Original filename'}
                            url: {type: string, description: 'File URL'}
                            fileType: {type: string, description: 'MIME type'}
                            fileSize: {type: number, description: 'File size in bytes'}
                is_internal: {type: boolean, description: 'Whether message is internal (admin-only)', default: false}
        SupportTicketStats:
            type: object
            properties:
                totalTickets: {type: number, description: 'Total number of tickets', example: 150}
                openTickets: {type: number, description: 'Number of open tickets', example: 25}
                inProgressTickets: {type: number, description: 'Number of in-progress tickets', example: 40}
                resolvedTickets: {type: number, description: 'Number of resolved tickets', example: 75}
                closedTickets: {type: number, description: 'Number of closed tickets', example: 10}
                averageResolutionTime: {type: number, description: 'Average resolution time in hours', example: 24.5}
                averageSatisfactionRating: {type: number, description: 'Average satisfaction rating', example: 4.2}
                ticketsByCategory:
                    type: object
                    description: 'Tickets grouped by category'
                    additionalProperties: {type: number}
                ticketsByPriority:
                    type: object
                    description: 'Tickets grouped by priority'
                    additionalProperties: {type: number}
                escalatedTickets: {type: number, description: 'Number of escalated tickets', example: 5}
        
        # Unsplash Integration Schemas
        UnsplashImage:
            type: object
            properties:
                id: {type: string, description: 'Unsplash image ID', example: 'abc123def456'}
                urls:
                    type: object
                    properties:
                        raw: {type: string, format: uri, description: 'Raw image URL', example: 'https://images.unsplash.com/photo-123?ixid=...'}
                        full: {type: string, format: uri, description: 'Full size image URL', example: 'https://images.unsplash.com/photo-123?ixlib=...'}
                        regular: {type: string, format: uri, description: 'Regular size image URL', example: 'https://images.unsplash.com/photo-123?ixlib=...'}
                        small: {type: string, format: uri, description: 'Small size image URL', example: 'https://images.unsplash.com/photo-123?ixlib=...'}
                        thumb: {type: string, format: uri, description: 'Thumbnail image URL', example: 'https://images.unsplash.com/photo-123?ixlib=...'}
                alt_description: {type: string, description: 'Alt text description', example: 'Black laptop computer on white desk'}
                description: {type: string, description: 'Image description', example: 'Modern laptop setup'}
                user:
                    type: object
                    properties:
                        name: {type: string, description: 'Photographer name', example: 'John Photographer'}
                        username: {type: string, description: 'Photographer username', example: 'johnphoto'}
                download_url: {type: string, format: uri, description: 'Download tracking URL', example: 'https://unsplash.com/photos/abc123/download'}
                relevance_score: {type: number, description: 'Relevance score for suggestions', example: 0.95}
        
        UnsplashSearchResponse:
            type: object
            properties:
                success: {type: boolean, example: true}
                message: {type: string, example: 'Images retrieved successfully'}
                data:
                    type: object
                    properties:
                        images:
                            type: array
                            items:
                                $ref: '#/components/schemas/UnsplashImage'
                        total: {type: integer, description: 'Total number of images available', example: 1000}
                        total_pages: {type: integer, description: 'Total number of pages', example: 100}
        
        UnsplashSuggestionsResponse:
            type: object
            properties:
                success: {type: boolean, example: true}
                message: {type: string, example: 'Image suggestions retrieved successfully'}
                data:
                    type: object
                    properties:
                        product:
                            type: object
                            properties:
                                _id: {type: string, example: '64a1b2c3d4e5f6789012345'}
                                name: {type: string, example: 'iPhone 15 Pro'}
                                category_id:
                                    type: object
                                    properties:
                                        name: {type: string, example: 'Smartphones'}
                        category:
                            type: object
                            properties:
                                _id: {type: string, example: '64b2c3d4e5f6789012345'}
                                name: {type: string, example: 'Electronics'}
                        suggestions:
                            type: array
                            items:
                                $ref: '#/components/schemas/UnsplashImage'
                        search_query: {type: string, description: 'Search query used', example: 'iPhone 15 Pro Smartphones'}
        
        UnsplashPopulateRequest:
            type: object
            properties:
                overwrite: {type: boolean, description: 'Whether to overwrite existing images', default: false, example: false}
                skipProducts: {type: boolean, description: 'Whether to skip product image population', default: false, example: false}
                skipCategories: {type: boolean, description: 'Whether to skip category image population', default: false, example: false}
                productLimit: {type: integer, description: 'Maximum number of products to process', minimum: 1, maximum: 1000, example: 100}
                categoryLimit: {type: integer, description: 'Maximum number of categories to process', minimum: 1, maximum: 100, example: 50}
        
        UnsplashPopulateResponse:
            type: object
            properties:
                success: {type: boolean, example: true}
                message: {type: string, example: 'Image population started successfully'}
                data:
                    type: object
                    properties:
                        job_id: {type: string, description: 'Unique job identifier', example: 'populate_20250130_214919'}
                        status: {type: string, enum: [running, completed, failed], example: 'running'}
                        options:
                            $ref: '#/components/schemas/UnsplashPopulateRequest'
                        estimated_items:
                            type: object
                            properties:
                                products: {type: integer, description: 'Number of products to process', example: 25}
                                categories: {type: integer, description: 'Number of categories to process', example: 8}
        
        UnsplashStatusResponse:
            type: object
            properties:
                success: {type: boolean, example: true}
                message: {type: string, example: 'Unsplash service status retrieved successfully'}
                data:
                    type: object
                    properties:
                        configured: {type: boolean, description: 'Whether Unsplash is configured', example: true}
                        api_key_present: {type: boolean, description: 'Whether API key is present', example: true}
                        service_ready: {type: boolean, description: 'Whether service is ready', example: true}
                        last_request: {type: string, format: date-time, description: 'Last API request timestamp', example: '2025-01-30T16:19:19.000Z'}
                        rate_limit_info:
                            type: object
                            properties:
                                requests_remaining: {type: integer, description: 'Remaining API requests', example: 4950}
                                requests_per_hour: {type: integer, description: 'Total requests per hour', example: 5000}
                                reset_time: {type: string, format: date-time, description: 'Rate limit reset time', example: '2025-01-30T17:00:00.000Z'}
    responses:
        ValidationError:
            description: 'Bad Request - Validation failed'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        UnauthorizedError:
            description: 'Unauthorized - Authentication required'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        ForbiddenError:
            description: 'Forbidden - Insufficient permissions'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        NotFoundError:
            description: 'Not Found - Resource not found'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        ServerError:
            description: 'Internal Server Error'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        '400':
            description: 'Bad Request - Invalid input data'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        '401':
            description: 'Unauthorized - Authentication required'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        '403':
            description: 'Forbidden - Insufficient permissions'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        '404':
            description: 'Not Found - Resource not found'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        '429':
            description: 'Too Many Requests - Rate limit exceeded'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        InternalServerError:
            description: 'Internal Server Error'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        '500':
            description: 'Internal Server Error'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
tags:
    -
        name: Authentication
        description: 'Authentication and authorization operations'
    -
        name: Brands
        description: 'Brand management endpoints'
    -
        name: Users
        description: 'User management operations'
    -
        name: Categories
        description: 'Category management operations with hierarchical structure'
    -
        name: Products
        description: 'Product catalog operations'
    -
        name: Health
        description: 'System health and monitoring'
    -
        name: Options
        description: 'Product option management endpoints (Color, Size, Weight, etc.)'
    -
        name: 'Product Variants'
        description: 'Product variant management endpoints (SKUs and purchasable versions)'
    -
        name: Suppliers
        description: 'Supplier management endpoints for inventory suppliers'
    -
        name: 'Supplier Contact Numbers'
        description: 'Supplier contact number management endpoints'
    -
        name: Purchases
        description: 'Purchase order management endpoints for inventory purchases'
    -
        name: Inventory
        description: 'Inventory management endpoints for stock tracking and control'
    -
        name: Listings
        description: 'Product listing management endpoints for platform-specific listings'
    -
        name: Blog
        description: 'Blog management endpoints for content publishing'
    -
        name: 'Admin Blog'
        description: 'Admin blog management endpoints'
    -
        name: Cart
        description: 'Shopping cart management endpoints'
    -
        name: 'Admin Cart'
        description: 'Admin cart management endpoints'
    -
        name: Orders
        description: 'Order management endpoints for user orders'
    -
        name: 'Admin Orders'
        description: 'Admin order management endpoints'
    -
        name: Payments
        description: 'Payment gateway integration endpoints'
    -
        name: Webhooks
        description: 'External service webhook endpoints'
    -
        name: Coupons
        description: 'Coupon and discount management endpoints'
    -
        name: 'User Coupons'
        description: 'User coupon management and application endpoints'
    -
        name: 'Admin Coupons'
        description: 'Admin coupon management endpoints'
    -
        name: 'Support Tickets'
        description: 'User support ticket management endpoints for e-commerce portal'
    -
        name: 'Admin Support Tickets'
        description: 'Admin support ticket management endpoints for support dashboard'
    -
        name: Unsplash
        description: 'Unsplash image integration endpoints for automatic image population'
    -
        name: 'Payment Methods'
        description: 'User payment method management endpoints for secure payment processing'
    -
        name: 'Admin Payment Methods'
        description: 'Admin payment method management endpoints for payment oversight'
    -
        name: Health
        description: 'System health and monitoring endpoints'
paths:
    # Health & Status
    /:
        get:
            tags: [Health]
            summary: Welcome endpoint
            description: |
                Basic welcome endpoint that provides information about the API server.
                This endpoint can be used to verify that the server is running and 
                to get basic information about the API.
            responses:
                '200':
                    description: Welcome message with API information
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string, example: "Welcome to Zyvo API"}
                                    version: {type: string, example: "1.0.0"}
                                    environment: {type: string, example: "development"}
                                    csrfToken: {type: string, description: "CSRF token for this session"}
                                    documentation:
                                        type: object
                                        properties:
                                            interactive: {type: string, example: "http://localhost:3000/api-docs"}
                                            redocly_preview: {type: string, example: "http://127.0.0.1:8080"}
                                    endpoints:
                                        type: object
                                        properties:
                                            health: {type: string, example: "/health"}
                                            auth: {type: string, example: "/api/v1/auth"}
                                            users: {type: string, example: "/api/v1/users"}
                                            categories: {type: string, example: "/api/v1/categories"}
                                            products: {type: string, example: "/api/v1/products"}
                                            platforms: {type: string, example: "/api/v1/platforms"}
                                            admin: {type: string, example: "/api/v1/admin"}
                '500': {description: Server error}

    /health:
        get:
            tags: [Health]
            summary: Health check endpoint
            description: |
                Returns the current health status of the API server. This endpoint is 
                useful for monitoring systems, load balancers, and automated health checks.
                
                The response includes:
                - Server status
                - Current timestamp
                - Server uptime in seconds
                - Current environment
            responses:
                '200':
                    description: Server is healthy and operational
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status: {type: string, example: "OK"}
                                    timestamp: {type: string, format: date-time, example: "2025-07-23T10:30:00.000Z"}
                                    uptime: {type: number, description: "Server uptime in seconds", example: 3600.5}
                                    environment: {type: string, example: "development"}
                '500': {description: Server error}

    # Authentication
    /api/v1/auth/login:
        post:
            tags: [Authentication]
            summary: User login
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [email, password]
                            properties: {email: {type: string}, password: {type: string}}
            responses:
                '200': {description: Login successful, content: {application/json: {schema: {type: object, properties: {token: {type: string}, user: {$ref: '#/components/schemas/User'}}}}}}
                '401': {description: Invalid credentials}
    /api/v1/auth/register:
        post:
            tags: [Authentication]
            summary: User registration
            requestBody:
                required: true
                content:
                    application/json:
                        schema: {$ref: '#/components/schemas/UserCreateRequest'}
            responses:
                '201': {description: Registration successful, content: {application/json: {schema: {type: object, properties: {token: {type: string}, user: {$ref: '#/components/schemas/User'}}}}}}
                '400': {description: Validation error}

    /api/v1/auth/logout:
        post:
            tags: [Authentication]
            summary: User logout
            description: Logout current user and invalidate tokens
            security: [{BearerAuth: []}]
            responses:
                '200': 
                    description: Logout successful
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Logged out successfully"}
                '401': {description: Unauthorized}

    /api/v1/auth/refresh-token:
        post:
            tags: [Authentication]
            summary: Refresh access token
            description: Get new access token using refresh token
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [refresh_token]
                            properties:
                                refresh_token: {type: string, description: "Valid refresh token"}
            responses:
                '200':
                    description: Token refreshed successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    access_token: {type: string}
                                    expires_in: {type: integer}
                '401': {description: Invalid or expired refresh token}

    /api/v1/auth/forgot-password:
        post:
            tags: [Authentication]
            summary: Request password reset
            description: Send password reset email to user
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [email]
                            properties:
                                email: {type: string, format: email, description: "User's email address"}
            responses:
                '200':
                    description: Password reset email sent
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Password reset email sent"}
                '404': {description: Email not found}
                '429': {description: Too many requests}

    /api/v1/auth/reset-password/{token}:
        post:
            tags: [Authentication]
            summary: Reset password with token
            description: Reset user password using reset token
            parameters:
                - name: token
                  in: path
                  required: true
                  schema: {type: string}
                  description: Password reset token
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [password, confirm_password]
                            properties:
                                password: {type: string, minLength: 8, description: "New password"}
                                confirm_password: {type: string, minLength: 8, description: "Confirm new password"}
            responses:
                '200':
                    description: Password reset successful
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Password reset successfully"}
                '400': {description: Invalid token or password validation error}
                '404': {description: Token not found or expired}

    /api/v1/auth/profile:
        get:
            tags: [Authentication]
            summary: Get user profile
            description: Get current user's profile information
            security: [{BearerAuth: []}]
            responses:
                '200':
                    description: Profile retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {$ref: '#/components/schemas/User'}
                '401': {description: Unauthorized}

    /api/v1/auth/verify-email/request:
        post:
            tags: [Authentication]
            summary: Request email verification
            description: Send email verification link to user
            security: [{BearerAuth: []}]
            responses:
                '200':
                    description: Verification email sent
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Verification email sent"}
                '400': {description: Email already verified}
                '401': {description: Unauthorized}

    /api/v1/auth/verify-email/complete:
        post:
            tags: [Authentication]
            summary: Complete email verification
            description: Verify email using verification token
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [token]
                            properties:
                                token: {type: string, description: "Email verification token"}
            responses:
                '200':
                    description: Email verified successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Email verified successfully"}
                '400': {description: Invalid or expired token}

    /api/v1/auth/verify-phone/request:
        post:
            tags: [Authentication]
            summary: Request phone verification
            description: Send SMS verification code to user's phone
            security: [{BearerAuth: []}]
            responses:
                '200':
                    description: Verification code sent
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Verification code sent"}
                '400': {description: Phone already verified or invalid phone number}
                '401': {description: Unauthorized}

    /api/v1/auth/verify-phone/complete:
        post:
            tags: [Authentication]
            summary: Complete phone verification
            description: Verify phone using SMS code
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [code]
                            properties:
                                code: {type: string, description: "SMS verification code", pattern: "^[0-9]{6}$"}
            responses:
                '200':
                    description: Phone verified successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Phone verified successfully"}
                '400': {description: Invalid or expired code}
                '401': {description: Unauthorized}
    
    # Categories
    /api/v1/categories:
        get:
            tags: [Categories]
            summary: Get all categories
            description: Retrieve a paginated list of categories with optional filtering
            parameters:
                - in: query
                  name: page
                  schema:
                      type: integer
                      minimum: 1
                      default: 1
                  description: Page number for pagination
                - in: query
                  name: limit
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 100
                      default: 10
                  description: Number of items per page
                - in: query
                  name: search
                  schema:
                      type: string
                  description: Search term for category name or description
                - in: query
                  name: parent
                  schema:
                      type: string
                  description: Filter by parent category ID
                - in: query
                  name: is_active
                  schema:
                      type: boolean
                  description: Filter by active status
            responses:
                '200':
                    description: Categories retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Categories retrieved successfully"}
                                    data: 
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Category'
                                    pagination:
                                        $ref: '#/components/schemas/PaginationInfo'
                '500':
                    $ref: '#/components/responses/ServerError'
        post:
            tags: [Categories]
            summary: Create a new category
            description: Create a new category (admin only)
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [name]
                            properties:
                                name: {type: string, minLength: 1, maxLength: 100, example: "Electronics"}
                                description: {type: string, maxLength: 500, example: "Electronic devices and accessories"}
                                parent_category: {type: string, example: "64a1b2c3d4e5f6789abcdef1"}
                                image_url: {type: string, format: uri, example: "https://example.com/electronics.jpg"}
                                is_active: {type: boolean, default: true, example: true}
            responses:
                '201':
                    description: Category created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Category created successfully"}
                                    data:
                                        $ref: '#/components/schemas/Category'
                '400':
                    $ref: '#/components/responses/ValidationError'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '403':
                    $ref: '#/components/responses/ForbiddenError'
                '500':
                    $ref: '#/components/responses/ServerError'

    /api/v1/categories/tree:
        get:
            tags: [Categories]
            summary: Get category tree
            description: Retrieve categories in hierarchical tree structure
            parameters:
                - in: query
                  name: include_inactive
                  schema:
                      type: boolean
                      default: false
                  description: Include inactive categories in the tree
                - in: query
                  name: max_depth
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 10
                      default: 5
                  description: Maximum depth of the tree
            responses:
                '200':
                    description: Category tree retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Category tree retrieved successfully"}
                                    data:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/CategoryTree'
                '500':
                    $ref: '#/components/responses/ServerError'

    /api/v1/categories/admin/stats:
        get:
            tags: [Categories]
            summary: Get category statistics
            description: Get statistics about categories (admin only)
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Category statistics retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Category statistics retrieved successfully"}
                                    data:
                                        $ref: '#/components/schemas/CategoryStats'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '403':
                    $ref: '#/components/responses/ForbiddenError'
                '500':
                    $ref: '#/components/responses/ServerError'

    /api/v1/categories/{identifier}:
        get:
            tags: [Categories]
            summary: Get category by ID or slug
            description: Retrieve a single category by its ID or slug
            parameters:
                - in: path
                  name: identifier
                  required: true
                  schema:
                      type: string
                  description: Category ID or slug
                  example: "electronics"
            responses:
                '200':
                    description: Category retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Category retrieved successfully"}
                                    data:
                                        $ref: '#/components/schemas/Category'
                '404':
                    $ref: '#/components/responses/NotFoundError'
                '500':
                    $ref: '#/components/responses/ServerError'
        patch:
            tags: [Categories]
            summary: Update category
            description: Update an existing category (admin only)
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: identifier
                  required: true
                  schema:
                      type: string
                  description: Category ID
                  example: "64a1b2c3d4e5f6789abcdef2"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name: {type: string, minLength: 1, maxLength: 100, example: "Electronics & Gadgets"}
                                description: {type: string, maxLength: 500, example: "Updated description for electronic devices"}
                                parent_category: {type: string, example: "64a1b2c3d4e5f6789abcdef1"}
                                image_url: {type: string, format: uri, example: "https://example.com/new-electronics.jpg"}
                                is_active: {type: boolean, example: false}
            responses:
                '200':
                    description: Category updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Category updated successfully"}
                                    data:
                                        $ref: '#/components/schemas/Category'
                '400':
                    $ref: '#/components/responses/ValidationError'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '403':
                    $ref: '#/components/responses/ForbiddenError'
                '404':
                    $ref: '#/components/responses/NotFoundError'
                '500':
                    $ref: '#/components/responses/ServerError'
        delete:
            tags: [Categories]
            summary: Delete category
            description: Delete a category (admin only)
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: identifier
                  required: true
                  schema:
                      type: string
                  description: Category ID
                  example: "64a1b2c3d4e5f6789abcdef2"
            responses:
                '200':
                    description: Category deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Category deleted successfully"}
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '403':
                    $ref: '#/components/responses/ForbiddenError'
                '404':
                    $ref: '#/components/responses/NotFoundError'
                '409':
                    description: Cannot delete category with child categories or associated products
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: false}
                                    message: {type: string, example: "Cannot delete category with child categories"}
                '500':
                    $ref: '#/components/responses/ServerError'
    
    # Blog Posts
    /api/v1/blog:
        get:
            tags: [Blog]
            summary: Get all published blog posts
            parameters:
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
                - {name: search, in: query, schema: {type: string}}
                - {name: tags, in: query, schema: {type: string}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {posts: {type: array, items: {$ref: '#/components/schemas/BlogPost'}}, pagination: {type: object}}}}}}
    /api/v1/blog/{slug}:
        get:
            tags: [Blog]
            summary: Get blog post by slug
            parameters:
                - {name: slug, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/BlogPost'}}}}
                '404': {description: Blog post not found}
    /api/v1/admin/blog/posts:
        get:
            tags: [Admin Blog]
            summary: Get all blog posts (admin view with all statuses)
            description: Get all blog posts including drafts, published, pending review, and archived posts
            security: [{BearerAuth: []}]
            parameters:
                - {name: page, in: query, schema: {type: integer, default: 1, minimum: 1}, description: 'Page number for pagination'}
                - {name: limit, in: query, schema: {type: integer, default: 10, minimum: 1, maximum: 100}, description: 'Number of posts per page'}
                - {name: status, in: query, schema: {type: string, enum: [DRAFT, PUBLISHED, PENDING_REVIEW, ARCHIVED]}, description: 'Filter by publication status'}
                - {name: category_id, in: query, schema: {type: string}, description: 'Filter by category ID'}
                - {name: is_featured, in: query, schema: {type: boolean}, description: 'Filter featured posts'}
                - {name: tags, in: query, schema: {type: string}, description: 'Filter by tags (comma-separated)'}
                - {name: search, in: query, schema: {type: string}, description: 'Search in title and content'}
                - {name: author_id, in: query, schema: {type: string}, description: 'Filter by author ID'}
            responses:
                '200': 
                    description: Success
                    content: 
                        application/json: 
                            schema: 
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {type: array, items: {$ref: '#/components/schemas/BlogPost'}}
                                    pagination: 
                                        type: object
                                        properties:
                                            currentPage: {type: integer}
                                            totalPages: {type: integer}
                                            totalItems: {type: integer}
                                            itemsPerPage: {type: integer}
                                            hasNextPage: {type: boolean}
                                            hasPrevPage: {type: boolean}
                '400': {description: Validation errors}
                '401': {description: Unauthorized}
                '403': {description: Forbidden - Admin access required}
        post:
            tags: [Admin Blog]
            summary: Create new blog post
            description: Create a new blog post with title, content, category, and metadata
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [title, content, category_id]
                            properties: 
                                title: {type: string, maxLength: 200, description: 'Blog post title'}
                                content: {type: string, description: 'Blog post content (HTML/Markdown)'}
                                excerpt: {type: string, maxLength: 500, description: 'Short excerpt/summary'}
                                category_id: {type: string, description: 'Category ObjectId reference'}
                                tags: {type: array, items: {type: string}, description: 'Array of tags'}
                                featured_image_url: {type: string, format: uri, description: 'Featured image URL'}
                                featured_image_alt_text: {type: string, description: 'Alt text for featured image'}
                                status: {type: string, enum: [DRAFT, PUBLISHED, PENDING_REVIEW, ARCHIVED], default: DRAFT, description: 'Publication status'}
                                is_featured: {type: boolean, default: false, description: 'Mark as featured post'}
                                comments_enabled: {type: boolean, default: true, description: 'Enable comments'}
                                read_time_minutes: {type: integer, minimum: 1, description: 'Estimated read time in minutes'}
                                seo_title: {type: string, maxLength: 70, description: 'SEO title override'}
                                meta_description: {type: string, maxLength: 160, description: 'Meta description for SEO'}
            responses:
                '201': 
                    description: Blog post created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Blog post created successfully'}
                                    data: {$ref: '#/components/schemas/BlogPost'}
                '400': {description: Validation errors}
                '401': {description: Unauthorized}
                '403': {description: Forbidden - Admin access required}
    /api/v1/admin/blog/posts/{identifier}:
        get:
            tags: [Admin Blog]
            summary: Get blog post by ID or slug (admin view)
            description: Get a single blog post by MongoDB ObjectId or slug
            security: [{BearerAuth: []}]
            parameters:
                - {name: identifier, in: path, required: true, schema: {type: string}, description: 'Blog post ID (ObjectId) or slug'}
            responses:
                '200': 
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {$ref: '#/components/schemas/BlogPost'}
                '404': {description: Blog post not found}
                '401': {description: Unauthorized}
                '403': {description: Forbidden - Admin access required}
    /api/v1/admin/blog/posts/{id}:
        patch:
            tags: [Admin Blog]
            summary: Update blog post
            description: Update an existing blog post with partial data
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}, description: 'Blog post ObjectId'}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties: 
                                title: {type: string, maxLength: 200}
                                content: {type: string}
                                excerpt: {type: string, maxLength: 500}
                                category_id: {type: string}
                                tags: {type: array, items: {type: string}}
                                featured_image_url: {type: string, format: uri}
                                featured_image_alt_text: {type: string}
                                status: {type: string, enum: [DRAFT, PUBLISHED, PENDING_REVIEW, ARCHIVED]}
                                is_featured: {type: boolean}
                                comments_enabled: {type: boolean}
                                read_time_minutes: {type: integer, minimum: 1}
                                seo_title: {type: string, maxLength: 70}
                                meta_description: {type: string, maxLength: 160}
            responses:
                '200': 
                    description: Blog post updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Blog post updated successfully'}
                                    data: {$ref: '#/components/schemas/BlogPost'}
                '400': {description: Validation errors}
                '404': {description: Blog post not found}
                '401': {description: Unauthorized}
                '403': {description: Forbidden - Admin access required}
        delete:
            tags: [Admin Blog]
            summary: Delete blog post (soft delete)
            description: Soft delete a blog post by setting deleted_at timestamp
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}, description: 'Blog post ObjectId'}
            responses:
                '200': 
                    description: Blog post deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Blog post deleted successfully'}
                '404': {description: Blog post not found}
                '401': {description: Unauthorized}
                '403': {description: Forbidden - Admin access required}
    /api/v1/admin/blog/posts/{id}/status:
        patch:
            tags: [Admin Blog]
            summary: Update blog post status
            description: Update only the publication status of a blog post (publish/unpublish/archive)
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}, description: 'Blog post ObjectId'}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [status]
                            properties:
                                status: {type: string, enum: [DRAFT, PUBLISHED, PENDING_REVIEW, ARCHIVED], description: 'New publication status'}
            responses:
                '200': 
                    description: Blog post status updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Blog post status updated successfully'}
                                    data: {$ref: '#/components/schemas/BlogPost'}
                '400': {description: Invalid status value}
                '404': {description: Blog post not found}
                '401': {description: Unauthorized}
                '403': {description: Forbidden - Admin access required}

    # Cart Management
    /api/v1/user/cart:
        get:
            tags: [Cart]
            summary: Get user's cart
            description: Retrieve the current user's cart with all items and calculated totals
            security: [{BearerAuth: []}]
            responses:
                '200': 
                    description: Success
                    content: 
                        application/json: 
                            schema: 
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Cart retrieved successfully"}
                                    data: {$ref: '#/components/schemas/Cart'}
                '401': {$ref: '#/components/responses/UnauthorizedError'}
                '500': {$ref: '#/components/responses/InternalServerError'}
        delete:
            tags: [Cart]
            summary: Clear entire cart
            description: Remove all items from the user's cart
            security: [{BearerAuth: []}]
            responses:
                '200': 
                    description: Cart cleared successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Cart cleared successfully"}
                '401': {$ref: '#/components/responses/UnauthorizedError'}
                '500': {$ref: '#/components/responses/InternalServerError'}

    /api/v1/user/cart/items:
        post:
            tags: [Cart]
            summary: Add item to cart
            description: Add a product variant to the user's cart or update quantity if already exists
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [product_variant_id]
                            properties: 
                                product_variant_id: 
                                    type: string
                                    description: MongoDB ObjectId of the product variant
                                    example: "64a1b2c3d4e5f6789abcdef0"
                                quantity:
                                    type: integer
                                    minimum: 1
                                    maximum: 999
                                    default: 1
                                    description: "Quantity to add (default: 1)"
                                    example: 2
            responses:
                '200': 
                    description: Item added to cart successfully
                    content: 
                        application/json: 
                            schema: 
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Item added to cart successfully"}
                                    data: {$ref: '#/components/schemas/Cart'}
                '400': {$ref: '#/components/responses/ValidationError'}
                '401': {$ref: '#/components/responses/UnauthorizedError'}
                '404': 
                    description: Product variant not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: false}
                                    message: {type: string, example: "Product variant not found"}
                '500': {$ref: '#/components/responses/InternalServerError'}

    /api/v1/user/cart/items/{productVariantId}:
        patch:
            tags: [Cart]
            summary: Update cart item quantity
            description: Update the quantity of a specific item in the cart (set to 0 to remove)
            security: [{BearerAuth: []}]
            parameters:
                - name: productVariantId
                  in: path
                  required: true
                  description: MongoDB ObjectId of the product variant
                  schema: 
                    type: string
                    example: "64a1b2c3d4e5f6789abcdef0"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [quantity]
                            properties: 
                                quantity: 
                                    type: integer
                                    minimum: 0
                                    maximum: 999
                                    description: New quantity (0 to remove item)
                                    example: 3
            responses:
                '200': 
                    description: Cart item updated successfully
                    content: 
                        application/json: 
                            schema: 
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Cart item updated successfully"}
                                    data: {$ref: '#/components/schemas/Cart'}
                '400': {$ref: '#/components/responses/ValidationError'}
                '401': {$ref: '#/components/responses/UnauthorizedError'}
                '404': 
                    description: Cart item not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: false}
                                    message: {type: string, example: "Cart item not found"}
                '500': {$ref: '#/components/responses/InternalServerError'}
        delete:
            tags: [Cart]
            summary: Remove item from cart
            description: Remove a specific item completely from the cart
            security: [{BearerAuth: []}]
            parameters:
                - name: productVariantId
                  in: path
                  required: true
                  description: MongoDB ObjectId of the product variant
                  schema: 
                    type: string
                    example: "64a1b2c3d4e5f6789abcdef0"
            responses:
                '200': 
                    description: Item removed from cart successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Item removed from cart successfully"}
                                    data: {$ref: '#/components/schemas/Cart'}
                '401': {$ref: '#/components/responses/UnauthorizedError'}
                '404': 
                    description: Cart item not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: false}
                                    message: {type: string, example: "Cart item not found"}
                '500': {$ref: '#/components/responses/InternalServerError'}

    /api/v1/user/cart/apply-coupon:
        post:
            tags: [Cart]
            summary: Apply coupon to cart
            description: Apply a coupon code to the user's cart for discount
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [coupon_code]
                            properties: 
                                coupon_code: 
                                    type: string
                                    minLength: 3
                                    maxLength: 20
                                    pattern: '^[A-Z0-9_-]+$'
                                    description: Coupon code (case-insensitive, will be converted to uppercase)
                                    example: "SAVE20"
            responses:
                '200': 
                    description: Coupon applied successfully
                    content: 
                        application/json: 
                            schema: 
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Coupon applied successfully"}
                                    data: {$ref: '#/components/schemas/Cart'}
                '400': 
                    description: Invalid coupon or validation error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: false}
                                    message: {type: string, example: "Invalid coupon code"}
                '401': {$ref: '#/components/responses/UnauthorizedError'}
                '404': 
                    description: Coupon not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: false}
                                    message: {type: string, example: "Coupon not found"}
                '500': {$ref: '#/components/responses/InternalServerError'}

    /api/v1/user/cart/remove-coupon:
        delete:
            tags: [Cart]
            summary: Remove coupon from cart
            description: Remove the currently applied coupon from the user's cart
            security: [{BearerAuth: []}]
            responses:
                '200': 
                    description: Coupon removed successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Coupon removed successfully"}
                                    data: {$ref: '#/components/schemas/Cart'}
                '401': {$ref: '#/components/responses/UnauthorizedError'}
                '404': 
                    description: No coupon applied to cart
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: false}
                                    message: {type: string, example: "No coupon applied to cart"}
                '500': {$ref: '#/components/responses/InternalServerError'}

    # Admin Cart Management
    /api/v1/admin/carts:
        get:
            tags: [Admin Cart]
            summary: Get all carts (Admin)
            description: Retrieve all carts across the system with filtering and pagination
            security: [{BearerAuth: []}]
            parameters:
                - name: page
                  in: query
                  description: Page number
                  schema:
                    type: integer
                    minimum: 1
                    default: 1
                - name: limit
                  in: query
                  description: Items per page
                  schema:
                    type: integer
                    minimum: 1
                    maximum: 100
                    default: 20
                - name: sort_by
                  in: query
                  description: Sort field
                  schema:
                    type: string
                    enum: [created_at, updated_at, total_amount, items_count]
                    default: updated_at
                - name: sort_order
                  in: query
                  description: Sort order
                  schema:
                    type: string
                    enum: [asc, desc]
                    default: desc
                - name: user_id
                  in: query
                  description: Filter by specific user ID
                  schema:
                    type: string
                - name: has_items
                  in: query
                  description: Filter carts with/without items
                  schema:
                    type: boolean
                - name: has_coupon
                  in: query
                  description: Filter carts with/without coupons
                  schema:
                    type: boolean
                - name: min_total
                  in: query
                  description: Minimum cart total amount
                  schema:
                    type: number
                    minimum: 0
                - name: max_total
                  in: query
                  description: Maximum cart total amount
                  schema:
                    type: number
                    minimum: 0
                - name: date_from
                  in: query
                  description: Filter carts updated from this date
                  schema:
                    type: string
                    format: date-time
                - name: date_to
                  in: query
                  description: Filter carts updated until this date
                  schema:
                    type: string
                    format: date-time
            responses:
                '200': 
                    description: Success
                    content: 
                        application/json: 
                            schema: 
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Carts retrieved successfully"}
                                    data:
                                        type: object
                                        properties:
                                            carts:
                                                type: array
                                                items: {$ref: '#/components/schemas/Cart'}
                                            pagination: {$ref: '#/components/schemas/PaginationInfo'}
                '401': {$ref: '#/components/responses/UnauthorizedError'}
                '403': {$ref: '#/components/responses/ForbiddenError'}
                '500': {$ref: '#/components/responses/InternalServerError'}

    /api/v1/admin/carts/stats:
        get:
            tags: [Admin Cart]
            summary: Get cart statistics (Admin)
            description: Retrieve comprehensive cart statistics for admin dashboard
            security: [{BearerAuth: []}]
            responses:
                '200': 
                    description: Success
                    content: 
                        application/json: 
                            schema: 
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Cart statistics retrieved successfully"}
                                    data: {$ref: '#/components/schemas/CartStats'}
                '401': {$ref: '#/components/responses/UnauthorizedError'}
                '403': {$ref: '#/components/responses/ForbiddenError'}
                '500': {$ref: '#/components/responses/InternalServerError'}

    /api/v1/admin/carts/user/{userId}:
        get:
            tags: [Admin Cart]
            summary: Get user's cart (Admin)
            description: Retrieve a specific user's cart (admin access)
            security: [{BearerAuth: []}]
            parameters:
                - name: userId
                  in: path
                  required: true
                  description: MongoDB ObjectId of the user
                  schema: 
                    type: string
                    example: "64a1b2c3d4e5f6789abcdef0"
            responses:
                '200': 
                    description: Success
                    content: 
                        application/json: 
                            schema: 
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "User cart retrieved successfully"}
                                    data: {$ref: '#/components/schemas/Cart'}
                '401': {$ref: '#/components/responses/UnauthorizedError'}
                '403': {$ref: '#/components/responses/ForbiddenError'}
                '404': 
                    description: User or cart not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: false}
                                    message: {type: string, example: "User not found"}
                '500': {$ref: '#/components/responses/InternalServerError'}

    # Orders
    /api/v1/orders:
        get:
            tags: [Orders]
            summary: Get user's orders
            security: [{BearerAuth: []}]
            parameters:
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
                - {name: status, in: query, schema: {type: string}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {orders: {type: array, items: {$ref: '#/components/schemas/Order'}}, pagination: {type: object}}}}}}
                '401': {description: Unauthorized}
        post:
            tags: [Orders]
            summary: Create new order
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [shipping_address, payment_method]
                            properties: {shipping_address: {type: object}, billing_address: {type: object}, payment_method: {type: string}, notes: {type: string}}
            responses:
                '201': {description: Order created, content: {application/json: {schema: {$ref: '#/components/schemas/Order'}}}}
                '401': {description: Unauthorized}
    /api/v1/orders/{id}:
        get:
            tags: [Orders]
            summary: Get order by ID
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/Order'}}}}
                '404': {description: Order not found}
        put:
            tags: [Orders]
            summary: Update order status (user cancel only)
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [status]
                            properties: {status: {type: string, enum: [cancelled]}}
            responses:
                '200': {description: Order updated, content: {application/json: {schema: {$ref: '#/components/schemas/Order'}}}}
                '404': {description: Order not found}

    # User Coupons
    /api/v1/user/coupons:
        get:
            tags: [User Coupons]
            summary: Get my coupons
            description: Get user's available coupons with filtering and pagination
            security: [{BearerAuth: []}]
            parameters:
                - name: page
                  in: query
                  schema: {type: integer, minimum: 1, default: 1}
                  description: Page number for pagination
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 50, default: 20}
                  description: Number of coupons per page
                - name: status
                  in: query
                  schema: {type: string, enum: [ACTIVE, USED, EXPIRED]}
                  description: Filter by coupon status
                - name: coupon_campaign_id
                  in: query
                  schema: {type: string}
                  description: Filter by coupon campaign ID
            responses:
                '200':
                    description: User coupons retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {type: array, items: {$ref: '#/components/schemas/UserCoupon'}}
                                    pagination: {type: object}
                '401': {description: Unauthorized}

    /api/v1/user/coupons/{code}:
        get:
            tags: [User Coupons]
            summary: Get specific coupon by code
            description: Get details of a specific coupon using its code
            security: [{BearerAuth: []}]
            parameters:
                - name: code
                  in: path
                  required: true
                  schema: {type: string, pattern: "^[A-Z0-9\\-]+$"}
                  description: Coupon code
            responses:
                '200':
                    description: Coupon retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {$ref: '#/components/schemas/UserCoupon'}
                '404': {description: Coupon not found}
                '401': {description: Unauthorized}

    /api/v1/user/coupons/apply:
        post:
            tags: [User Coupons]
            summary: Apply coupon to cart/order
            description: Validate and apply a coupon code to calculate discount
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [code, order_value]
                            properties:
                                code: {type: string, description: "Coupon code to apply"}
                                order_value: {type: number, minimum: 0, description: "Total order value before discount"}
                                items: 
                                    type: array
                                    items:
                                        type: object
                                        properties:
                                            product_variant_id: {type: string}
                                            quantity: {type: integer, minimum: 1}
                                            unit_price: {type: number, minimum: 0}
                                    description: "Order items for validation"
            responses:
                '200':
                    description: Coupon applied successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                                    data:
                                        type: object
                                        properties:
                                            valid: {type: boolean}
                                            discount_amount: {type: number}
                                            final_amount: {type: number}
                                            coupon_details: {$ref: '#/components/schemas/UserCoupon'}
                '400': {description: Invalid or expired coupon}
                '401': {description: Unauthorized}
                '404': {description: Coupon not found}

    # Admin Coupon Campaigns
    /api/v1/admin/coupon-campaigns:
        get:
            tags: [Admin Coupons]
            summary: Get all coupon campaigns (admin)
            description: Get paginated list of coupon campaigns with filtering
            security: [{BearerAuth: []}]
            parameters:
                - name: page
                  in: query
                  schema: {type: integer, minimum: 1, default: 1}
                  description: Page number for pagination
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 100, default: 20}
                  description: Number of campaigns per page
                - name: status
                  in: query
                  schema: {type: string, enum: [ACTIVE, INACTIVE, EXPIRED, SCHEDULED]}
                  description: Filter by campaign status
                - name: discount_type
                  in: query
                  schema: {type: string, enum: [PERCENTAGE, AMOUNT, FREE_SHIPPING]}
                  description: Filter by discount type
                - name: search
                  in: query
                  schema: {type: string, maxLength: 100}
                  description: Search in campaign name and description
            responses:
                '200':
                    description: Coupon campaigns retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {type: array, items: {$ref: '#/components/schemas/CouponCampaign'}}
                                    pagination: {type: object}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

        post:
            tags: [Admin Coupons]
            summary: Create new coupon campaign
            description: Create a new coupon campaign with specified rules
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [name, discount_type, discount_value, valid_from, valid_until]
                            properties:
                                name: {type: string, minLength: 1, maxLength: 100, description: "Campaign name (required, unique)"}
                                description: {type: string, maxLength: 500, description: "Campaign description"}
                                code_prefix: {type: string, maxLength: 20, pattern: "^[A-Z0-9\\-]*$", description: "Code prefix for generated coupons (uppercase)"}
                                discount_type: {type: string, enum: [PERCENTAGE, AMOUNT, FREE_SHIPPING], description: "Type of discount (required)"}
                                discount_value: {type: number, minimum: 0, description: "Discount value (required): 0-100 for PERCENTAGE, positive for AMOUNT/FREE_SHIPPING"}
                                min_purchase_amount: {type: number, minimum: 0, default: 0, description: "Minimum purchase amount required"}
                                max_coupon_discount: {type: number, minimum: 0, description: "Maximum discount amount (for percentage discounts only)"}
                                valid_from: {type: string, format: date-time, description: "Campaign start date (required)"}
                                valid_until: {type: string, format: date-time, description: "Campaign end date (required, must be after valid_from)"}
                                max_global_usage: {type: integer, minimum: 0, description: "Maximum total usage limit (null/omit for unlimited)"}
                                max_usage_per_user: {type: integer, minimum: 1, default: 1, description: "Maximum usage per user"}
                                is_unique_per_user: {type: boolean, default: true, description: "Whether each user can only use once"}
                                eligibility_criteria: {type: array, items: {type: string, enum: [NEW_USER, REFERRAL, FIRST_ORDER, SPECIFIC_USER_GROUP, ALL_USERS, NONE]}, description: "User eligibility criteria (defaults to ['NONE'])"}
                                applicable_category_ids: {type: array, items: {type: string}, description: "Applicable category ObjectIds"}
                                applicable_product_variant_ids: {type: array, items: {type: string}, description: "Applicable product variant ObjectIds"}
                                is_active: {type: boolean, default: true, description: "Campaign active status"}
            responses:
                '201':
                    description: Coupon campaign created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                                    data: {$ref: '#/components/schemas/CouponCampaign'}
                '400': {description: Validation errors}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

    /api/v1/admin/coupon-campaigns/{identifier}:
        get:
            tags: [Admin Coupons]
            summary: Get coupon campaign by ID or slug
            description: Get detailed view of a coupon campaign
            security: [{BearerAuth: []}]
            parameters:
                - name: identifier
                  in: path
                  required: true
                  schema: {type: string}
                  description: Campaign ID or slug
            responses:
                '200':
                    description: Coupon campaign retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {$ref: '#/components/schemas/CouponCampaign'}
                '404': {description: Campaign not found}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

        patch:
            tags: [Admin Coupons]
            summary: Update coupon campaign
            description: Update an existing coupon campaign
            security: [{BearerAuth: []}]
            parameters:
                - name: identifier
                  in: path
                  required: true
                  schema: {type: string}
                  description: Campaign ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name: {type: string, minLength: 3, maxLength: 100}
                                description: {type: string, maxLength: 500}
                                discount_value: {type: number, minimum: 0}
                                min_order_value: {type: number, minimum: 0}
                                max_discount_amount: {type: number, minimum: 0}
                                usage_limit_per_user: {type: integer, minimum: 1}
                                total_usage_limit: {type: integer, minimum: 1}
                                is_active: {type: boolean}
                                expires_at: {type: string, format: date-time}
                                applicable_product_categories: {type: array, items: {type: string}}
                                applicable_brands: {type: array, items: {type: string}}
            responses:
                '200':
                    description: Campaign updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                                    data: {$ref: '#/components/schemas/CouponCampaign'}
                '400': {description: Validation errors}
                '404': {description: Campaign not found}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

        delete:
            tags: [Admin Coupons]
            summary: Delete coupon campaign
            description: Soft delete a coupon campaign
            security: [{BearerAuth: []}]
            parameters:
                - name: identifier
                  in: path
                  required: true
                  schema: {type: string}
                  description: Campaign ID
            responses:
                '200':
                    description: Campaign deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                '404': {description: Campaign not found}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

    /api/v1/admin/coupon-campaigns/{id}/generate-codes:
        post:
            tags: [Admin Coupons]
            summary: Generate user-specific coupon codes
            description: Generate coupon codes for specific users in a campaign
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string}
                  description: Campaign ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [user_emails, quantity_per_user]
                            properties:
                                user_emails: 
                                    type: array
                                    items: {type: string, format: email}
                                    description: "List of user emails"
                                quantity_per_user: 
                                    type: integer
                                    minimum: 1
                                    maximum: 10
                                    description: "Number of codes per user"
            responses:
                '201':
                    description: Coupon codes generated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                                    data:
                                        type: object
                                        properties:
                                            generated_count: {type: integer}
                                            failed_count: {type: integer}
                                            details: {type: array}
                '400': {description: Validation errors}
                '404': {description: Campaign not found}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

    # Admin User Coupons
    /api/v1/admin/user-coupons:
        get:
            tags: [Admin Coupons]
            summary: Get all user coupons (admin view)
            description: Get paginated list of all user coupons with advanced filtering
            security: [{BearerAuth: []}]
            parameters:
                - name: page
                  in: query
                  schema: {type: integer, minimum: 1, default: 1}
                  description: Page number for pagination
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 100, default: 20}
                  description: Number of coupons per page
                - name: status
                  in: query
                  schema: {type: string, enum: [ACTIVE, USED, EXPIRED]}
                  description: Filter by coupon status
                - name: coupon_campaign_id
                  in: query
                  schema: {type: string}
                  description: Filter by campaign ID
                - name: user_id
                  in: query
                  schema: {type: string}
                  description: Filter by user ID
                - name: search
                  in: query
                  schema: {type: string, maxLength: 100}
                  description: Search in coupon codes and user emails
            responses:
                '200':
                    description: User coupons retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {type: array, items: {$ref: '#/components/schemas/UserCoupon'}}
                                    pagination: {type: object}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

    /api/v1/admin/user-coupons/{id}:
        get:
            tags: [Admin Coupons]
            summary: Get single user coupon (admin)
            description: Retrieve detailed information about a specific user coupon
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string}
                  description: User coupon ID
            responses:
                '200':
                    description: User coupon retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                                    data: {$ref: '#/components/schemas/UserCoupon'}
                '404': {description: User coupon not found}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

        patch:
            tags: [Admin Coupons]
            summary: Update user coupon (admin)
            description: Update a user coupon status or details
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string}
                  description: User coupon ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                status: {type: string, enum: [ACTIVE, USED, EXPIRED]}
                                admin_notes: {type: string, maxLength: 500}
            responses:
                '200':
                    description: User coupon updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                                    data: {$ref: '#/components/schemas/UserCoupon'}
                '400': {description: Validation errors}
                '404': {description: User coupon not found}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

        delete:
            tags: [Admin Coupons]
            summary: Delete user coupon (admin)
            description: Soft delete a user coupon
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string}
                  description: User coupon ID
            responses:
                '200':
                    description: User coupon deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                '404': {description: User coupon not found}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

    # Dynamic Content
    /api/v1/content/locations:
        get:
            tags: [Dynamic Content]
            summary: Get all available content locations and types
            description: Get list of all content locations with their types and counts
            responses:
                '200': 
                    description: Success
                    content: 
                        application/json: 
                            schema: 
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: 
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                location_key: {type: string}
                                                type: {type: string}
                                                count: {type: integer}
                '500': {description: Server error}
    
    /api/v1/content/{locationKey}/{type}:
        get:
            tags: [Dynamic Content]
            summary: Get active content by location and type
            description: Get currently active content for a specific location and type
            parameters:
                - name: locationKey
                  in: path
                  required: true
                  schema: {type: string, pattern: '^[A-Z0-9_]+$'}
                  description: Location key (uppercase letters, numbers, underscores only)
                  example: HOME_HERO_SLIDER
                - name: type
                  in: path
                  required: true
                  schema: {type: string, enum: [CAROUSEL, MARQUEE, ADVERTISEMENT, OFFER, PROMO]}
                  description: Content type
                  example: CAROUSEL
                - name: audience
                  in: query
                  schema: {type: string}
                  description: Comma-separated audience tags for targeting
                  example: new_user,premium_member
            responses:
                '200': 
                    description: Success
                    content: 
                        application/json: 
                            schema: 
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: 
                                        type: array
                                        items: {$ref: '#/components/schemas/DynamicContent'}
                '400': {description: Invalid location key or type}
                '404': {description: No content found for location and type}
                '500': {description: Server error}
    /api/v1/admin/dynamic-content:
        get:
            tags: [Admin Dynamic Content]
            summary: Get all dynamic content items (admin)
            description: Get paginated list of dynamic content items with filtering
            security: [{BearerAuth: []}]
            parameters:
                - name: page
                  in: query
                  schema: {type: integer, minimum: 1, default: 1}
                  description: Page number for pagination
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 100, default: 20}
                  description: Number of items per page
                - name: type
                  in: query
                  schema: {type: string, enum: [CAROUSEL, MARQUEE, ADVERTISEMENT, OFFER, PROMO]}
                  description: Filter by content type
                - name: location_key
                  in: query
                  schema: {type: string}
                  description: Filter by location key
                - name: is_active
                  in: query
                  schema: {type: boolean}
                  description: Filter by active status
                - name: search
                  in: query
                  schema: {type: string}
                  description: Search in content name
            responses:
                '200':
                    description: Content items retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {type: array, items: {$ref: '#/components/schemas/DynamicContent'}}
                                    pagination: 
                                        type: object
                                        properties:
                                            currentPage: {type: integer}
                                            totalPages: {type: integer}
                                            totalItems: {type: integer}
                                            itemsPerPage: {type: integer}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

        post:
            tags: [Admin Dynamic Content]
            summary: Create new dynamic content
            description: Create a new dynamic content item
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [name, type, location_key]
                            properties:
                                name: {type: string, minLength: 1, maxLength: 200, description: "Content name (required, unique)"}
                                type: {type: string, enum: [CAROUSEL, MARQUEE, ADVERTISEMENT, OFFER, PROMO], description: "Content type (required)"}
                                location_key: {type: string, minLength: 1, maxLength: 100, pattern: "^[A-Z0-9_]+$", description: "Location key (required, uppercase/numbers/underscores only)"}
                                content_order: {type: number, minimum: 0, default: 0, description: "Display order"}
                                is_active: {type: boolean, default: false, description: "Active status"}
                                display_start_date: {type: string, format: date-time, description: "Content display start date"}
                                display_end_date: {type: string, format: date-time, description: "Content display end date (must be after start date)"}
                                primary_image_url: {type: string, format: uri, description: "Primary image URL (required for visual content types)"}
                                mobile_image_url: {type: string, format: uri, description: "Mobile-optimized image URL"}
                                alt_text: {type: string, maxLength: 250, description: "Image alt text"}
                                caption: {type: string, maxLength: 500, description: "Image caption"}
                                main_text_content: {type: string, maxLength: 1000, description: "Main text content (required for MARQUEE)"}
                                link_url: {type: string, format: uri, description: "Link URL"}
                                call_to_action_text: {type: string, maxLength: 50, description: "Call-to-action text"}
                                target_audience_tags: {type: array, items: {type: string, maxLength: 50}, description: "Target audience tags"}
                                metadata: {type: object, description: "Additional metadata"}
            responses:
                '201':
                    description: Content created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                                    data: {$ref: '#/components/schemas/DynamicContent'}
                '400': {description: Validation errors}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}
                '409': {description: Content name already exists}

    /api/v1/admin/dynamic-content/stats:
        get:
            tags: [Admin Dynamic Content]
            summary: Get content statistics
            description: Get statistics about content by type (total, active, inactive counts)
            security: [{BearerAuth: []}]
            responses:
                '200':
                    description: Statistics retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data:
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                type: {type: string}
                                                total: {type: integer}
                                                active: {type: integer}
                                                inactive: {type: integer}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

    /api/v1/admin/dynamic-content/{id}:
        get:
            tags: [Admin Dynamic Content]
            summary: Get single dynamic content item
            description: Get detailed information about a specific content item
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string}
                  description: Content item ID
            responses:
                '200':
                    description: Content item retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {$ref: '#/components/schemas/DynamicContent'}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}
                '404': {description: Content not found}

        patch:
            tags: [Admin Dynamic Content]
            summary: Update dynamic content item
            description: Update an existing dynamic content item
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string}
                  description: Content item ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name: {type: string, minLength: 1, maxLength: 200, description: "Content name"}
                                type: {type: string, enum: [CAROUSEL, MARQUEE, ADVERTISEMENT, OFFER, PROMO], description: "Content type"}
                                location_key: {type: string, minLength: 1, maxLength: 100, pattern: "^[A-Z0-9_]+$", description: "Location key"}
                                content_order: {type: number, minimum: 0, description: "Display order"}
                                is_active: {type: boolean, description: "Active status"}
                                display_start_date: {type: string, format: date-time, description: "Content display start date"}
                                display_end_date: {type: string, format: date-time, description: "Content display end date"}
                                primary_image_url: {type: string, format: uri, description: "Primary image URL"}
                                mobile_image_url: {type: string, format: uri, description: "Mobile image URL"}
                                alt_text: {type: string, maxLength: 250, description: "Image alt text"}
                                caption: {type: string, maxLength: 500, description: "Image caption"}
                                main_text_content: {type: string, maxLength: 1000, description: "Main text content"}
                                link_url: {type: string, format: uri, description: "Link URL"}
                                call_to_action_text: {type: string, maxLength: 50, description: "Call-to-action text"}
                                target_audience_tags: {type: array, items: {type: string, maxLength: 50}, description: "Target audience tags"}
                                metadata: {type: object, description: "Additional metadata"}
            responses:
                '200':
                    description: Content updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                                    data: {$ref: '#/components/schemas/DynamicContent'}
                '400': {description: Validation errors}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}
                '404': {description: Content not found}
                '409': {description: Content name already exists}

        delete:
            tags: [Admin Dynamic Content]
            summary: Delete dynamic content item
            description: Delete (soft delete) a dynamic content item
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string}
                  description: Content item ID
            responses:
                '200':
                    description: Content deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}
                '404': {description: Content not found}

    # User Favorites
    /api/v1/user/favorites:
        get:
            tags: [User Favorites]
            summary: Get user's favorites
            description: Retrieve the authenticated user's favorite product variants with pagination and filtering
            security: [{BearerAuth: []}]
            parameters:
                - name: page
                  in: query
                  schema: {type: integer, minimum: 1, default: 1}
                  description: Page number for pagination
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 100, default: 20}
                  description: Number of items per page
                - name: sort_by
                  in: query
                  schema: {type: string, enum: [added_at, updated_at], default: added_at}
                  description: Field to sort by
                - name: sort_order
                  in: query
                  schema: {type: string, enum: [asc, desc], default: desc}
                  description: Sort order
                - name: include_inactive
                  in: query
                  schema: {type: boolean, default: false}
                  description: Include inactive favorites
            responses:
                '200':
                    description: User favorites retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data:
                                        type: array
                                        items: {$ref: '#/components/schemas/Favorite'}
                                    pagination:
                                        type: object
                                        properties:
                                            current_page: {type: integer}
                                            total_pages: {type: integer}
                                            total_items: {type: integer}
                                            items_per_page: {type: integer}
                                            has_next_page: {type: boolean}
                                            has_prev_page: {type: boolean}
                '401': {description: Unauthorized}
                '500': {description: Internal server error}
        post:
            tags: [User Favorites]
            summary: Add product variant to favorites
            description: Add a product variant to the user's favorites list
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [product_variant_id]
                            properties:
                                product_variant_id: {type: string, description: 'Product variant ID to add to favorites'}
                                user_notes: {type: string, maxLength: 500, description: 'Optional user notes'}
            responses:
                '200':
                    description: Product variant updated in favorites or already exists
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Product variant is already in your favorites'}
                                    data:
                                        type: object
                                        properties:
                                            favorite: {$ref: '#/components/schemas/Favorite'}
                                            action: {type: string, enum: [reactivated, updated, already_exists], example: 'already_exists'}
                '201':
                    description: Product variant added to favorites successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Product variant added to favorites successfully'}
                                    data:
                                        type: object
                                        properties:
                                            favorite: {$ref: '#/components/schemas/Favorite'}
                                            action: {type: string, enum: [created], example: 'created'}
                '400': {description: Validation error or product variant not available}
                '401': {description: Unauthorized}
                '404': {description: Product variant not found}
                '500': {description: Internal server error}

    /api/v1/user/favorites/bulk:
        post:
            tags: [User Favorites]
            summary: Bulk add favorites
            description: Add multiple product variants to favorites at once
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [product_variant_ids]
                            properties:
                                product_variant_ids:
                                    type: array
                                    items: {type: string}
                                    minItems: 1
                                    maxItems: 50
                                    description: 'Array of product variant IDs (1-50 items)'
                                user_notes: {type: string, maxLength: 500, description: 'Optional notes for all favorites'}
            responses:
                '201':
                    description: Bulk operation completed
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean}
                                    message: {type: string}
                                    data:
                                        type: object
                                        properties:
                                            total: {type: integer}
                                            successful: {type: integer}
                                            failed: {type: integer}
                                            results: {type: array, items: {type: object}}
                '400': {description: Validation error}
                '401': {description: Unauthorized}
                '404': {description: Some product variants not found}
                '500': {description: Internal server error}

    /api/v1/user/favorites/stats:
        get:
            tags: [User Favorites]
            summary: Get user's favorite statistics
            description: Get statistics about the user's favorites
            security: [{BearerAuth: []}]
            responses:
                '200':
                    description: User favorite statistics
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data:
                                        type: object
                                        properties:
                                            total_favorites: {type: integer, description: 'Total number of user favorites', example: 15}
                                            active_favorites: {type: integer, description: 'Number of active favorites', example: 12}
                                            inactive_favorites: {type: integer, description: 'Number of inactive favorites', example: 3}
                                            recent_favorites: {type: integer, description: 'Favorites added in last 30 days', example: 5}
                '401': {description: Unauthorized}
                '500': {description: Internal server error}

    /api/v1/user/favorites/{productVariantId}:
        delete:
            tags: [User Favorites]
            summary: Remove product variant from favorites
            description: Remove a product variant from the user's favorites list
            security: [{BearerAuth: []}]
            parameters:
                - name: productVariantId
                  in: path
                  required: true
                  schema: {type: string}
                  description: Product variant ID to remove from favorites
            responses:
                '204': {description: Product variant removed from favorites successfully}
                '400': {description: Invalid product variant ID format}
                '401': {description: Unauthorized}
                '404': {description: Favorite not found}
                '500': {description: Internal server error}

    /api/v1/user/favorites/{productVariantId}/check:
        get:
            tags: [User Favorites]
            summary: Check if product variant is favorited
            description: Check whether a specific product variant is in the user's favorites
            security: [{BearerAuth: []}]
            parameters:
                - name: productVariantId
                  in: path
                  required: true
                  schema: {type: string}
                  description: Product variant ID to check
            responses:
                '200':
                    description: Favorite status checked
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean}
                                    data:
                                        type: object
                                        properties:
                                            product_variant_id: {type: string}
                                            is_favorited: {type: boolean}
                '400': {description: Invalid product variant ID format}
                '401': {description: Unauthorized}
                '500': {description: Internal server error}

    /api/v1/user/favorites/{productVariantId}/notes:
        patch:
            tags: [User Favorites]
            summary: Update favorite notes
            description: Update the notes for a specific favorite
            security: [{BearerAuth: []}]
            parameters:
                - name: productVariantId
                  in: path
                  required: true
                  schema: {type: string}
                  description: Product variant ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                user_notes: {type: string, maxLength: 500, description: 'Updated user notes'}
            responses:
                '200':
                    description: Favorite notes updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean}
                                    message: {type: string}
                                    data: {$ref: '#/components/schemas/Favorite'}
                '400': {description: Validation error or invalid product variant ID}
                '401': {description: Unauthorized}
                '404': {description: Favorite not found}
                '500': {description: Internal server error}

    # Public Favorites
    /api/v1/favorites/popular:
        get:
            tags: [Public Favorites]
            summary: Get most favorited product variants
            description: Get the most popular product variants based on favorites count (public endpoint)
            parameters:
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 50, default: 10}
                  description: Number of items to return
            responses:
                '200':
                    description: Most favorited products retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean}
                                    data:
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                product_variant_id: {type: string}
                                                sku_code: {type: string}
                                                product_name: {type: string}
                                                favorites_count: {type: integer}
                '400': {description: Invalid parameters}
                '500': {description: Internal server error}

    # Admin Email Management
    /api/v1/admin/emails:
        get:
            tags: [Admin Email Management]
            summary: Get all emails
            description: Retrieve all emails with filtering, searching, and pagination options
            security:
                - bearerAuth: []
            parameters:
                - name: page
                  in: query
                  description: Page number for pagination
                  schema:
                      type: integer
                      minimum: 1
                      default: 1
                - name: limit
                  in: query
                  description: Number of items per page
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 100
                      default: 20
                - name: status
                  in: query
                  description: Filter by email status
                  schema:
                      type: string
                      enum: [DRAFT, SCHEDULED, SENDING, SENT, FAILED, CANCELLED, PAUSED]
                - name: email_type
                  in: query
                  description: Filter by email type
                  schema:
                      type: string
                      enum: [PROMOTIONAL, TRANSACTIONAL, NEWSLETTER, WELCOME, ABANDONED_CART, ORDER_CONFIRMATION, SHIPPING_UPDATE, SYSTEM_NOTIFICATION, SURVEY, ANNOUNCEMENT, REMINDER, FEEDBACK_REQUEST, CUSTOM]
                - name: search
                  in: query
                  description: Search in email subjects and content
                  schema:
                      type: string
                      minLength: 1
                      maxLength: 100
                - name: start_date
                  in: query
                  description: Filter emails created after this date
                  schema:
                      type: string
                      format: date-time
                - name: end_date
                  in: query
                  description: Filter emails created before this date
                  schema:
                      type: string
                      format: date-time
                - name: sort_by
                  in: query
                  description: Field to sort by
                  schema:
                      type: string
                      enum: [created_at, updated_at, subject, email_type, status, priority]
                      default: created_at
                - name: sort_order
                  in: query
                  description: Sort order
                  schema:
                      type: string
                      enum: [asc, desc]
                      default: desc
            responses:
                '200':
                    description: Successfully retrieved emails
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data:
                                        type: object
                                        properties:
                                            emails:
                                                type: array
                                                items: {$ref: '#/components/schemas/Email'}
                                            pagination:
                                                type: object
                                                properties:
                                                    page: {type: integer}
                                                    limit: {type: integer}
                                                    total: {type: integer}
                                                    pages: {type: integer}
                                            summary:
                                                type: object
                                                properties:
                                                    total_emails: {type: integer}
                                                    draft_count: {type: integer}
                                                    sent_count: {type: integer}
                                                    scheduled_count: {type: integer}
                                                    failed_count: {type: integer}
                '400': {description: Invalid query parameters}
                '401': {description: Authentication required}
                '403': {description: Admin access required}
                '500': {description: Internal server error}
        post:
            tags: [Admin Email Management]
            summary: Create a new email
            description: Create a new email draft for sending
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [subject, content, email_type]
                            properties:
                                subject:
                                    type: string
                                    maxLength: 200
                                    description: Email subject line
                                    example: "Welcome to Our Platform!"
                                content:
                                    type: object
                                    required: [html]
                                    properties:
                                        html:
                                            type: string
                                            description: HTML content of the email
                                            example: "<h1>Welcome!</h1><p>Thank you for joining us.</p>"
                                        text:
                                            type: string
                                            description: Plain text version (optional, auto-generated if not provided)
                                            example: "Welcome! Thank you for joining us."
                                email_type:
                                    type: string
                                    enum: [PROMOTIONAL, TRANSACTIONAL, NEWSLETTER, WELCOME, ABANDONED_CART, ORDER_CONFIRMATION, SHIPPING_UPDATE, SYSTEM_NOTIFICATION, SURVEY, ANNOUNCEMENT, REMINDER, FEEDBACK_REQUEST, CUSTOM]
                                    description: Type of email
                                    example: WELCOME
                                priority:
                                    type: string
                                    enum: [LOW, MEDIUM, HIGH, URGENT]
                                    default: MEDIUM
                                    description: Email priority level
                                recipients:
                                    type: object
                                    properties:
                                        type:
                                            type: string
                                            enum: [INDIVIDUAL, BROADCAST, SEGMENT]
                                            default: INDIVIDUAL
                                        to:
                                            type: array
                                            items:
                                                type: object
                                                required: [email]
                                                properties:
                                                    email: {type: string, format: email}
                                                    name: {type: string}
                                                    user_id: {type: string}
                                template:
                                    type: object
                                    properties:
                                        template_id: {type: string, description: Reference to EmailTemplate}
                                        variables:
                                            type: object
                                            description: Variables to substitute in template
                                scheduling:
                                    type: object
                                    properties:
                                        send_type:
                                            type: string
                                            enum: [IMMEDIATE, SCHEDULED, RECURRING]
                                            default: IMMEDIATE
                                        scheduled_at:
                                            type: string
                                            format: date-time
                                            description: When to send the email (for SCHEDULED type)
                                        timezone:
                                            type: string
                                            default: UTC
                                            description: Timezone for scheduling
            responses:
                '201':
                    description: Email created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Email created successfully"}
                                    data: {$ref: '#/components/schemas/Email'}
                '400': {description: Validation error}
                '401': {description: Authentication required}
                '403': {description: Admin access required}
                '500': {description: Internal server error}

    /api/v1/admin/emails/{id}:
        get:
            tags: [Admin Email Management]
            summary: Get email by ID
            description: Retrieve a specific email by its ID
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: Email ID
                  schema:
                      type: string
                      pattern: '^[0-9a-fA-F]{24}$'
            responses:
                '200':
                    description: Email retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {$ref: '#/components/schemas/Email'}
                '400': {description: Invalid email ID format}
                '401': {description: Authentication required}
                '403': {description: Admin access required}
                '404': {description: Email not found}
                '500': {description: Internal server error}
        put:
            tags: [Admin Email Management]
            summary: Update email
            description: Update an existing email (only if status is DRAFT or SCHEDULED)
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: Email ID
                  schema:
                      type: string
                      pattern: '^[0-9a-fA-F]{24}$'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                subject: {type: string, maxLength: 200}
                                content:
                                    type: object
                                    properties:
                                        html: {type: string}
                                        text: {type: string}
                                email_type:
                                    type: string
                                    enum: [PROMOTIONAL, TRANSACTIONAL, NEWSLETTER, WELCOME, ABANDONED_CART, ORDER_CONFIRMATION, SHIPPING_UPDATE, SYSTEM_NOTIFICATION, SURVEY, ANNOUNCEMENT, REMINDER, FEEDBACK_REQUEST, CUSTOM]
                                priority:
                                    type: string
                                    enum: [LOW, MEDIUM, HIGH, URGENT]
                                recipients:
                                    type: object
                                    properties:
                                        type:
                                            type: string
                                            enum: [INDIVIDUAL, BROADCAST, SEGMENT]
                                        to:
                                            type: array
                                            items:
                                                type: object
                                                properties:
                                                    email: {type: string, format: email}
                                                    name: {type: string}
                                                    user_id: {type: string}
                                scheduling:
                                    type: object
                                    properties:
                                        send_type:
                                            type: string
                                            enum: [IMMEDIATE, SCHEDULED, RECURRING]
                                        scheduled_at:
                                            type: string
                                            format: date-time
                                        timezone: {type: string}
            responses:
                '200':
                    description: Email updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Email updated successfully"}
                                    data: {$ref: '#/components/schemas/Email'}
                '400': {description: Validation error or email cannot be edited}
                '401': {description: Authentication required}
                '403': {description: Admin access required}
                '404': {description: Email not found}
                '500': {description: Internal server error}
        delete:
            tags: [Admin Email Management]
            summary: Delete email
            description: Delete an email (only if status is DRAFT)
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: Email ID
                  schema:
                      type: string
                      pattern: '^[0-9a-fA-F]{24}$'
            responses:
                '200':
                    description: Email deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Email deleted successfully"}
                '400': {description: Email cannot be deleted (not in DRAFT status)}
                '401': {description: Authentication required}
                '403': {description: Admin access required}
                '404': {description: Email not found}
                '500': {description: Internal server error}

    /api/v1/admin/emails/{id}/send:
        post:
            tags: [Admin Email Management]
            summary: Send email
            description: Send an email immediately or schedule it for later
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: Email ID
                  schema:
                      type: string
                      pattern: '^[0-9a-fA-F]{24}$'
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                send_immediately:
                                    type: boolean
                                    default: true
                                    description: Whether to send immediately or use scheduled time
                                test_mode:
                                    type: boolean
                                    default: false
                                    description: Send as test to admin only
            responses:
                '200':
                    description: Email sent or scheduled successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Email sent successfully"}
                                    data:
                                        type: object
                                        properties:
                                            email_id: {type: string}
                                            status: {type: string}
                                            recipients_count: {type: integer}
                                            sent_at: {type: string, format: date-time}
                '400': {description: Email cannot be sent or validation error}
                '401': {description: Authentication required}
                '403': {description: Admin access required}
                '404': {description: Email not found}
                '500': {description: Internal server error}

    /api/v1/admin/emails/broadcast:
        post:
            tags: [Admin Email Management]
            summary: Create broadcast email
            description: Create and send email to multiple users based on criteria
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [subject, content, email_type, broadcast_criteria]
                            properties:
                                subject: {type: string, maxLength: 200}
                                content:
                                    type: object
                                    required: [html]
                                    properties:
                                        html: {type: string}
                                        text: {type: string}
                                email_type:
                                    type: string
                                    enum: [PROMOTIONAL, TRANSACTIONAL, NEWSLETTER, WELCOME, ABANDONED_CART, ORDER_CONFIRMATION, SHIPPING_UPDATE, SYSTEM_NOTIFICATION, SURVEY, ANNOUNCEMENT, REMINDER, FEEDBACK_REQUEST, CUSTOM]
                                priority:
                                    type: string
                                    enum: [LOW, MEDIUM, HIGH, URGENT]
                                    default: MEDIUM
                                broadcast_criteria:
                                    type: object
                                    properties:
                                        user_roles:
                                            type: array
                                            items:
                                                type: string
                                                enum: [user, admin, superadmin]
                                        user_status:
                                            type: array
                                            items:
                                                type: string
                                                enum: [active, inactive, suspended, pending]
                                        registration_date_range:
                                            type: object
                                            properties:
                                                start: {type: string, format: date}
                                                end: {type: string, format: date}
                                        custom_filters:
                                            type: object
                                            properties:
                                                has_orders: {type: boolean}
                                                order_count_min: {type: integer}
                                                order_count_max: {type: integer}
                                                total_spent_min: {type: number}
                                                total_spent_max: {type: number}
                                                location: {type: string}
                                                tags: {type: array, items: {type: string}}
                                send_immediately:
                                    type: boolean
                                    default: false
                                    description: Whether to send immediately after creation
                                template:
                                    type: object
                                    properties:
                                        template_id: {type: string}
                                        variables: {type: object}
            responses:
                '201':
                    description: Broadcast email created and optionally sent
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Broadcast email created successfully"}
                                    data:
                                        type: object
                                        properties:
                                            email_id: {type: string}
                                            estimated_recipients: {type: integer}
                                            status: {type: string}
                '400': {description: Validation error}
                '401': {description: Authentication required}
                '403': {description: Admin access required}
                '500': {description: Internal server error}

    /api/v1/admin/emails/analytics:
        get:
            tags: [Admin Email Management]
            summary: Get email analytics
            description: Retrieve email performance analytics and statistics
            security:
                - bearerAuth: []
            parameters:
                - name: period
                  in: query
                  description: Analytics period
                  schema:
                      type: string
                      enum: ['7d', '30d', '90d', '1y']
                      default: '30d'
                - name: email_type
                  in: query
                  description: Filter by email type
                  schema:
                      type: string
                      enum: [PROMOTIONAL, TRANSACTIONAL, NEWSLETTER, WELCOME, ABANDONED_CART, ORDER_CONFIRMATION, SHIPPING_UPDATE, SYSTEM_NOTIFICATION, SURVEY, ANNOUNCEMENT, REMINDER, FEEDBACK_REQUEST, CUSTOM]
            responses:
                '200':
                    description: Analytics data retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data:
                                        type: object
                                        properties:
                                            overview:
                                                type: object
                                                properties:
                                                    total_emails: {type: integer}
                                                    total_sent: {type: integer}
                                                    total_delivered: {type: integer}
                                                    total_opened: {type: integer}
                                                    total_clicked: {type: integer}
                                                    avg_delivery_rate: {type: number}
                                                    avg_open_rate: {type: number}
                                                    avg_click_rate: {type: number}
                                            top_performing:
                                                type: array
                                                items:
                                                    type: object
                                                    properties:
                                                        email_id: {type: string}
                                                        subject: {type: string}
                                                        email_type: {type: string}
                                                        open_rate: {type: number}
                                                        click_rate: {type: number}
                                                        sent_count: {type: integer}
                                            trends:
                                                type: object
                                                properties:
                                                    daily_stats: {type: array}
                                                    email_types: {type: array}
                '400': {description: Invalid parameters}
                '401': {description: Authentication required}
                '403': {description: Admin access required}
                '500': {description: Internal server error}

    # Admin Email Template Management
    /api/v1/admin/email-templates:
        get:
            tags: [Admin Email Templates]
            summary: Get all email templates
            description: Retrieve all email templates with filtering and pagination
            security:
                - bearerAuth: []
            parameters:
                - name: page
                  in: query
                  schema: {type: integer, minimum: 1, default: 1}
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 100, default: 20}
                - name: category
                  in: query
                  schema:
                      type: string
                      enum: [PROMOTIONAL, TRANSACTIONAL, NEWSLETTER, WELCOME, ABANDONED_CART, ORDER_CONFIRMATION, SHIPPING_UPDATE, SYSTEM_NOTIFICATION, SURVEY, ANNOUNCEMENT, REMINDER, FEEDBACK_REQUEST, CUSTOM]
                - name: search
                  in: query
                  schema: {type: string, minLength: 1, maxLength: 100}
                - name: is_active
                  in: query
                  schema: {type: boolean}
            responses:
                '200':
                    description: Templates retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data:
                                        type: object
                                        properties:
                                            templates:
                                                type: array
                                                items: {$ref: '#/components/schemas/EmailTemplate'}
                                            pagination:
                                                type: object
                                                properties:
                                                    page: {type: integer}
                                                    limit: {type: integer}
                                                    total: {type: integer}
                                                    pages: {type: integer}
                '400': {description: Invalid query parameters}
                '401': {description: Authentication required}
                '403': {description: Admin access required}
                '500': {description: Internal server error}
        post:
            tags: [Admin Email Templates]
            summary: Create email template
            description: Create a new email template
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [name, subject_template, html_template, category]
                            properties:
                                name: {type: string, maxLength: 100}
                                description: {type: string, maxLength: 500}
                                subject_template: {type: string, maxLength: 200}
                                html_template: {type: string}
                                text_template: {type: string}
                                category:
                                    type: string
                                    enum: [PROMOTIONAL, TRANSACTIONAL, NEWSLETTER, WELCOME, ABANDONED_CART, ORDER_CONFIRMATION, SHIPPING_UPDATE, SYSTEM_NOTIFICATION, SURVEY, ANNOUNCEMENT, REMINDER, FEEDBACK_REQUEST, CUSTOM]
                                variables:
                                    type: array
                                    items:
                                        type: object
                                        required: [name]
                                        properties:
                                            name: {type: string}
                                            description: {type: string}
                                            type: {type: string, enum: [string, number, boolean, date, object, array], default: string}
                                            required: {type: boolean, default: false}
                                            default_value: {}
                                design:
                                    type: object
                                    properties:
                                        layout: {type: string, enum: [SINGLE_COLUMN, TWO_COLUMN, THREE_COLUMN, CUSTOM], default: SINGLE_COLUMN}
                                        theme:
                                            type: object
                                            properties:
                                                primary_color: {type: string, default: '#007bff'}
                                                secondary_color: {type: string, default: '#6c757d'}
                                                background_color: {type: string, default: '#ffffff'}
                                                text_color: {type: string, default: '#333333'}
                                                font_family: {type: string, default: 'Arial, sans-serif'}
                                is_active: {type: boolean, default: true}
            responses:
                '201':
                    description: Template created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Template created successfully"}
                                    data: {$ref: '#/components/schemas/EmailTemplate'}
                '400': {description: Validation error}
                '401': {description: Authentication required}
                '403': {description: Admin access required}
                '500': {description: Internal server error}

    /api/v1/admin/email-templates/{id}:
        get:
            tags: [Admin Email Templates]
            summary: Get email template by ID
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string, pattern: '^[0-9a-fA-F]{24}$'}
            responses:
                '200':
                    description: Template retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {$ref: '#/components/schemas/EmailTemplate'}
                '404': {description: Template not found}
                '500': {description: Internal server error}
        put:
            tags: [Admin Email Templates]
            summary: Update email template
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string, pattern: '^[0-9a-fA-F]{24}$'}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name: {type: string, maxLength: 100}
                                description: {type: string, maxLength: 500}
                                subject_template: {type: string, maxLength: 200}
                                html_template: {type: string}
                                text_template: {type: string}
                                category:
                                    type: string
                                    enum: [PROMOTIONAL, TRANSACTIONAL, NEWSLETTER, WELCOME, ABANDONED_CART, ORDER_CONFIRMATION, SHIPPING_UPDATE, SYSTEM_NOTIFICATION, SURVEY, ANNOUNCEMENT, REMINDER, FEEDBACK_REQUEST, CUSTOM]
                                variables: {type: array}
                                design: {type: object}
                                is_active: {type: boolean}
            responses:
                '200':
                    description: Template updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Template updated successfully"}
                                    data: {$ref: '#/components/schemas/EmailTemplate'}
                '400': {description: Validation error}
                '404': {description: Template not found}
                '500': {description: Internal server error}
        delete:
            tags: [Admin Email Templates]
            summary: Delete email template
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string, pattern: '^[0-9a-fA-F]{24}$'}
            responses:
                '200':
                    description: Template deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Template deleted successfully"}
                '404': {description: Template not found}
                '500': {description: Internal server error}

    /api/v1/admin/email-templates/{id}/preview:
        post:
            tags: [Admin Email Templates]
            summary: Preview email template
            description: Generate a preview of the template with provided variables
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string, pattern: '^[0-9a-fA-F]{24}$'}
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                variables:
                                    type: object
                                    description: Variables to substitute in template
                                    example: {user_name: "John Doe", product_name: "Premium Plan"}
            responses:
                '200':
                    description: Preview generated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data:
                                        type: object
                                        properties:
                                            subject: {type: string, example: "Welcome John Doe!"}
                                            html_content: {type: string}
                                            text_content: {type: string}
                                            variables_used: {type: array, items: {type: string}}
                '400': {description: Invalid variables or template}
                '404': {description: Template not found}
                '500': {description: Internal server error}

    /api/v1/admin/email-templates/{id}/clone:
        post:
            tags: [Admin Email Templates]
            summary: Clone email template
            description: Create a copy of an existing template
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string, pattern: '^[0-9a-fA-F]{24}$'}
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                new_name:
                                    type: string
                                    maxLength: 100
                                    description: Name for the cloned template (optional, will auto-generate if not provided)
            responses:
                '201':
                    description: Template cloned successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Template cloned successfully"}
                                    data: {$ref: '#/components/schemas/EmailTemplate'}
                '404': {description: Template not found}
                '500': {description: Internal server error}

    /api/v1/admin/email-templates/analytics:
        get:
            tags: [Admin Email Templates]
            summary: Get template analytics
            description: Retrieve usage analytics for all templates
            security:
                - bearerAuth: []
            parameters:
                - name: period
                  in: query
                  schema: {type: string, enum: ['7d', '30d', '90d', '1y'], default: '30d'}
            responses:
                '200':
                    description: Analytics retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data:
                                        type: object
                                        properties:
                                            total_templates: {type: integer}
                                            active_templates: {type: integer}
                                            most_used:
                                                type: array
                                                items:
                                                    type: object
                                                    properties:
                                                        template_id: {type: string}
                                                        name: {type: string}
                                                        usage_count: {type: integer}
                                                        avg_performance: {type: number}
                                            category_distribution:
                                                type: object
                                                additionalProperties: {type: integer}
                '500': {description: Internal server error}

    # Admin Favorites Management
    /api/v1/admin/favorites:
        get:
            tags: [Admin Favorites]
            summary: Get all favorites across the system
            description: Retrieve all favorites with advanced filtering and pagination (Admin only)
            security: [{BearerAuth: []}]
            parameters:
                - name: page
                  in: query
                  schema: {type: integer, minimum: 1, default: 1}
                  description: Page number for pagination
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 100, default: 20}
                  description: Number of items per page
                - name: sort_by
                  in: query
                  schema: {type: string, enum: [added_at, updated_at, user_id, product_variant_id], default: added_at}
                  description: Field to sort by
                - name: sort_order
                  in: query
                  schema: {type: string, enum: [asc, desc], default: desc}
                  description: Sort order
                - name: user_id
                  in: query
                  schema: {type: string}
                  description: Filter by specific user ID
                - name: product_variant_id
                  in: query
                  schema: {type: string}
                  description: Filter by specific product variant ID
                - name: include_inactive
                  in: query
                  schema: {type: boolean, default: false}
                  description: Include inactive favorites
                - name: date_from
                  in: query
                  schema: {type: string, format: date}
                  description: Filter favorites from this date
                - name: date_to
                  in: query
                  schema: {type: string, format: date}
                  description: Filter favorites until this date
            responses:
                '200':
                    description: All favorites retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean}
                                    data:
                                        type: array
                                        items: {$ref: '#/components/schemas/Favorite'}
                                    pagination:
                                        type: object
                                        properties:
                                            current_page: {type: integer}
                                            total_pages: {type: integer}
                                            total_items: {type: integer}
                                            items_per_page: {type: integer}
                                            has_next_page: {type: boolean}
                                            has_prev_page: {type: boolean}
                                    filters:
                                        type: object
                                        properties:
                                            user_id: {type: string}
                                            product_variant_id: {type: string}
                                            include_inactive: {type: boolean}
                                            date_from: {type: string}
                                            date_to: {type: string}
                '400': {description: Invalid parameters}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}
                '500': {description: Internal server error}

    /api/v1/admin/favorites/stats:
        get:
            tags: [Admin Favorites]
            summary: Get comprehensive favorites statistics
            description: Get detailed statistics about favorites across the entire system (Admin only)
            security: [{BearerAuth: []}]
            parameters:
                - name: date_from
                  in: query
                  schema: {type: string, format: date}
                  description: Filter statistics from this date
                - name: date_to
                  in: query
                  schema: {type: string, format: date}
                  description: Filter statistics until this date
            responses:
                '200':
                    description: Favorites statistics retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean}
                                    data:
                                        type: object
                                        properties:
                                            overview: {$ref: '#/components/schemas/FavoriteStats'}
                                            date_range:
                                                type: object
                                                properties:
                                                    from: {type: string, format: date}
                                                    to: {type: string, format: date}
                '400': {description: Invalid parameters}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}
                '500': {description: Internal server error}

    /api/v1/admin/favorites/user/{userId}:
        get:
            tags: [Admin Favorites]
            summary: Get specific user's favorites
            description: Retrieve all favorites for a specific user (Admin only)
            security: [{BearerAuth: []}]
            parameters:
                - name: userId
                  in: path
                  required: true
                  schema: {type: string}
                  description: User ID to get favorites for
                - name: page
                  in: query
                  schema: {type: integer, minimum: 1, default: 1}
                  description: Page number for pagination
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 100, default: 20}
                  description: Number of items per page
                - name: sort_by
                  in: query
                  schema: {type: string, enum: [added_at, updated_at], default: added_at}
                  description: Field to sort by
                - name: sort_order
                  in: query
                  schema: {type: string, enum: [asc, desc], default: desc}
                  description: Sort order
                - name: include_inactive
                  in: query
                  schema: {type: boolean, default: false}
                  description: Include inactive favorites
            responses:
                '200':
                    description: User favorites retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean}
                                    data:
                                        type: object
                                        properties:
                                            user:
                                                type: object
                                                properties:
                                                    _id: {type: string}
                                                    name: {type: string}
                                                    email: {type: string}
                                                    role: {type: string}
                                                    isActive: {type: boolean}
                                                    createdAt: {type: string, format: date-time}
                                            favorites:
                                                type: array
                                                items: {$ref: '#/components/schemas/Favorite'}
                                            pagination:
                                                type: object
                                                properties:
                                                    current_page: {type: integer}
                                                    total_pages: {type: integer}
                                                    total_items: {type: integer}
                                                    items_per_page: {type: integer}
                                                    has_next_page: {type: boolean}
                                                    has_prev_page: {type: boolean}
                '400': {description: Invalid user ID format}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}
                '404': {description: User not found}
                '500': {description: Internal server error}

    # Payment Methods
    /api/v1/user/payment-methods:
        get:
            tags: [Payment Methods]
            summary: Get all payment methods for authenticated user
            description: Retrieve all payment methods associated with the authenticated user
            security: [{BearerAuth: []}]
            parameters:
                - name: include_inactive
                  in: query
                  required: false
                  schema:
                      type: boolean
                      default: false
                  description: Include inactive payment methods in response
            responses:
                '200':
                    description: Payment methods retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        example: true
                                    message:
                                        type: string
                                        example: "Payment methods retrieved successfully"
                                    data:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/PaymentMethod'
                '401': {description: Unauthorized}
                '500': {description: Internal server error}
        post:
            tags: [Payment Methods]
            summary: Add a new payment method
            description: Add a new payment method for the authenticated user
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [method_type, details]
                            properties:
                                method_type:
                                    type: string
                                    enum: [CREDIT_CARD, DEBIT_CARD, UPI, WALLET, NETBANKING, OTHER]
                                    description: Type of payment method
                                    example: CREDIT_CARD
                                alias:
                                    type: string
                                    maxLength: 50
                                    description: User-defined alias for the payment method
                                    example: "My Primary Card"
                                is_default:
                                    type: boolean
                                    default: false
                                    description: Set as default payment method
                                details:
                                    type: object
                                    description: Payment method specific details
                                    oneOf:
                                        - title: Credit/Debit Card
                                          properties:
                                              card_brand:
                                                  type: string
                                                  enum: [Visa, MasterCard, RuPay, Amex, Discover, Other]
                                              last4_digits:
                                                  type: string
                                                  pattern: '^\d{4}$'
                                                  example: "1234"
                                              expiry_month:
                                                  type: string
                                                  pattern: '^(0[1-9]|1[0-2])$'
                                                  example: "12"
                                              expiry_year:
                                                  type: string
                                                  pattern: '^\d{4}$'
                                                  example: "2025"
                                              card_holder_name:
                                                  type: string
                                                  maxLength: 100
                                                  example: "John Doe"
                                              token:
                                                  type: string
                                                  description: Payment gateway token
                                        - title: UPI
                                          properties:
                                              upi_id:
                                                  type: string
                                                  pattern: '^[\w.-]+@[\w.-]+$'
                                                  maxLength: 100
                                                  example: "user@paytm"
                                              account_holder_name:
                                                  type: string
                                                  maxLength: 100
                                                  example: "John Doe"
                                        - title: Wallet
                                          properties:
                                              wallet_provider:
                                                  type: string
                                                  enum: [Paytm, PhonePe, GooglePay, Mobikwik, JioMoney, Other]
                                              linked_account_identifier:
                                                  type: string
                                                  maxLength: 100
                                        - title: Net Banking
                                          properties:
                                              bank_name:
                                                  type: string
                                                  maxLength: 100
                                                  example: "State Bank of India"
                                              account_holder_name:
                                                  type: string
                                                  maxLength: 100
                                                  example: "John Doe"
                                              token:
                                                  type: string
                                                  description: Bank token (optional)
            responses:
                '201':
                    description: Payment method added successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        example: true
                                    message:
                                        type: string
                                        example: "Payment method added successfully"
                                    data:
                                        $ref: '#/components/schemas/PaymentMethod'
                '400': {description: Validation error}
                '401': {description: Unauthorized}
                '500': {description: Internal server error}
    
    /api/v1/user/payment-methods/default:
        get:
            tags: [Payment Methods]
            summary: Get user's default payment method
            description: Retrieve the default payment method for the authenticated user
            security: [{BearerAuth: []}]
            responses:
                '200':
                    description: Default payment method retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        example: true
                                    message:
                                        type: string
                                        example: "Default payment method retrieved successfully"
                                    data:
                                        $ref: '#/components/schemas/PaymentMethod'
                '401': {description: Unauthorized}
                '404': {description: No default payment method found}
                '500': {description: Internal server error}
    
    /api/v1/user/payment-methods/{id}:
        get:
            tags: [Payment Methods]
            summary: Get a specific payment method by ID
            description: Retrieve a specific payment method by its ID for the authenticated user
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                      format: objectId
                  description: Payment method ObjectId
            responses:
                '200':
                    description: Payment method retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        example: true
                                    message:
                                        type: string
                                        example: "Payment method retrieved successfully"
                                    data:
                                        $ref: '#/components/schemas/PaymentMethod'
                '401': {description: Unauthorized}
                '404': {description: Payment method not found}
                '500': {description: Internal server error}
        patch:
            tags: [Payment Methods]
            summary: Update payment method (non-sensitive fields only)
            description: Update non-sensitive fields of a payment method. Sensitive fields like tokens, card numbers, UPI IDs cannot be updated.
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                      format: objectId
                  description: Payment method ObjectId
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                alias:
                                    type: string
                                    maxLength: 50
                                    description: User-defined alias for the payment method
                                is_default:
                                    type: boolean
                                    description: Set as default payment method
                                details:
                                    type: object
                                    description: Non-sensitive payment method details only
                                    properties:
                                        card_holder_name:
                                            type: string
                                            maxLength: 100
                                        account_holder_name:
                                            type: string
                                            maxLength: 100
                                        bank_name:
                                            type: string
                                            maxLength: 100
                                        wallet_provider:
                                            type: string
                                            enum: [Paytm, PhonePe, GooglePay, Mobikwik, JioMoney, Other]
                                        linked_account_identifier:
                                            type: string
                                            maxLength: 100
            responses:
                '200':
                    description: Payment method updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        example: true
                                    message:
                                        type: string
                                        example: "Payment method updated successfully"
                                    data:
                                        $ref: '#/components/schemas/PaymentMethod'
                '400': {description: Validation error or attempt to update sensitive fields}
                '401': {description: Unauthorized}
                '404': {description: Payment method not found}
                '500': {description: Internal server error}
        delete:
            tags: [Payment Methods]
            summary: Delete payment method (soft delete by default)
            description: Delete a payment method. By default performs soft delete, but can be hard deleted with query parameter.
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                      format: objectId
                  description: Payment method ObjectId
                - name: hard_delete
                  in: query
                  required: false
                  schema:
                      type: boolean
                      default: false
                  description: Perform hard delete instead of soft delete
            responses:
                '200':
                    description: Payment method deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        example: true
                                    message:
                                        type: string
                                        example: "Payment method deleted successfully"
                '401': {description: Unauthorized}
                '404': {description: Payment method not found}
                '500': {description: Internal server error}
    
    /api/v1/user/payment-methods/{id}/default:
        patch:
            tags: [Payment Methods]
            summary: Set payment method as default
            description: Set a specific payment method as the default for the authenticated user
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                      format: objectId
                  description: Payment method ObjectId
            responses:
                '200':
                    description: Payment method set as default successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        example: true
                                    message:
                                        type: string
                                        example: "Payment method set as default successfully"
                                    data:
                                        $ref: '#/components/schemas/PaymentMethod'
                '401': {description: Unauthorized}
                '404': {description: Payment method not found}
                '500': {description: Internal server error}

    # Product Reviews
    /api/v1/products/{productId}/reviews:
        get:
            tags: [Product Reviews]
            summary: Get product reviews
            parameters:
                - {name: productId, in: path, required: true, schema: {type: string}}
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
                - {name: rating, in: query, schema: {type: integer, minimum: 1, maximum: 5}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {reviews: {type: array, items: {$ref: '#/components/schemas/ProductReview'}}, pagination: {type: object}, rating_summary: {type: object}}}}}}
        post:
            tags: [Product Reviews]
            summary: Create product review
            security: [{BearerAuth: []}]
            parameters:
                - {name: productId, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [rating]
                            properties: {rating: {type: integer, minimum: 1, maximum: 5}, title: {type: string}, comment: {type: string}, images: {type: array, items: {type: string}}, order_id: {type: string}}
            responses:
                '201': {description: Review created, content: {application/json: {schema: {$ref: '#/components/schemas/ProductReview'}}}}
                '401': {description: Unauthorized}
    /api/v1/reviews/{id}:
        put:
            tags: [Product Reviews]
            summary: Update review
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties: {rating: {type: integer, minimum: 1, maximum: 5}, title: {type: string}, comment: {type: string}, images: {type: array, items: {type: string}}}
            responses:
                '200': {description: Review updated, content: {application/json: {schema: {$ref: '#/components/schemas/ProductReview'}}}}
                '404': {description: Review not found}
        delete:
            tags: [Product Reviews]
            summary: Delete review
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Review deleted}
                '404': {description: Review not found}
    /api/v1/reviews/{id}/helpful:
        post:
            tags: [Product Reviews]
            summary: Mark review as helpful
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Review marked as helpful}
                '401': {description: Unauthorized}
    /api/v1/admin/reviews:
        get:
            tags: [Admin Reviews]
            summary: Get all reviews (admin view)
            description: Retrieve paginated list of reviews with advanced filtering options
            security: [{BearerAuth: []}]
            parameters:
                - name: page
                  in: query
                  schema: {type: integer, minimum: 1, default: 1}
                  description: Page number for pagination
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 100, default: 20}
                  description: Number of reviews per page
                - name: status
                  in: query
                  schema: {type: string, enum: [pending, pending_approval, approved, rejected, flagged, PENDING_APPROVAL, APPROVED, REJECTED, FLAGGED]}
                  description: Filter by review status
                - name: product_variant_id
                  in: query
                  schema: {type: string}
                  description: Filter by product variant ID
                - name: user_id
                  in: query
                  schema: {type: string}
                  description: Filter by user ID
                - name: reported_only
                  in: query
                  schema: {type: string, enum: [true, false]}
                  description: Show only reported reviews
                - name: verified_only
                  in: query
                  schema: {type: string, enum: [true, false]}
                  description: Show only verified buyer reviews
                - name: sort_by
                  in: query
                  schema: {type: string, enum: [createdAt, updatedAt, rating, helpful_votes, reported_count], default: createdAt}
                  description: Field to sort by
                - name: sort_order
                  in: query
                  schema: {type: string, enum: [asc, desc], default: desc}
                  description: Sort order
                - name: search
                  in: query
                  schema: {type: string, maxLength: 100}
                  description: Search in review title and text
            responses:
                '200': 
                    description: Reviews retrieved successfully
                    content: 
                        application/json: 
                            schema: 
                                type: object
                                properties: 
                                    success: {type: boolean, example: true}
                                    data: {type: array, items: {$ref: '#/components/schemas/ProductReview'}}
                                    pagination: 
                                        type: object
                                        properties:
                                            current_page: {type: integer}
                                            total_pages: {type: integer}
                                            total_items: {type: integer}
                                            items_per_page: {type: integer}
                                            has_next_page: {type: boolean}
                                            has_prev_page: {type: boolean}
                '400': {description: Validation errors}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

    /api/v1/admin/reviews/summary:
        get:
            tags: [Admin Reviews]
            summary: Get review summary statistics
            description: Get aggregated statistics about reviews
            security: [{BearerAuth: []}]
            parameters:
                - name: start_date
                  in: query
                  schema: {type: string, format: date}
                  description: Start date for statistics
                - name: end_date
                  in: query
                  schema: {type: string, format: date}
                  description: End date for statistics
            responses:
                '200':
                    description: Review statistics retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {type: object}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

    /api/v1/admin/reviews/{reviewId}:
        get:
            tags: [Admin Reviews]
            summary: Get single review (admin view)
            description: Get detailed view of a review with reports
            security: [{BearerAuth: []}]
            parameters:
                - name: reviewId
                  in: path
                  required: true
                  schema: {type: string}
                  description: Review ID
            responses:
                '200':
                    description: Review retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data:
                                        type: object
                                        properties:
                                            review: {$ref: '#/components/schemas/ProductReview'}
                                            reports: {type: array}
                '404': {description: Review not found}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}
        
        patch:
            tags: [Admin Reviews]
            summary: Update any review (admin)
            description: Update any review fields as admin
            security: [{BearerAuth: []}]
            parameters:
                - name: reviewId
                  in: path
                  required: true
                  schema: {type: string}
                  description: Review ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                rating: {type: integer, minimum: 1, maximum: 5}
                                title: {type: string, maxLength: 100}
                                review_text: {type: string, maxLength: 2000}
                                status: {type: string, enum: [PENDING_APPROVAL, APPROVED, REJECTED, FLAGGED]}
                                reviewer_display_name: {type: string, maxLength: 50}
                                reviewer_location: {type: string, maxLength: 100}
            responses:
                '200': 
                    description: Review updated successfully
                    content: 
                        application/json: 
                            schema: 
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                                    data: {$ref: '#/components/schemas/ProductReview'}
                '400': {description: Validation errors}
                '404': {description: Review not found}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

        delete:
            tags: [Admin Reviews]
            summary: Delete review (admin)
            description: Delete or reject a review (soft or hard delete)
            security: [{BearerAuth: []}]
            parameters:
                - name: reviewId
                  in: path
                  required: true
                  schema: {type: string}
                  description: Review ID
                - name: hard_delete
                  in: query
                  schema: {type: string, enum: [true, false], default: false}
                  description: Whether to permanently delete or soft delete
            responses:
                '200': 
                    description: Review deleted successfully
                    content: 
                        application/json: 
                            schema: 
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                '404': {description: Review not found}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

    /api/v1/admin/reviews/{reviewId}/status:
        patch:
            tags: [Admin Reviews]
            summary: Update review status
            description: Update review status (approve/reject/flag)
            security: [{BearerAuth: []}]
            parameters:
                - name: reviewId
                  in: path
                  required: true
                  schema: {type: string}
                  description: Review ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [status]
                            properties:
                                status: {type: string, enum: [PENDING_APPROVAL, APPROVED, REJECTED, FLAGGED]}
            responses:
                '200': 
                    description: Review status updated successfully
                    content: 
                        application/json: 
                            schema: 
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                                    data:
                                        type: object
                                        properties:
                                            id: {type: string}
                                            status: {type: string}
                                            moderated_at: {type: string, format: date-time}
                                            moderated_by: {type: string}
                '400': {description: Invalid status value}
                '404': {description: Review not found}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

    # Review Reports
    /api/v1/reviews/{reviewId}/report:
        post:
            tags: [Review Reports]
            summary: Report a review
            security: [{BearerAuth: []}]
            parameters:
                - {name: reviewId, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [reason]
                            properties: {reason: {type: string, enum: [spam, inappropriate, fake, misleading, other]}, description: {type: string}}
            responses:
                '201': {description: Review reported, content: {application/json: {schema: {$ref: '#/components/schemas/ReviewReport'}}}}
                '401': {description: Unauthorized}
    /api/v1/admin/review-reports:
        get:
            tags: [Admin Review Reports]
            summary: Get all review reports (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
                - {name: status, in: query, schema: {type: string, enum: [pending, reviewed, resolved]}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {reports: {type: array, items: {$ref: '#/components/schemas/ReviewReport'}}, pagination: {type: object}}}}}}
                '401': {description: Unauthorized}
    /api/v1/admin/review-reports/{id}:
        put:
            tags: [Admin Review Reports]
            summary: Update review report status (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties: {status: {type: string, enum: [pending, reviewed, resolved]}, admin_notes: {type: string}}
            responses:
                '200': {description: Review report updated, content: {application/json: {schema: {$ref: '#/components/schemas/ReviewReport'}}}}
                '404': {description: Review report not found}



    # Wallet
    /api/v1/wallet:
        get:
            tags: [Wallet]
            summary: Get user's wallet
            security: [{BearerAuth: []}]
            responses:
                '200': {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/Wallet'}}}}
                '401': {description: Unauthorized}
    /api/v1/wallet/transactions:
        get:
            tags: [Wallet]
            summary: Get wallet transactions
            security: [{BearerAuth: []}]
            parameters:
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
                - {name: type, in: query, schema: {type: string, enum: [credit, debit]}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {transactions: {type: array, items: {$ref: '#/components/schemas/WalletTransaction'}}, pagination: {type: object}}}}}}
                '401': {description: Unauthorized}
        post:
            tags: [Wallet]
            summary: Add money to wallet
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [amount]
                            properties: {amount: {type: number, minimum: 1}, payment_method: {type: string}}
            responses:
                '201': {description: Money added to wallet, content: {application/json: {schema: {$ref: '#/components/schemas/WalletTransaction'}}}}
                '401': {description: Unauthorized}
    # Admin Wallets
    /api/v1/admin/wallets:
        get:
            tags: [Admin Wallets]
            summary: Get all wallets with filtering and pagination
            description: Retrieve all user wallets with comprehensive filtering, sorting, and pagination options for admin management
            security: [{BearerAuth: []}]
            parameters:
                - name: page
                  in: query
                  description: Page number for pagination
                  schema: {type: integer, minimum: 1, default: 1}
                  example: 1
                - name: limit
                  in: query  
                  description: Number of wallets per page
                  schema: {type: integer, minimum: 1, maximum: 100, default: 20}
                  example: 20
                - name: sort_by
                  in: query
                  description: Field to sort by
                  schema: {type: string, enum: [created_at, updated_at, balance, last_transaction_at], default: created_at}
                  example: balance
                - name: sort_order
                  in: query
                  description: Sort direction
                  schema: {type: string, enum: [asc, desc], default: desc}
                  example: desc
                - name: status
                  in: query
                  description: Filter by wallet status
                  schema: {type: string, enum: [ACTIVE, BLOCKED, INACTIVE]}
                  example: ACTIVE
                - name: currency
                  in: query
                  description: Filter by wallet currency
                  schema: {type: string, enum: [INR, USD, EUR, GBP, AUD, CAD], default: INR}
                  example: INR
                - name: user_id
                  in: query
                  description: Filter by specific user ID
                  schema: {type: string, pattern: '^[0-9a-fA-F]{24}$'}
                  example: '64a1b2c3d4e5f6789abcdef1'
                - name: min_balance
                  in: query
                  description: Minimum wallet balance filter
                  schema: {type: number, minimum: 0}
                  example: 100
                - name: max_balance
                  in: query
                  description: Maximum wallet balance filter
                  schema: {type: number, minimum: 0}
                  example: 5000
                - name: date_from
                  in: query
                  description: Filter wallets created from this date
                  schema: {type: string, format: date-time}
                  example: '2025-01-01T00:00:00.000Z'
                - name: date_to
                  in: query
                  description: Filter wallets created until this date
                  schema: {type: string, format: date-time}
                  example: '2025-12-31T23:59:59.999Z'
                - name: search
                  in: query
                  description: Search in user email, first name, or last name
                  schema: {type: string, minLength: 1, maxLength: 100}
                  example: 'john@example.com'
            responses:
                '200':
                    description: Wallets retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Wallets retrieved successfully'}
                                    data:
                                        type: object
                                        properties:
                                            wallets:
                                                type: array
                                                items: {$ref: '#/components/schemas/Wallet'}
                                            pagination:
                                                type: object
                                                properties:
                                                    current_page: {type: integer, example: 1}
                                                    total_pages: {type: integer, example: 5}
                                                    total_count: {type: integer, example: 53}
                                                    per_page: {type: integer, example: 20}
                                                    has_next_page: {type: boolean, example: true}
                                                    has_prev_page: {type: boolean, example: false}
                                            summary:
                                                type: object
                                                properties:
                                                    total_wallets: {type: integer, example: 53}
                                                    total_balance: {type: number, example: 89311.13}
                                                    average_balance: {type: number, example: 1685.12}
                                                    active_wallets: {type: integer, example: 50}
                                                    blocked_wallets: {type: integer, example: 2}
                                                    inactive_wallets: {type: integer, example: 1}
                                            filters_applied:
                                                type: object
                                                properties:
                                                    status: {type: string, example: 'ACTIVE'}
                                                    currency: {type: string, example: 'INR'}
                                                    min_balance: {type: number, example: 100}
                                                    max_balance: {type: number, example: 5000}
                                                    user_id: {type: string, example: null}
                                                    date_from: {type: string, example: null}
                                                    date_to: {type: string, example: null}
                                                    search: {type: string, example: null}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/admin/wallets/stats:
        get:
            tags: [Admin Wallets]
            summary: Get wallet statistics for admin dashboard
            description: Retrieve comprehensive wallet statistics and analytics for administrative overview
            security: [{BearerAuth: []}]
            parameters:
                - name: date_from
                  in: query
                  description: Get stats from this date
                  schema: {type: string, format: date-time}
                  example: '2025-01-01T00:00:00.000Z'
                - name: date_to
                  in: query
                  description: Get stats until this date
                  schema: {type: string, format: date-time}
                  example: '2025-12-31T23:59:59.999Z'
            responses:
                '200':
                    description: Wallet statistics retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Wallet statistics retrieved successfully'}
                                    data:
                                        type: object
                                        properties:
                                            overview:
                                                type: object
                                                properties:
                                                    total_wallets: {type: integer, example: 53}
                                                    active_wallets: {type: integer, example: 50}
                                                    blocked_wallets: {type: integer, example: 2}
                                                    inactive_wallets: {type: integer, example: 1}
                                            financial:
                                                type: object
                                                properties:
                                                    total_balance: {type: number, example: 89311.13}
                                                    average_balance: {type: number, example: 1685.12}
                                                    median_balance: {type: number, example: 1200.50}
                                                    highest_balance: {type: number, example: 5000.00}
                                                    lowest_balance: {type: number, example: 0.00}
                                            transactions:
                                                type: object
                                                properties:
                                                    total_transactions: {type: integer, example: 444}
                                                    completed_transactions: {type: integer, example: 421}
                                                    failed_transactions: {type: integer, example: 23}
                                                    success_rate: {type: number, example: 94.8}
                                                    total_credited: {type: number, example: 125000.50}
                                                    total_debited: {type: number, example: 35689.37}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/admin/wallets/transactions:
        get:
            tags: [Admin Wallets]
            summary: Get all wallet transactions (admin view)
            description: Retrieve all wallet transactions across the system with filtering and pagination for admin monitoring
            security: [{BearerAuth: []}]
            parameters:
                - name: page
                  in: query
                  description: Page number for pagination
                  schema: {type: integer, minimum: 1, default: 1}
                - name: limit
                  in: query
                  description: Number of transactions per page
                  schema: {type: integer, minimum: 1, maximum: 100, default: 20}
                - name: user_id
                  in: query
                  description: Filter by user ID
                  schema: {type: string, pattern: '^[0-9a-fA-F]{24}$'}
                - name: wallet_id
                  in: query
                  description: Filter by wallet ID
                  schema: {type: string, pattern: '^[0-9a-fA-F]{24}$'}
                - name: transaction_type
                  in: query
                  description: Filter by transaction type
                  schema: {type: string, enum: [CREDIT, DEBIT]}
                - name: status
                  in: query
                  description: Filter by transaction status
                  schema: {type: string, enum: [PENDING, COMPLETED, FAILED, ROLLED_BACK]}
                - name: reference_type
                  in: query
                  description: Filter by reference type
                  schema: {type: string, enum: [ORDER, REFUND, PAYMENT_GATEWAY, ADMIN_ADJUSTMENT, WITHDRAWAL]}
                - name: date_from
                  in: query
                  description: Filter transactions from this date
                  schema: {type: string, format: date-time}
                - name: date_to
                  in: query
                  description: Filter transactions until this date
                  schema: {type: string, format: date-time}
                - name: min_amount
                  in: query
                  description: Minimum transaction amount
                  schema: {type: number, minimum: 0}
                - name: max_amount
                  in: query
                  description: Maximum transaction amount
                  schema: {type: number, minimum: 0}
            responses:
                '200':
                    description: Wallet transactions retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Wallet transactions retrieved successfully'}
                                    data:
                                        type: object
                                        properties:
                                            transactions:
                                                type: array
                                                items: {$ref: '#/components/schemas/WalletTransaction'}
                                            pagination:
                                                type: object
                                                properties:
                                                    current_page: {type: integer, example: 1}
                                                    total_pages: {type: integer, example: 23}
                                                    total_count: {type: integer, example: 444}
                                                    per_page: {type: integer, example: 20}
                                                    has_next_page: {type: boolean, example: true}
                                                    has_prev_page: {type: boolean, example: false}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/admin/wallets/{userId}:
        get:
            tags: [Admin Wallets]
            summary: Get specific user's wallet details
            description: Retrieve detailed wallet information for a specific user including transaction history
            security: [{BearerAuth: []}]
            parameters:
                - name: userId
                  in: path
                  required: true
                  description: User ID to get wallet details for
                  schema: {type: string, pattern: '^[0-9a-fA-F]{24}$'}
                  example: '64a1b2c3d4e5f6789abcdef1'
            responses:
                '200':
                    description: User wallet details retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'User wallet details retrieved successfully'}
                                    data:
                                        type: object
                                        properties:
                                            wallet: {$ref: '#/components/schemas/Wallet'}
                                            recent_transactions:
                                                type: array
                                                items: {$ref: '#/components/schemas/WalletTransaction'}
                                            stats:
                                                type: object
                                                properties:
                                                    total_transactions: {type: integer, example: 15}
                                                    total_credited: {type: number, example: 2500.00}
                                                    total_debited: {type: number, example: 999.25}
                                                    last_activity: {type: string, format: date-time}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/admin/wallets/{userId}/adjust:
        post:
            tags: [Admin Wallets]
            summary: Adjust user's wallet balance (credit/debit)
            description: Perform administrative wallet balance adjustment with proper audit trail
            security: [{BearerAuth: []}]
            parameters:
                - name: userId
                  in: path
                  required: true
                  description: User ID whose wallet balance to adjust
                  schema: {type: string, pattern: '^[0-9a-fA-F]{24}$'}
                  example: '64a1b2c3d4e5f6789abcdef1'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [transaction_type, amount, description]
                            properties:
                                transaction_type:
                                    type: string
                                    enum: [CREDIT, DEBIT]
                                    description: Type of adjustment
                                    example: CREDIT
                                amount:
                                    type: number
                                    format: decimal
                                    minimum: 0.01
                                    maximum: 100000
                                    description: Amount to adjust (positive number)
                                    example: 500.00
                                description:
                                    type: string
                                    minLength: 5
                                    maxLength: 250
                                    description: Reason for the adjustment
                                    example: 'Admin bonus credit for loyalty program'
                                reason:
                                    type: string
                                    enum: [BONUS, PENALTY, CORRECTION, REFUND, CASHBACK, OTHER]
                                    description: Category of adjustment
                                    example: BONUS
                                notes:
                                    type: string
                                    maxLength: 500
                                    description: Additional admin notes
                                    example: 'Monthly loyalty bonus for premium customer'
            responses:
                '201':
                    description: Wallet balance adjusted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Wallet balance adjusted successfully'}
                                    data:
                                        type: object
                                        properties:
                                            transaction: {$ref: '#/components/schemas/WalletTransaction'}
                                            wallet_balance: {type: number, example: 2000.00}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/admin/wallets/{userId}/status:
        patch:
            tags: [Admin Wallets]
            summary: Update user's wallet status
            description: Change wallet status (active/blocked/inactive) for administrative control
            security: [{BearerAuth: []}]
            parameters:
                - name: userId
                  in: path
                  required: true
                  description: User ID whose wallet status to update
                  schema: {type: string, pattern: '^[0-9a-fA-F]{24}$'}
                  example: '64a1b2c3d4e5f6789abcdef1'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [status]
                            properties:
                                status:
                                    type: string
                                    enum: [ACTIVE, BLOCKED, INACTIVE]
                                    description: New wallet status
                                    example: BLOCKED
                                reason:
                                    type: string
                                    minLength: 5
                                    maxLength: 500
                                    description: Reason for status change
                                    example: 'Suspected fraudulent activity detected'
                                notes:
                                    type: string
                                    maxLength: 1000
                                    description: Additional admin notes
                                    example: 'Account blocked pending investigation. Customer notified via email.'
            responses:
                '200':
                    description: Wallet status updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Wallet status updated successfully'}
                                    data:
                                        type: object
                                        properties:
                                            wallet: {$ref: '#/components/schemas/Wallet'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}

    # Admin Addresses
    /api/v1/admin/addresses:
        get:
            tags: [Admin Addresses]
            summary: Get all addresses (Admin)
            description: Retrieve all user addresses with filtering and pagination
            security: [{BearerAuth: []}]
            parameters:
                - name: page
                  in: query
                  schema: {type: integer, minimum: 1, default: 1}
                  description: Page number
                - name: limit  
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 100, default: 20}
                  description: Items per page
                - name: search
                  in: query
                  schema: {type: string}
                  description: Search in address details
                - name: type
                  in: query
                  schema: {type: string, enum: [HOME, OFFICE, OTHER, BILLING, SHIPPING]}
                  description: Filter by address type
                - name: is_active
                  in: query
                  schema: {type: boolean}
                  description: Filter by active status
                - name: city
                  in: query
                  schema: {type: string}
                  description: Filter by city
                - name: state
                  in: query
                  schema: {type: string}
                  description: Filter by state
                - name: country
                  in: query
                  schema: {type: string}
                  description: Filter by country
                - name: user_id
                  in: query
                  schema: {type: string}
                  description: Filter by user ID
            responses:
                '200':
                    description: Addresses retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Addresses retrieved successfully'}
                                    data:
                                        type: object
                                        properties:
                                            addresses:
                                                type: array
                                                items: {$ref: '#/components/schemas/Address'}
                                            pagination:
                                                type: object
                                                properties:
                                                    current_page: {type: integer, example: 1}
                                                    total_pages: {type: integer, example: 5}
                                                    total_items: {type: integer, example: 87}
                                                    items_per_page: {type: integer, example: 20}
                                                    has_next_page: {type: boolean, example: true}
                                                    has_prev_page: {type: boolean, example: false}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}  
                '500': {$ref: '#/components/responses/500'}

    /api/v1/admin/addresses/user/{userId}:
        get:
            tags: [Admin Addresses]
            summary: Get user addresses (Admin)
            description: Retrieve all addresses for a specific user
            security: [{BearerAuth: []}]
            parameters:
                - name: userId
                  in: path
                  required: true
                  schema: {type: string}
                  description: User ID
                - name: include_inactive
                  in: query
                  schema: {type: boolean, default: false}
                  description: Include inactive addresses
            responses:
                '200':
                    description: User addresses retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'User addresses retrieved successfully'}
                                    data:
                                        type: object
                                        properties:
                                            addresses:
                                                type: array
                                                items: {$ref: '#/components/schemas/Address'}
                                            user:
                                                type: object
                                                properties:
                                                    _id: {type: string, example: '64a1b2c3d4e5f6789abcdef1'}
                                                    name: {type: string, example: 'John Doe'}
                                                    email: {type: string, example: 'john@example.com'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/admin/addresses/{addressId}:
        get:
            tags: [Admin Addresses]
            summary: Get address details (Admin)
            description: Retrieve detailed information about a specific address
            security: [{BearerAuth: []}]
            parameters:
                - name: addressId
                  in: path
                  required: true
                  schema: {type: string}
                  description: Address ID
            responses:
                '200':
                    description: Address details retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Address retrieved successfully'}
                                    data:
                                        type: object
                                        properties:
                                            address: {$ref: '#/components/schemas/Address'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}
        put:
            tags: [Admin Addresses]
            summary: Update address (Admin)
            description: Update an address with admin privileges
            security: [{BearerAuth: []}]
            parameters:
                - name: addressId
                  in: path
                  required: true
                  schema: {type: string}
                  description: Address ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema: {$ref: '#/components/schemas/UpdateAddressRequest'}
            responses:
                '200':
                    description: Address updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Address updated successfully'}
                                    data:
                                        type: object
                                        properties:
                                            address: {$ref: '#/components/schemas/Address'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}
        delete:
            tags: [Admin Addresses]
            summary: Delete address (Admin)  
            description: Permanently delete an address (admin action)
            security: [{BearerAuth: []}]
            parameters:
                - name: addressId
                  in: path
                  required: true
                  schema: {type: string}
                  description: Address ID
            responses:
                '200':
                    description: Address deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Address deleted successfully'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}

    # Admin Payment Methods
    /api/v1/admin/payment-methods:
        get:
            tags: [Admin Payment Methods]
            summary: Get all payment methods (Admin)
            description: Retrieve all payment methods with advanced filtering and pagination
            security: [{BearerAuth: []}]
            parameters:
                - name: page
                  in: query
                  schema: {type: integer, minimum: 1, default: 1}
                  description: Page number for pagination
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 100, default: 10}
                  description: Number of items per page
                - name: method_type
                  in: query
                  schema: 
                    type: string
                    enum: [CREDIT_CARD, DEBIT_CARD, UPI, WALLET, NETBANKING]
                  description: Filter by payment method type
                - name: is_active
                  in: query
                  schema: {type: boolean}
                  description: Filter by active status
                - name: is_default
                  in: query
                  schema: {type: boolean}
                  description: Filter by default status
                - name: user_id
                  in: query
                  schema: {type: string}
                  description: Filter by user ID
                - name: search
                  in: query
                  schema: {type: string}
                  description: Search in payment method alias
                - name: start_date
                  in: query
                  schema: {type: string, format: date}
                  description: Filter by creation date (start)
                - name: end_date
                  in: query
                  schema: {type: string, format: date}
                  description: Filter by creation date (end)
                - name: sort_by
                  in: query
                  schema: 
                    type: string
                    enum: [created_at, updated_at, alias, method_type, is_active, is_default]
                    default: created_at
                  description: Sort field
                - name: sort_order
                  in: query
                  schema: {type: string, enum: [asc, desc], default: desc}
                  description: Sort order
            responses:
                '200':
                    description: Payment methods retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Payment methods retrieved successfully'}
                                    data:
                                        type: object
                                        properties:
                                            payment_methods:
                                                type: array
                                                items: {$ref: '#/components/schemas/PaymentMethod'}
                                            pagination:
                                                type: object
                                                properties:
                                                    current_page: {type: integer}
                                                    total_pages: {type: integer}
                                                    total_count: {type: integer}
                                                    per_page: {type: integer}
                                                    has_next: {type: boolean}
                                                    has_prev: {type: boolean}
                                            summary:
                                                type: object
                                                properties:
                                                    total_methods: {type: integer}
                                                    active_methods: {type: integer}
                                                    default_methods: {type: integer}
                                                    credit_cards: {type: integer}
                                                    debit_cards: {type: integer}
                                                    upi_methods: {type: integer}
                                                    wallets: {type: integer}
                                                    netbanking: {type: integer}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/admin/payment-methods/analytics:
        get:
            tags: [Admin Payment Methods]
            summary: Get payment methods analytics (Admin)
            description: Get comprehensive analytics for payment methods
            security: [{BearerAuth: []}]
            parameters:
                - name: period
                  in: query
                  schema: {type: string, enum: [7d, 30d, 90d, 1y], default: 30d}
                  description: Time period for analytics
            responses:
                '200':
                    description: Analytics retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Payment methods analytics retrieved successfully'}
                                    data:
                                        type: object
                                        properties:
                                            period: {type: string}
                                            overall_statistics:
                                                type: object
                                                properties:
                                                    total_methods: {type: integer}
                                                    active_methods: {type: integer}
                                                    inactive_methods: {type: integer}
                                                    default_methods: {type: integer}
                                            method_type_distribution:
                                                type: array
                                                items:
                                                    type: object
                                                    properties:
                                                        _id: {type: string}
                                                        count: {type: integer}
                                                        active_count: {type: integer}
                                                        default_count: {type: integer}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/admin/payment-methods/{id}:
        get:
            tags: [Admin Payment Methods]
            summary: Get payment method by ID (Admin)
            description: Retrieve detailed information about a specific payment method
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string}
                  description: Payment method ID
            responses:
                '200':
                    description: Payment method retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Payment method retrieved successfully'}
                                    data:
                                        type: object
                                        properties:
                                            payment_method: {$ref: '#/components/schemas/PaymentMethod'}
                                            user_info:
                                                type: object
                                                properties:
                                                    _id: {type: string}
                                                    name: {type: string}
                                                    email: {type: string}
                                                    phone: {type: string}
                                                    role: {type: string}
                                            usage_stats:
                                                type: object
                                                properties:
                                                    user_total_payment_methods: {type: integer}
                                                    is_user_default: {type: boolean}
                                                    method_age_days: {type: integer}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}
        put:
            tags: [Admin Payment Methods]
            summary: Update payment method (Admin)
            description: Update a payment method with admin privileges
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string}
                  description: Payment method ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                alias: {type: string, maxLength: 100, description: 'Payment method alias'}
                                is_active: {type: boolean, description: 'Whether the payment method is active'}
                                is_default: {type: boolean, description: 'Whether this is the default payment method'}
                            example:
                                alias: "Updated Credit Card"
                                is_active: true
                                is_default: false
            responses:
                '200':
                    description: Payment method updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Payment method updated successfully'}
                                    data:
                                        type: object
                                        properties:
                                            payment_method: {$ref: '#/components/schemas/PaymentMethod'}
                                            changes_made: {type: object}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}
        delete:
            tags: [Admin Payment Methods]
            summary: Delete payment method (Admin)
            description: Delete a payment method (soft delete by default, permanent if specified)
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string}
                  description: Payment method ID
                - name: permanent
                  in: query
                  schema: {type: boolean, default: false}
                  description: Whether to permanently delete (true) or soft delete (false)
            responses:
                '200':
                    description: Payment method deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Payment method deleted successfully'}
                                    data:
                                        type: object
                                        properties:
                                            deleted_payment_method:
                                                type: object
                                                properties:
                                                    id: {type: string}
                                                    method_type: {type: string}
                                                    alias: {type: string}
                                                    was_default: {type: boolean}
                                            new_default_assigned: {type: boolean}
                                            deletion_type: {type: string, enum: [soft, permanent]}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}

    # User Notifications
    /api/v1/notifications:
        get:
            tags: [User Notifications]
            summary: Get user notifications
            description: Retrieve user notifications with filtering and pagination
            security: [{BearerAuth: []}]
            parameters:
                - name: page
                  in: query
                  schema: {type: integer, minimum: 1, default: 1}
                  description: Page number for pagination
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 100, default: 20}
                  description: Number of items per page
                - name: unread_only
                  in: query
                  schema: {type: boolean}
                  description: Show only unread notifications
                - name: type
                  in: query
                  schema: 
                    type: string
                    enum: [INFO, SUCCESS, WARNING, ERROR, ORDER_UPDATE, PAYMENT_SUCCESS, PAYMENT_FAILED, SHIPPING_UPDATE, DELIVERY_CONFIRMATION, PROMOTION, SYSTEM_MAINTENANCE, SECURITY_ALERT]
                  description: Filter by notification type
                - name: priority
                  in: query
                  schema: 
                    type: string
                    enum: [LOW, MEDIUM, HIGH, URGENT]
                  description: Filter by priority level
                - name: start_date
                  in: query
                  schema: {type: string, format: date}
                  description: Filter by creation date (start)
                - name: end_date
                  in: query
                  schema: {type: string, format: date}
                  description: Filter by creation date (end)
            responses:
                '200':
                    description: Notifications retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Notifications retrieved successfully'}
                                    data:
                                        type: object
                                        properties:
                                            notifications:
                                                type: array
                                                items: {$ref: '#/components/schemas/Notification'}
                                            pagination:
                                                type: object
                                                properties:
                                                    current_page: {type: integer}
                                                    total_pages: {type: integer}
                                                    total_count: {type: integer}
                                                    per_page: {type: integer}
                                                    has_next: {type: boolean}
                                                    has_prev: {type: boolean}
                                            summary:
                                                type: object
                                                properties:
                                                    total_notifications: {type: integer}
                                                    unread_count: {type: integer}
                                                    page_unread_count: {type: integer}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/notifications/summary:
        get:
            tags: [User Notifications]
            summary: Get notification summary and counts
            description: Get comprehensive notification summary with counts and statistics
            security: [{BearerAuth: []}]
            responses:
                '200':
                    description: Notification summary retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Notification summary retrieved successfully'}
                                    data:
                                        type: object
                                        properties:
                                            summary:
                                                type: object
                                                properties:
                                                    total_notifications: {type: integer}
                                                    unread_count: {type: integer}
                                                    urgent_count: {type: integer}
                                                    high_priority_count: {type: integer}
                                                    recent_count: {type: integer}
                                            type_distribution:
                                                type: array
                                                items:
                                                    type: object
                                                    properties:
                                                        _id: {type: string}
                                                        count: {type: integer}
                                                        unread_count: {type: integer}
                                            has_urgent: {type: boolean}
                                            has_unread: {type: boolean}
                '401': {$ref: '#/components/responses/401'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/notifications/mark-read:
        put:
            tags: [User Notifications]
            summary: Mark multiple notifications as read
            description: Mark multiple notifications as read for the current user
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - notification_ids
                            properties:
                                notification_ids:
                                    type: array
                                    items:
                                        type: string
                                    description: Array of notification IDs to mark as read
                            example:
                                notification_ids: ["60d5ecb74b5b8a001f8b4567", "60d5ecb74b5b8a001f8b4568"]
            responses:
                '200':
                    description: Notifications marked as read successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: '2 notifications marked as read'}
                                    data:
                                        type: object
                                        properties:
                                            modified_count: {type: integer}
                                            matched_count: {type: integer}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/notifications/mark-all-read:
        put:
            tags: [User Notifications]
            summary: Mark all notifications as read
            description: Mark all notifications as read for the current user
            security: [{BearerAuth: []}]
            responses:
                '200':
                    description: All notifications marked as read successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'All notifications marked as read'}
                                    data:
                                        type: object
                                        properties:
                                            modified_count: {type: integer}
                '401': {$ref: '#/components/responses/401'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/notifications/{id}:
        get:
            tags: [User Notifications]
            summary: Get notification by ID
            description: Retrieve a specific notification by ID (automatically marks as read)
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string}
                  description: Notification ID
            responses:
                '200':
                    description: Notification retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Notification retrieved successfully'}
                                    data:
                                        type: object
                                        properties:
                                            notification: {$ref: '#/components/schemas/Notification'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/notifications/{id}/read:
        put:
            tags: [User Notifications]
            summary: Mark notification as read
            description: Mark a specific notification as read
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string}
                  description: Notification ID
            responses:
                '200':
                    description: Notification marked as read successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Notification marked as read'}
                                    data:
                                        type: object
                                        properties:
                                            notification: {$ref: '#/components/schemas/Notification'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}

    # Admin Notifications  
    /api/v1/admin/notifications:
        get:
            tags: [Admin - Notifications]
            summary: Get all notifications (Admin)
            description: Retrieve all notifications with advanced filtering and pagination
            security: [{BearerAuth: []}]
            parameters:
                - name: page
                  in: query
                  schema: {type: integer, minimum: 1, default: 1}
                  description: Page number for pagination
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 100, default: 20}
                  description: Number of items per page
                - name: target_type
                  in: query
                  schema: 
                    type: string
                    enum: [USER, ADMIN, BOTH]
                  description: Filter by target type
                - name: type
                  in: query
                  schema: 
                    type: string
                    enum: [INFO, SUCCESS, WARNING, ERROR, ORDER_UPDATE, PAYMENT_SUCCESS, PAYMENT_FAILED, SHIPPING_UPDATE, DELIVERY_CONFIRMATION, PROMOTION, SYSTEM_MAINTENANCE, SECURITY_ALERT, ADMIN_ALERT, USER_ACTIVITY, INVENTORY_ALERT]
                  description: Filter by notification type
                - name: status
                  in: query
                  schema: 
                    type: string
                    enum: [PENDING, SENT, DELIVERED, READ, FAILED]
                  description: Filter by status
                - name: priority
                  in: query
                  schema: 
                    type: string
                    enum: [LOW, MEDIUM, HIGH, URGENT]
                  description: Filter by priority
                - name: is_read
                  in: query
                  schema: {type: boolean}
                  description: Filter by read status
                - name: is_active
                  in: query
                  schema: {type: boolean}
                  description: Filter by active status
                - name: user_id
                  in: query
                  schema: {type: string}
                  description: Filter by user ID
                - name: is_broadcast
                  in: query
                  schema: {type: boolean}
                  description: Filter by broadcast status
                - name: search
                  in: query
                  schema: {type: string}
                  description: Search in title or message
                - name: start_date
                  in: query
                  schema: {type: string, format: date}
                  description: Filter by creation date (start)
                - name: end_date
                  in: query
                  schema: {type: string, format: date}
                  description: Filter by creation date (end)
                - name: sort_by
                  in: query
                  schema: 
                    type: string
                    enum: [created_at, updated_at, title, type, status, priority, is_read]
                    default: created_at
                  description: Sort field
                - name: sort_order
                  in: query
                  schema: {type: string, enum: [asc, desc], default: desc}
                  description: Sort order
            responses:
                '200':
                    description: Notifications retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Notifications retrieved successfully'}
                                    data:
                                        type: object
                                        properties:
                                            notifications:
                                                type: array
                                                items: {$ref: '#/components/schemas/Notification'}
                                            pagination:
                                                type: object
                                                properties:
                                                    current_page: {type: integer}
                                                    total_pages: {type: integer}
                                                    total_count: {type: integer}
                                                    per_page: {type: integer}
                                                    has_next: {type: boolean}
                                                    has_prev: {type: boolean}
                                            summary:
                                                type: object
                                                properties:
                                                    total_notifications: {type: integer}
                                                    unread_count: {type: integer}
                                                    pending_count: {type: integer}
                                                    sent_count: {type: integer}
                                                    urgent_count: {type: integer}
                                                    broadcast_count: {type: integer}
                                                    user_notifications: {type: integer}
                                                    admin_notifications: {type: integer}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '500': {$ref: '#/components/responses/500'}
        post:
            tags: [Admin - Notifications]
            summary: Create new notification (Admin)
            description: Create a new notification with admin privileges
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - title
                                - message
                                - type
                                - target_type
                            properties:
                                title: {type: string, maxLength: 200, description: 'Notification title'}
                                message: {type: string, maxLength: 1000, description: 'Notification message'}
                                type:
                                    type: string
                                    enum: [INFO, SUCCESS, WARNING, ERROR, ORDER_UPDATE, PAYMENT_SUCCESS, PAYMENT_FAILED, SHIPPING_UPDATE, DELIVERY_CONFIRMATION, PROMOTION, SYSTEM_MAINTENANCE, SECURITY_ALERT, ADMIN_ALERT, USER_ACTIVITY, INVENTORY_ALERT]
                                    description: 'Notification type'
                                target_type:
                                    type: string
                                    enum: [USER, ADMIN, BOTH]
                                    description: 'Target audience type'
                                priority:
                                    type: string
                                    enum: [LOW, MEDIUM, HIGH, URGENT]
                                    default: MEDIUM
                                    description: 'Priority level'
                                recipient:
                                    type: object
                                    properties:
                                        user_id: {type: string, description: 'Specific user ID (for targeted notifications)'}
                                        admin_id: {type: string, description: 'Specific admin ID (for targeted notifications)'}
                                        is_broadcast: {type: boolean, description: 'Whether this is a broadcast notification'}
                                        target_roles:
                                            type: array
                                            items:
                                                type: string
                                                enum: [user, admin, superadmin]
                                            description: 'Target roles for broadcast'
                                action:
                                    type: object
                                    properties:
                                        type:
                                            type: string
                                            enum: [NONE, NAVIGATE, EXTERNAL_LINK, MODAL, API_CALL]
                                        url: {type: string}
                                        params: {type: object}
                            example:
                                title: "Order Status Update"
                                message: "Your order #12345 has been shipped and is on its way!"
                                type: "ORDER_UPDATE"
                                target_type: "USER"
                                priority: "HIGH"
                                recipient:
                                    user_id: "60d5ecb74b5b8a001f8b4567"
            responses:
                '201':
                    description: Notification created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Notification created successfully'}
                                    data:
                                        type: object
                                        properties:
                                            notification: {$ref: '#/components/schemas/Notification'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/admin/notifications/analytics:
        get:
            tags: [Admin - Notifications]
            summary: Get notifications analytics (Admin)
            description: Get comprehensive analytics for notifications
            security: [{BearerAuth: []}]
            parameters:
                - name: period
                  in: query
                  schema: {type: string, enum: [7d, 30d, 90d, 1y], default: 30d}
                  description: Time period for analytics
            responses:
                '200':
                    description: Analytics retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Notification analytics retrieved successfully'}
                                    data:
                                        type: object
                                        properties:
                                            period: {type: string}
                                            overall_statistics:
                                                type: object
                                                properties:
                                                    total_notifications: {type: integer}
                                                    active_notifications: {type: integer}
                                                    unread_notifications: {type: integer}
                                                    urgent_notifications: {type: integer}
                                                    broadcast_notifications: {type: integer}
                                            type_distribution:
                                                type: array
                                                items:
                                                    type: object
                                                    properties:
                                                        _id: {type: string}
                                                        count: {type: integer}
                                                        unread_count: {type: integer}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/admin/notifications/broadcast:
        post:
            tags: [Admin - Notifications]
            summary: Create broadcast notification (Admin)
            description: Create a broadcast notification for multiple users
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - title
                                - message
                                - type
                                - target_roles
                            properties:
                                title: {type: string, maxLength: 200, description: 'Notification title'}
                                message: {type: string, maxLength: 1000, description: 'Notification message'}
                                type:
                                    type: string
                                    enum: [INFO, SUCCESS, WARNING, ERROR, ORDER_UPDATE, PAYMENT_SUCCESS, PAYMENT_FAILED, SHIPPING_UPDATE, DELIVERY_CONFIRMATION, PROMOTION, SYSTEM_MAINTENANCE, SECURITY_ALERT, ADMIN_ALERT, USER_ACTIVITY, INVENTORY_ALERT]
                                    description: 'Notification type'
                                target_roles:
                                    type: array
                                    items:
                                        type: string
                                        enum: [user, admin, superadmin]
                                    description: 'Target roles for broadcast'
                                priority:
                                    type: string
                                    enum: [LOW, MEDIUM, HIGH, URGENT]
                                    default: MEDIUM
                                    description: 'Priority level'
                                action:
                                    type: object
                                    properties:
                                        type:
                                            type: string
                                            enum: [NONE, NAVIGATE, EXTERNAL_LINK, MODAL, API_CALL]
                                        url: {type: string}
                                        params: {type: object}
                            example:
                                title: "System Maintenance Notice"
                                message: "Our system will be under maintenance from 2 AM to 4 AM UTC."
                                type: "SYSTEM_MAINTENANCE"
                                target_roles: ["user", "admin"]
                                priority: "HIGH"
            responses:
                '201':
                    description: Broadcast notification created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Broadcast notification created successfully'}
                                    data:
                                        type: object
                                        properties:
                                            notification: {$ref: '#/components/schemas/Notification'}
                                            estimated_recipients: {type: integer}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/admin/notifications/{id}:
        get:
            tags: [Admin - Notifications]
            summary: Get notification by ID (Admin)
            description: Retrieve detailed information about a specific notification
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string}
                  description: Notification ID
            responses:
                '200':
                    description: Notification retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Notification retrieved successfully'}
                                    data:
                                        type: object
                                        properties:
                                            notification: {$ref: '#/components/schemas/Notification'}
                                            related_notifications_count: {type: integer}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}
        put:
            tags: [Admin - Notifications]
            summary: Update notification (Admin)
            description: Update a notification with admin privileges
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string}
                  description: Notification ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title: {type: string, maxLength: 200, description: 'Notification title'}
                                message: {type: string, maxLength: 1000, description: 'Notification message'}
                                type:
                                    type: string
                                    enum: [INFO, SUCCESS, WARNING, ERROR, ORDER_UPDATE, PAYMENT_SUCCESS, PAYMENT_FAILED, SHIPPING_UPDATE, DELIVERY_CONFIRMATION, PROMOTION, SYSTEM_MAINTENANCE, SECURITY_ALERT, ADMIN_ALERT, USER_ACTIVITY, INVENTORY_ALERT]
                                    description: 'Notification type'
                                status:
                                    type: string
                                    enum: [PENDING, SENT, DELIVERED, READ, FAILED]
                                    description: 'Notification status'
                                priority:
                                    type: string
                                    enum: [LOW, MEDIUM, HIGH, URGENT]
                                    description: 'Priority level'
                                is_active: {type: boolean, description: 'Whether the notification is active'}
                            example:
                                title: "Updated Order Status"
                                priority: "URGENT"
                                is_active: true
            responses:
                '200':
                    description: Notification updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Notification updated successfully'}
                                    data:
                                        type: object
                                        properties:
                                            notification: {$ref: '#/components/schemas/Notification'}
                                            changes_made: {type: object}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}
        delete:
            tags: [Admin - Notifications]
            summary: Delete notification (Admin)
            description: Delete a notification (soft delete by default, permanent if specified)
            security: [{BearerAuth: []}]
            parameters:
                - name: id
                  in: path
                  required: true
                  schema: {type: string}
                  description: Notification ID
                - name: permanent
                  in: query
                  schema: {type: boolean, default: false}
                  description: Whether to permanently delete (true) or soft delete (false)
            responses:
                '200':
                    description: Notification deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Notification deleted successfully'}
                                    data:
                                        type: object
                                        properties:
                                            deleted_notification:
                                                type: object
                                                properties:
                                                    id: {type: string}
                                                    title: {type: string}
                                                    type: {type: string}
                                                    target_type: {type: string}
                                            deletion_type: {type: string, enum: [soft, permanent]}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}

    # Users
    /api/v1/users/profile:
        get:
            tags: [Users]
            summary: Get user profile
            security: [{BearerAuth: []}]
            responses:
                '200': {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/User'}}}}
                '401': {description: Unauthorized}
        put:
            tags: [Users]
            summary: Update user profile
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema: {$ref: '#/components/schemas/UserUpdateRequest'}
            responses:
                '200': {description: Profile updated, content: {application/json: {schema: {$ref: '#/components/schemas/User'}}}}
                '401': {description: Unauthorized}

    # User Reviews
    /api/v1/user/reviews:
        post:
            tags: [User Reviews]
            summary: Submit a product review
            description: Submit a review for a product variant
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [product_variant_id, rating, title, review_text]
                            properties:
                                product_variant_id: {type: string, description: "Product variant ID"}
                                rating: {type: integer, minimum: 1, maximum: 5, description: "Rating from 1-5 stars"}
                                title: {type: string, maxLength: 100, description: "Review title"}
                                review_text: {type: string, maxLength: 2000, description: "Review content"}
                                reviewer_display_name: {type: string, maxLength: 50, description: "Display name for reviewer"}
                                reviewer_location: {type: string, maxLength: 100, description: "Reviewer location"}
                                image_urls: {type: array, items: {type: string}, description: "Review image URLs"}
                                video_url: {type: string, description: "Review video URL"}
            responses:
                '201':
                    description: Review submitted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                                    data: {$ref: '#/components/schemas/ProductReview'}
                '400': {description: Validation errors or duplicate review}
                '401': {description: Unauthorized}
                '404': {description: Product variant not found}

    /api/v1/user/reviews/my:
        get:
            tags: [User Reviews]
            summary: Get user's own reviews
            description: Retrieve paginated list of user's reviews
            security: [{BearerAuth: []}]
            parameters:
                - name: page
                  in: query
                  schema: {type: integer, minimum: 1, default: 1}
                  description: Page number for pagination
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 50, default: 10}
                  description: Number of reviews per page
                - name: status
                  in: query
                  schema: {type: string, enum: [PENDING_APPROVAL, APPROVED, REJECTED, FLAGGED]}
                  description: Filter by review status
                - name: sort_by
                  in: query
                  schema: {type: string, enum: [createdAt, updatedAt, rating], default: createdAt}
                  description: Field to sort by
                - name: sort_order
                  in: query
                  schema: {type: string, enum: [asc, desc], default: desc}
                  description: Sort order
            responses:
                '200':
                    description: Reviews retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {type: array, items: {$ref: '#/components/schemas/ProductReview'}}
                                    pagination: {type: object}
                '401': {description: Unauthorized}

    /api/v1/user/reviews/{reviewId}:
        patch:
            tags: [User Reviews]
            summary: Update user's own review
            description: Update user's own review (only pending or approved reviews)
            security: [{BearerAuth: []}]
            parameters:
                - name: reviewId
                  in: path
                  required: true
                  schema: {type: string}
                  description: Review ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                rating: {type: integer, minimum: 1, maximum: 5}
                                title: {type: string, maxLength: 100}
                                review_text: {type: string, maxLength: 2000}
                                reviewer_display_name: {type: string, maxLength: 50}
                                reviewer_location: {type: string, maxLength: 100}
                                image_urls: {type: array, items: {type: string}}
                                video_url: {type: string}
            responses:
                '200':
                    description: Review updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                                    data: {$ref: '#/components/schemas/ProductReview'}
                '400': {description: Validation errors}
                '401': {description: Unauthorized}
                '403': {description: Cannot edit this review}
                '404': {description: Review not found}

        delete:
            tags: [User Reviews]
            summary: Delete user's own review
            description: Delete user's own review
            security: [{BearerAuth: []}]
            parameters:
                - name: reviewId
                  in: path
                  required: true
                  schema: {type: string}
                  description: Review ID
            responses:
                '200':
                    description: Review deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                '401': {description: Unauthorized}
                '403': {description: Cannot delete this review}
                '404': {description: Review not found}

    /api/v1/user/reviews/{reviewId}/vote:
        post:
            tags: [User Reviews]
            summary: Vote on a review
            description: Vote helpful or unhelpful on a review
            security: [{BearerAuth: []}]
            parameters:
                - name: reviewId
                  in: path
                  required: true
                  schema: {type: string}
                  description: Review ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [vote_type]
                            properties:
                                vote_type: {type: string, enum: [helpful, unhelpful], description: "Vote type"}
            responses:
                '200':
                    description: Vote recorded successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                                    data:
                                        type: object
                                        properties:
                                            helpful_votes: {type: integer}
                                            unhelpful_votes: {type: integer}
                                            helpful_percentage: {type: number}
                '400': {description: Invalid vote type or cannot vote on own review}
                '401': {description: Unauthorized}
                '404': {description: Review not found}

    /api/v1/user/reviews/{reviewId}/report:
        post:
            tags: [User Reviews]
            summary: Report a review
            description: Report a review for inappropriate content
            security: [{BearerAuth: []}]
            parameters:
                - name: reviewId
                  in: path
                  required: true
                  schema: {type: string}
                  description: Review ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [reason]
                            properties:
                                reason: {type: string, enum: [SPAM, INAPPROPRIATE, FAKE, OFFENSIVE, OTHER], description: "Report reason"}
                                custom_reason: {type: string, maxLength: 500, description: "Custom reason when reason is OTHER"}
            responses:
                '201':
                    description: Review reported successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string}
                '400': {description: Already reported or cannot report own review}
                '401': {description: Unauthorized}
                '404': {description: Review not found}
    /api/v1/admin/users:
        get:
            tags: [Admin Users]
            summary: Get all users (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
                - {name: role, in: query, schema: {type: string, enum: [user, admin]}}
                - {name: isActive, in: query, schema: {type: boolean}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {users: {type: array, items: {$ref: '#/components/schemas/User'}}, pagination: {type: object}}}}}}
                '401': {description: Unauthorized}
        post:
            tags: [Admin Users]
            summary: Create new user (admin)
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema: {$ref: '#/components/schemas/UserCreateRequest'}
            responses:
                '201': {description: User created, content: {application/json: {schema: {$ref: '#/components/schemas/User'}}}}
                '401': {description: Unauthorized}
    /api/v1/admin/users/{id}:
        get:
            tags: [Admin Users]
            summary: Get user by ID (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/User'}}}}
                '404': {description: User not found}
        put:
            tags: [Admin Users]
            summary: Update user (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema: {$ref: '#/components/schemas/UserUpdateRequest'}
            responses:
                '200': {description: User updated, content: {application/json: {schema: {$ref: '#/components/schemas/User'}}}}
                '404': {description: User not found}
        delete:
            tags: [Admin Users]
            summary: Delete user (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: User deleted}
                '404': {description: User not found}

    # Platforms
    /api/v1/platforms:
        get:
            tags: [Platforms]
            summary: Get all platforms
            parameters:
                - in: query
                  name: page
                  schema:
                      type: integer
                      minimum: 1
                      default: 1
                  description: Page number for pagination
                - in: query
                  name: limit
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 50
                      default: 10
                  description: Number of platforms per page
                - in: query
                  name: is_active
                  schema:
                      type: boolean
                  description: Filter by active status
                - in: query
                  name: search
                  schema:
                      type: string
                      maxLength: 100
                  description: Search term for name or description
                - in: query
                  name: sort
                  schema:
                      type: string
                      enum: [name, createdAt, updatedAt]
                      default: createdAt
                  description: Field to sort by
                - in: query
                  name: order
                  schema:
                      type: string
                      enum: [asc, desc]
                      default: desc
                  description: Sort order
            responses:
                '200':
                    description: Platforms retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        example: true
                                    data:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Platform'
                                    pagination:
                                        type: object
                                        properties:
                                            currentPage:
                                                type: integer
                                                description: Current page number
                                            totalPages:
                                                type: integer
                                                description: Total number of pages
                                            totalCount:
                                                type: integer
                                                description: Total number of platforms
                                            limit:
                                                type: integer
                                                description: Number of platforms per page
                                            hasNextPage:
                                                type: boolean
                                                description: Whether there is a next page
                                            hasPrevPage:
                                                type: boolean
                                                description: Whether there is a previous page
                                    filters:
                                        type: object
                                        properties:
                                            is_active:
                                                type: boolean
                                                nullable: true
                                                description: Applied active status filter
                                            search:
                                                type: string
                                                nullable: true
                                                description: Applied search term
                                example:
                                    success: true
                                    data:
                                        - _id: "674b1234567890abcdef1234"
                                          name: "Amazon"
                                          slug: "amazon"
                                          description: "Amazon marketplace platform"
                                          base_url: "https://www.amazon.com"
                                          logo_url: "https://logo.clearbit.com/amazon.com"
                                          is_active: true
                                          createdAt: "2024-11-30T12:00:00.000Z"
                                          updatedAt: "2024-11-30T12:00:00.000Z"
                                    pagination:
                                        currentPage: 1
                                        totalPages: 1
                                        totalCount: 5
                                        limit: 10
                                        hasNextPage: false
                                        hasPrevPage: false
                                    filters:
                                        is_active: null
                                        search: null
                '400':
                    description: Bad request - invalid query parameters
                '401':
                    description: Unauthorized - Admin access required
                '500':
                    description: Internal server error
        post:
            tags: [Platforms]
            summary: Create new platform
            security:
                - BearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PlatformCreateRequest'
            responses:
                '201':
                    description: Platform created successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Platform'
                '400':
                    description: Validation error
                '401':
                    description: Unauthorized
    /api/v1/platforms/{id}:
        get:
            tags: [Platforms]
            summary: Get platform by ID
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Platform ID
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Platform'
                '404':
                    description: Platform not found
        put:
            tags: [Platforms]
            summary: Update platform
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Platform ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PlatformUpdateRequest'
            responses:
                '200':
                    description: Platform updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Platform'
                '404':
                    description: Platform not found
                '401':
                    description: Unauthorized
        delete:
            tags: [Platforms]
            summary: Delete platform
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Platform ID
            responses:
                '200':
                    description: Platform deleted successfully
                '404':
                    description: Platform not found
                '401':
                    description: Unauthorized

    # Purchases
    /api/v1/purchases:
        get:
            tags: [Purchases]
            summary: Get all purchases
            security:
                - BearerAuth: []
            parameters:
                - name: page
                  in: query
                  schema:
                      type: integer
                      default: 1
                  description: Page number
                - name: limit
                  in: query
                  schema:
                      type: integer
                      default: 10
                  description: Items per page
                - name: supplier_id
                  in: query
                  schema:
                      type: string
                  description: Filter by supplier ID
                - name: status
                  in: query
                  schema:
                      type: string
                      enum: [pending, approved, rejected, completed]
                  description: Filter by status
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Purchase'
                                    total:
                                        type: integer
                                        description: Total number of purchases
                                    page:
                                        type: integer
                                        description: Current page
                                    totalPages:
                                        type: integer
                                        description: Total number of pages
                '401':
                    description: Unauthorized
        post:
            tags: [Purchases]
            summary: Create new purchase order
            security:
                - BearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PurchaseCreateRequest'
            responses:
                '201':
                    description: Purchase order created successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Purchase'
                '400':
                    description: Validation error
                '401':
                    description: Unauthorized
    /api/v1/purchases/{id}:
        get:
            tags: [Purchases]
            summary: Get purchase by ID
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Purchase ID
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Purchase'
                '404':
                    description: Purchase not found
                '401':
                    description: Unauthorized
        put:
            tags: [Purchases]
            summary: Update purchase order
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Purchase ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PurchaseUpdateRequest'
            responses:
                '200':
                    description: Purchase order updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Purchase'
                '404':
                    description: Purchase not found
                '401':
                    description: Unauthorized
        delete:
            tags: [Purchases]
            summary: Delete purchase order
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Purchase ID
            responses:
                '200':
                    description: Purchase order deleted successfully
                '404':
                    description: Purchase not found
                '401':
                    description: Unauthorized

    # Suppliers
    /api/v1/suppliers:
        get:
            tags: [Suppliers]
            summary: Get all suppliers
            security:
                - BearerAuth: []
            parameters:
                - name: page
                  in: query
                  schema:
                      type: integer
                      default: 1
                  description: Page number
                - name: limit
                  in: query
                  schema:
                      type: integer
                      default: 10
                  description: Items per page
                - name: search
                  in: query
                  schema:
                      type: string
                  description: Search by name or business name
                - name: is_active
                  in: query
                  schema:
                      type: boolean
                  description: Filter by active status
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            allOf:
                                                - $ref: '#/components/schemas/Supplier'
                                                - type: object
                                                  properties:
                                                      contact_numbers:
                                                          type: array
                                                          items:
                                                              $ref: '#/components/schemas/SupplierContactNumber'
                                    total:
                                        type: integer
                                        description: Total number of suppliers
                                    page:
                                        type: integer
                                        description: Current page
                                    totalPages:
                                        type: integer
                                        description: Total number of pages
                '401':
                    description: Unauthorized
        post:
            tags: [Suppliers]
            summary: Create new supplier
            security:
                - BearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SupplierCreateRequest'
            responses:
                '201':
                    description: Supplier created successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Supplier'
                '400':
                    description: Validation error
                '401':
                    description: Unauthorized
    /api/v1/suppliers/{idOrSlug}:
        get:
            tags: [Suppliers]
            summary: Get supplier by ID or slug
            security:
                - BearerAuth: []
            parameters:
                - name: idOrSlug
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Supplier ID or slug
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: '#/components/schemas/Supplier'
                                    - type: object
                                      properties:
                                          contact_numbers:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/SupplierContactNumber'
                '404':
                    description: Supplier not found
                '401':
                    description: Unauthorized
        put:
            tags: [Suppliers]
            summary: Update supplier
            security:
                - BearerAuth: []
            parameters:
                - name: idOrSlug
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Supplier ID or slug
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SupplierUpdateRequest'
            responses:
                '200':
                    description: Supplier updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Supplier'
                '404':
                    description: Supplier not found
                '401':
                    description: Unauthorized
        delete:
            tags: [Suppliers]
            summary: Delete supplier
            security:
                - BearerAuth: []
            parameters:
                - name: idOrSlug
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Supplier ID or slug
            responses:
                '200':
                    description: Supplier deleted successfully
                '404':
                    description: Supplier not found
                '401':
                    description: Unauthorized

    # Supplier Contact Numbers
    /api/v1/supplier-contact-numbers:
        get:
            tags: [Supplier Contact Numbers]
            summary: Get all supplier contact numbers
            description: 'Access Level: Requires authentication and admin privileges'
            security:
                - BearerAuth: []
            parameters:
                - name: page
                  in: query
                  schema:
                      type: integer
                      default: 1
                  description: Page number
                - name: limit
                  in: query
                  schema:
                      type: integer
                      default: 10
                  description: Items per page
                - name: supplier_id
                  in: query
                  schema:
                      type: string
                  description: Filter by supplier ID
                - name: contact_type
                  in: query
                  schema:
                      type: string
                      enum: [primary, secondary, emergency, fax]
                  description: Filter by contact type
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/SupplierContactNumber'
                                    total:
                                        type: integer
                                        description: Total number of contact numbers
                                    page:
                                        type: integer
                                        description: Current page
                                    totalPages:
                                        type: integer
                                        description: Total number of pages
                '401':
                    description: Unauthorized - Valid JWT token required
                '403':
                    description: Forbidden - Admin privileges required
        post:
            tags: [Supplier Contact Numbers]
            summary: Add new contact number for supplier
            description: 'Access Level: Requires authentication and admin privileges'
            security:
                - BearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SupplierContactNumberCreateRequest'
            responses:
                '201':
                    description: Contact number added successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SupplierContactNumber'
                '400':
                    description: Validation error
                '401':
                    description: Unauthorized - Valid JWT token required
                '403':
                    description: Forbidden - Admin privileges required
    /api/v1/supplier-contact-numbers/{id}:
        get:
            tags: [Supplier Contact Numbers]
            summary: Get contact number by ID
            description: 'Access Level: Requires authentication and admin privileges'
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Contact number ID
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SupplierContactNumber'
                '404':
                    description: Contact number not found
                '401':
                    description: Unauthorized - Valid JWT token required
                '403':
                    description: Forbidden - Admin privileges required
        put:
            tags: [Supplier Contact Numbers]
            summary: Update contact number
            description: 'Access Level: Requires authentication and admin privileges'
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Contact number ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SupplierContactNumberUpdateRequest'
            responses:
                '200':
                    description: Contact number updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SupplierContactNumber'
                '404':
                    description: Contact number not found
                '401':
                    description: Unauthorized - Valid JWT token required
                '403':
                    description: Forbidden - Admin privileges required
        delete:
            tags: [Supplier Contact Numbers]
            summary: Delete contact number
            description: 'Access Level: Requires authentication and admin privileges'
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Contact number ID
            responses:
                '200':
                    description: Contact number deleted successfully
                '404':
                    description: Contact number not found
                '401':
                    description: Unauthorized - Valid JWT token required
                '403':
                    description: Forbidden - Admin privileges required
    /api/v1/admin/dashboard:
        get:
            summary: 'Get admin dashboard data'
            description: 'Retrieve administrative dashboard statistics and data'
            tags: [Admin]
            security: [{bearerAuth: []}]
            responses: {'200': {description: 'Dashboard data retrieved successfully'}, '401': {description: 'Admin authentication required'}}
    /api/v1/admin/products:
        get:
            tags: [Admin Products]
            summary: Get all products (admin view)
            description: Retrieve all products with admin-level information
            security: [{BearerAuth: []}]
            parameters:
                - name: page
                  in: query
                  schema: {type: integer, minimum: 1, default: 1}
                  description: Page number for pagination
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 100, default: 20}
                  description: Number of products per page
            responses:
                '200':
                    description: Products retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {type: array, items: {$ref: '#/components/schemas/Product'}}
                                    pagination: {type: object}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

        post:
            summary: 'Create new product'
            description: 'Create a new product in the system'
            tags: [Admin Products]
            security: [{BearerAuth: []}]
            requestBody: 
                required: true
                content: 
                    application/json: 
                        schema: 
                            type: object
                            required: [name, description, category_id]
                            properties: 
                                name: {type: string, description: 'Product name', maxLength: 255}
                                description: {type: string, description: 'Product description', maxLength: 5000}
                                category_id: {type: string, description: 'Product category ID'}
                                brand: {type: string, description: 'Product brand', maxLength: 100}
                                is_active: {type: boolean, default: true, description: 'Product active status'}
                                meta_title: {type: string, description: 'SEO meta title', maxLength: 60}
                                meta_description: {type: string, description: 'SEO meta description', maxLength: 160}
            responses: 
                '201': {description: 'Product created successfully'}
                '400': {description: 'Invalid input data'}
                '401': {description: 'Unauthorized'}
                '403': {description: 'Admin access required'}

    # Homepage Product Collections
    /api/v1/products/featured:
        get:
            tags: [Products]
            summary: Get featured products
            description: Retrieve featured products for homepage display based on high scores and ratings
            parameters:
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 20, default: 8}
                  description: Number of featured products to return
            responses:
                '200':
                    description: Featured products retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Featured products retrieved successfully"}
                                    count: {type: integer, example: 8}
                                    data:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Product'
                '500': {$ref: '#/components/responses/ServerError'}

    /api/v1/products/bestsellers:
        get:
            tags: [Products]
            summary: Get best selling products
            description: Retrieve best selling products based on reviews and ratings
            parameters:
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 20, default: 8}
                  description: Number of bestseller products to return
                - name: period
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 365, default: 30}
                  description: Period in days to consider for bestsellers
            responses:
                '200':
                    description: Best selling products retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Best selling products retrieved successfully"}
                                    count: {type: integer, example: 8}
                                    data:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Product'
                '500': {$ref: '#/components/responses/ServerError'}

    /api/v1/products/deals:
        get:
            tags: [Products]
            summary: Get products on deal
            description: Retrieve products currently on sale or special deals
            parameters:
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 20, default: 8}
                  description: Number of deal products to return
            responses:
                '200':
                    description: Deal products retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Deal products retrieved successfully"}
                                    count: {type: integer, example: 8}
                                    data:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Product'
                '500': {$ref: '#/components/responses/ServerError'}

    /api/v1/products/new:
        get:
            tags: [Products]
            summary: Get new/latest products
            description: Retrieve recently added products for homepage display
            parameters:
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 20, default: 8}
                  description: Number of new products to return
                - name: days
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 90, default: 30}
                  description: Number of days to consider as "new"
            responses:
                '200':
                    description: New products retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "New products retrieved successfully"}
                                    count: {type: integer, example: 8}
                                    data:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Product'
                '500': {$ref: '#/components/responses/ServerError'}

    /api/v1/products/trending:
        get:
            tags: [Products]
            summary: Get trending products
            description: Retrieve currently trending products based on recent activity
            parameters:
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 20, default: 8}
                  description: Number of trending products to return
            responses:
                '200':
                    description: Trending products retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Trending products retrieved successfully"}
                                    count: {type: integer, example: 8}
                                    data:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Product'
                '500': {$ref: '#/components/responses/ServerError'}

    /api/v1/products/recommended:
        get:
            tags: [Products]
            summary: Get recommended products
            description: Retrieve recommended products based on ratings and category
            parameters:
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 20, default: 8}
                  description: Number of recommended products to return
                - name: category
                  in: query
                  schema: {type: string}
                  description: Category ID to filter recommendations
            responses:
                '200':
                    description: Recommended products retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Recommended products retrieved successfully"}
                                    count: {type: integer, example: 8}
                                    data:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Product'
                '500': {$ref: '#/components/responses/ServerError'}

    /api/v1/products/homepage:
        get:
            tags: [Products]
            summary: Get all homepage product collections
            description: Retrieve all product collections for homepage in a single request (featured, bestsellers, deals, new, trending)
            parameters:
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 20, default: 8}
                  description: Number of products per collection
            responses:
                '200':
                    description: Homepage data retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: "Homepage data retrieved successfully"}
                                    data:
                                        type: object
                                        properties:
                                            featured:
                                                type: object
                                                properties:
                                                    title: {type: string, example: "Featured Products"}
                                                    count: {type: integer, example: 8}
                                                    products:
                                                        type: array
                                                        items:
                                                            $ref: '#/components/schemas/Product'
                                            bestsellers:
                                                type: object
                                                properties:
                                                    title: {type: string, example: "Best Sellers"}
                                                    count: {type: integer, example: 8}
                                                    products:
                                                        type: array
                                                        items:
                                                            $ref: '#/components/schemas/Product'
                                            deals:
                                                type: object
                                                properties:
                                                    title: {type: string, example: "Special Deals"}
                                                    count: {type: integer, example: 8}
                                                    products:
                                                        type: array
                                                        items:
                                                            $ref: '#/components/schemas/Product'
                                            new:
                                                type: object
                                                properties:
                                                    title: {type: string, example: "New Arrivals"}
                                                    count: {type: integer, example: 8}
                                                    products:
                                                        type: array
                                                        items:
                                                            $ref: '#/components/schemas/Product'
                                            trending:
                                                type: object
                                                properties:
                                                    title: {type: string, example: "Trending Now"}
                                                    count: {type: integer, example: 8}
                                                    products:
                                                        type: array
                                                        items:
                                                            $ref: '#/components/schemas/Product'
                '500': {$ref: '#/components/responses/ServerError'}

    /api/v1/products:
        get:
            tags: [Products]
            summary: Get all products (public)
            description: Retrieve all active products for public display
            parameters:
                - name: page
                  in: query
                  schema: {type: integer, minimum: 1, default: 1}
                  description: Page number for pagination
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 100, default: 10}
                  description: Number of products per page
                - name: category_id
                  in: query
                  schema: {type: string}
                  description: Filter by category ID(s). Supports single ID or comma-separated multiple IDs
                  example: "507f1f77bcf86cd799439011,507f1f77bcf86cd799439012"
                - name: brand_id
                  in: query
                  schema: {type: string}
                  description: Filter by brand ID(s). Supports single ID or comma-separated multiple IDs
                  example: "507f1f77bcf86cd799439013,507f1f77bcf86cd799439014"
                - name: is_active
                  in: query
                  schema: {type: string, enum: [true, false]}
                  description: Filter by product active status (admin only when include_inactive=true)
                - name: search
                  in: query
                  schema: {type: string, maxLength: 100}
                  description: Search in product names and descriptions
                - name: sort
                  in: query
                  schema: {type: string, enum: [name, createdAt, score, updatedAt], default: createdAt}
                  description: Field to sort by
                - name: order
                  in: query
                  schema: {type: string, enum: [asc, desc], default: desc}
                  description: Sort order
                - name: include_inactive
                  in: query
                  schema: {type: string, enum: [true, false], default: false}
                  description: Include inactive products (admin only)
            responses:
                '200':
                    description: Products retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {type: array, items: {$ref: '#/components/schemas/Product'}}
                                    pagination: {type: object}

    /api/v1/products/stats:
        get:
            tags: [Admin Products]
            summary: Get product statistics
            description: Get aggregated product statistics for admin dashboard
            security: [{BearerAuth: []}]
            responses:
                '200':
                    description: Product statistics retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {type: object}
                '401': {description: Unauthorized}
                '403': {description: Admin access required}

    /api/v1/products/{identifier}:
        get:
            tags: [Products]
            summary: Get product by ID or slug
            description: Retrieve a single product by ID or slug
            parameters:
                - name: identifier
                  in: path
                  required: true
                  schema: {type: string}
                  description: Product ID or slug
            responses:
                '200':
                    description: Product retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {$ref: '#/components/schemas/Product'}
                '404': {description: Product not found}

    '/api/v1/admin/products/{id}':
        patch:
            summary: 'Update product'
            description: 'Update an existing product'
            tags: [Admin Products]
            security: [{BearerAuth: []}]
            parameters: 
                - in: path
                  name: id
                  required: true
                  schema: {type: string}
                  description: 'Product ID'
            requestBody: 
                required: true
                content: 
                    application/json: 
                        schema: 
                            type: object
                            properties: 
                                name: {type: string, maxLength: 255}
                                description: {type: string, maxLength: 5000}
                                category_id: {type: string}
                                brand: {type: string, maxLength: 100}
                                is_active: {type: boolean}
                                meta_title: {type: string, maxLength: 60}
                                meta_description: {type: string, maxLength: 160}
            responses: 
                '200': {description: 'Product updated successfully'}
                '400': {description: 'Invalid input data'}
                '401': {description: 'Unauthorized'}
                '403': {description: 'Admin access required'}
                '404': {description: 'Product not found'}

        delete:
            summary: 'Delete product'
            description: 'Delete a product from the system'
            tags: [Admin Products]
            security: [{BearerAuth: []}]
            parameters: 
                - in: path
                  name: id
                  required: true
                  schema: {type: string}
                  description: 'Product ID'
                - in: query
                  name: permanent
                  schema: {type: boolean, default: false}
                  description: 'Whether to permanently delete the product'
            responses: 
                '200': {description: 'Product deleted successfully'}
                '401': {description: 'Unauthorized'}
                '403': {description: 'Admin access required'}
                '404': {description: 'Product not found'}
    '/api/v1/admin/users/{userId}/manage':
        post:
            summary: 'Manage user account'
            description: 'Perform administrative actions on user accounts'
            tags: [Admin]
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: userId, required: true, schema: {type: string}, description: 'User ID'}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {action: {type: string, enum: [activate, deactivate, suspend, delete], description: 'Action to perform'}, reason: {type: string, description: 'Reason for the action'}}}}}}
            responses: {'200': {description: 'User account managed successfully'}, '401': {description: 'Admin authentication required'}, '404': {description: 'User not found'}}
    /api/v1/admin/settings:
        put:
            summary: 'Update system settings'
            description: 'Update global system configuration'
            tags: [Admin]
            security: [{bearerAuth: []}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {settings: {type: object, description: 'System settings to update'}}}}}}
            responses: {'200': {description: 'System settings updated successfully'}, '401': {description: 'Admin authentication required'}}
    /api/v1/admin/reports/sales:
        get:
            summary: 'Export sales data'
            description: 'Export sales data for reporting purposes'
            tags: [Admin]
            security: [{bearerAuth: []}]
            parameters: [{in: query, name: startDate, schema: {type: string, format: date}, description: 'Start date for the report'}, {in: query, name: endDate, schema: {type: string, format: date}, description: 'End date for the report'}, {in: query, name: format, schema: {type: string, enum: [csv, xlsx, json]}, description: 'Export format'}]
            responses: {'200': {description: 'Sales data exported successfully'}, '401': {description: 'Admin authentication required'}}
    
    # Inventory Management
    /api/v1/inventory:
        post:
            summary: 'Create a new inventory record'
            description: 'Create a new inventory record for a base unit product variant'
            tags: [Inventory]
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [product_variant_id]
                            properties:
                                product_variant_id: {type: string, description: 'ID of the base unit product variant'}
                                stock_quantity: {type: number, minimum: 0, default: 0, description: 'Initial stock quantity'}
                                min_stock_level: {type: number, minimum: 0, default: 0, description: 'Minimum stock threshold'}
                                location: {type: string, maxLength: 200, description: 'Physical storage location'}
                                notes: {type: string, maxLength: 1000, description: 'Internal notes'}
            responses:
                '201': {description: 'Inventory record created successfully', content: {application/json: {schema: {$ref: '#/components/schemas/Inventory'}}}}
                '400': {description: 'Validation error or pack variant provided'}
                '401': {description: 'Unauthorized - admin access required'}
                '500': {description: 'Internal server error'}
        get:
            summary: 'Get all inventory records'
            description: 'Retrieve all inventory records with pagination and filtering'
            tags: [Inventory]
            security: [{BearerAuth: []}]
            parameters:
                - {in: query, name: page, schema: {type: integer, minimum: 1, default: 1}, description: 'Page number for pagination'}
                - {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 100, default: 10}, description: 'Number of items per page'}
                - {in: query, name: is_active, schema: {type: boolean}, description: 'Filter by active status'}
                - {in: query, name: stock_status, schema: {type: string, enum: [out_of_stock, low_stock, in_stock]}, description: 'Filter by stock status'}
                - {in: query, name: location, schema: {type: string}, description: 'Filter by location (partial match)'}
                - {in: query, name: product_id, schema: {type: string}, description: 'Filter by product ID'}
                - {in: query, name: search, schema: {type: string}, description: 'Search across SKU, location, and notes'}
                - {in: query, name: include_computed_packs, schema: {type: boolean, default: false}, description: 'Include computed stock for pack variants'}
                - {in: query, name: sort_by, schema: {type: string, enum: [createdAt, updatedAt, stock_quantity, min_stock_level, last_restock_date], default: createdAt}, description: 'Field to sort by'}
                - {in: query, name: sort_order, schema: {type: string, enum: [asc, desc], default: desc}, description: 'Sort order'}
            responses:
                '200': {description: 'Inventory records retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/Inventory'}}, pagination: {type: object}}}}}}
                '401': {description: 'Unauthorized - admin access required'}
                '500': {description: 'Internal server error'}
    /api/v1/inventory/variant/{productVariantId}:
        get:
            summary: 'Get inventory by product variant ID'
            description: 'Get inventory record by product variant ID with computed stock'
            tags: [Inventory]
            security: [{BearerAuth: []}]
            parameters:
                - {in: path, name: productVariantId, required: true, schema: {type: string}, description: 'Product variant ID (base unit or pack)'}
            responses:
                '200': {description: 'Inventory record retrieved successfully with computed stock', content: {application/json: {schema: {$ref: '#/components/schemas/Inventory'}}}}
                '400': {description: 'Invalid product variant ID'}
                '401': {description: 'Unauthorized - admin access required'}
                '404': {description: 'Inventory record not found'}
                '500': {description: 'Internal server error'}
    /api/v1/inventory/{id}:
        patch:
            summary: 'Update inventory record'
            description: 'Update an existing inventory record'
            tags: [Inventory]
            security: [{BearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Inventory record ID'}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                stock_quantity: {type: number, minimum: 0, description: 'Updated stock quantity'}
                                min_stock_level: {type: number, minimum: 0, description: 'Updated minimum stock level'}
                                location: {type: string, maxLength: 200, description: 'Updated storage location'}
                                notes: {type: string, maxLength: 1000, description: 'Updated notes'}
                                is_active: {type: boolean, description: 'Updated active status'}
            responses:
                '200': {description: 'Inventory record updated successfully', content: {application/json: {schema: {$ref: '#/components/schemas/Inventory'}}}}
                '400': {description: 'Validation error or invalid inventory ID'}
                '401': {description: 'Unauthorized - admin access required'}
                '404': {description: 'Inventory record not found'}
                '500': {description: 'Internal server error'}
        delete:
            summary: 'Delete inventory record'
            description: 'Delete inventory record (soft delete)'
            tags: [Inventory]
            security: [{BearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Inventory record ID'}
            responses:
                '204': {description: 'Inventory record deleted successfully'}
                '400': {description: 'Invalid inventory ID'}
                '401': {description: 'Unauthorized - admin access required'}
                '404': {description: 'Inventory record not found'}
                '500': {description: 'Internal server error'}
    
    # Listing Management
    /api/v1/listings:
        post:
            summary: 'Create a new listing'
            description: 'Create a new product variant listing for a specific platform'
            tags: [Listings]
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [product_variant_id, platform_id]
                            properties:
                                product_variant_id: {type: string, description: 'ID of the product variant'}
                                platform_id: {type: string, description: 'ID of the platform'}
                                platform_sku: {type: string, maxLength: 100, description: 'Platform-specific SKU'}
                                platform_product_id: {type: string, maxLength: 150, description: 'Platform-specific product ID'}
                                listing_status: {type: string, enum: [Draft, 'Pending Review', Live, Rejected, Deactivated], default: Draft, description: 'Current status of the listing'}
                                platform_price: {type: number, minimum: 0, description: 'Price on the platform'}
                                platform_commission_percentage: {type: number, minimum: 0, maximum: 100, description: 'Commission percentage for this variant'}
                                platform_fixed_fee: {type: number, minimum: 0, description: 'Fixed fee per sale'}
                                platform_shipping_fee: {type: number, minimum: 0, description: 'Shipping fee charged by platform'}
                                platform_specific_data: {type: object, description: 'Platform-specific attributes'}
                                is_active_on_platform: {type: boolean, default: true, description: 'Whether listing is active on platform'}
            responses:
                '201': {description: 'Listing created successfully', content: {application/json: {schema: {$ref: '#/components/schemas/Listing'}}}}
                '400': {description: 'Validation error or duplicate variant-platform combination'}
                '401': {description: 'Unauthorized - admin access required'}
                '500': {description: 'Internal server error'}
        get:
            summary: 'Get all listings'
            description: 'Retrieve all listings with pagination and filtering'
            tags: [Listings]
            security: [{BearerAuth: []}]
            parameters:
                - {in: query, name: page, schema: {type: integer, minimum: 1, default: 1}, description: 'Page number for pagination'}
                - {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 100, default: 10}, description: 'Number of items per page'}
                - {in: query, name: platform_id, schema: {type: string}, description: 'Filter by platform ID'}
                - {in: query, name: product_variant_id, schema: {type: string}, description: 'Filter by product variant ID'}
                - {in: query, name: listing_status, schema: {type: string, enum: [Draft, 'Pending Review', Live, Rejected, Deactivated]}, description: 'Filter by listing status'}
                - {in: query, name: is_active_on_platform, schema: {type: boolean}, description: 'Filter by active status'}
                - {in: query, name: platform_sku, schema: {type: string}, description: 'Filter by platform SKU (partial match)'}
                - {in: query, name: platform_product_id, schema: {type: string}, description: 'Filter by platform product ID (partial match)'}
                - {in: query, name: needs_sync, schema: {type: boolean}, description: 'Filter listings that need synchronization'}
                - {in: query, name: has_price, schema: {type: boolean}, description: 'Filter listings with valid platform price'}
                - {in: query, name: search, schema: {type: string}, description: 'Search across platform SKU and product ID'}
                - {in: query, name: sort_by, schema: {type: string, enum: [createdAt, updatedAt, platform_price, listing_status, last_synced_at], default: createdAt}, description: 'Field to sort by'}
                - {in: query, name: sort_order, schema: {type: string, enum: [asc, desc], default: desc}, description: 'Sort order'}
            responses:
                '200': {description: 'Listings retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/Listing'}}, pagination: {type: object}}}}}}
                '401': {description: 'Unauthorized - admin access required'}
                '500': {description: 'Internal server error'}
    /api/v1/listings/{id}:
        get:
            summary: 'Get listing by ID'
            description: 'Retrieve a specific listing by its ID'
            tags: [Listings]
            security: [{BearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Listing ID'}
            responses:
                '200': {description: 'Listing retrieved successfully', content: {application/json: {schema: {$ref: '#/components/schemas/Listing'}}}}
                '400': {description: 'Invalid listing ID'}
                '401': {description: 'Unauthorized - admin access required'}
                '404': {description: 'Listing not found'}
                '500': {description: 'Internal server error'}
        patch:
            summary: 'Update listing'
            description: 'Update an existing listing'
            tags: [Listings]
            security: [{BearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Listing ID'}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                platform_sku: {type: string, maxLength: 100, description: 'Platform-specific SKU'}
                                platform_product_id: {type: string, maxLength: 150, description: 'Platform-specific product ID'}
                                listing_status: {type: string, enum: [Draft, 'Pending Review', Live, Rejected, Deactivated], description: 'Current status of the listing'}
                                platform_price: {type: number, minimum: 0, description: 'Price on the platform'}
                                platform_commission_percentage: {type: number, minimum: 0, maximum: 100, description: 'Commission percentage for this variant'}
                                platform_fixed_fee: {type: number, minimum: 0, description: 'Fixed fee per sale'}
                                platform_shipping_fee: {type: number, minimum: 0, description: 'Shipping fee charged by platform'}
                                platform_specific_data: {type: object, description: 'Platform-specific attributes'}
                                is_active_on_platform: {type: boolean, description: 'Whether listing is active on platform'}
            responses:
                '200': {description: 'Listing updated successfully', content: {application/json: {schema: {$ref: '#/components/schemas/Listing'}}}}
                '400': {description: 'Validation error or invalid listing ID'}
                '401': {description: 'Unauthorized - admin access required'}
                '404': {description: 'Listing not found'}
                '500': {description: 'Internal server error'}
        delete:
            summary: 'Delete listing'
            description: 'Delete listing (soft delete)'
            tags: [Listings]
            security: [{BearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Listing ID'}
            responses:
                '204': {description: 'Listing deleted successfully'}
                '400': {description: 'Invalid listing ID'}
                '401': {description: 'Unauthorized - admin access required'}
                '404': {description: 'Listing not found'}
                '500': {description: 'Internal server error'}

    # User Addresses
    /api/v1/user/addresses:
        get:
            tags: [User Addresses]
            summary: Get user addresses  
            description: Retrieve all addresses for the authenticated user
            security: [{BearerAuth: []}]
            parameters:
                - name: page
                  in: query
                  schema: {type: integer, minimum: 1, default: 1}
                  description: Page number
                - name: limit
                  in: query
                  schema: {type: integer, minimum: 1, maximum: 50, default: 20}
                  description: Items per page
                - name: type
                  in: query
                  schema: {type: string, enum: [HOME, OFFICE, OTHER, BILLING, SHIPPING]}
                  description: Filter by address type
                - name: include_inactive
                  in: query
                  schema: {type: boolean, default: false}
                  description: Include inactive addresses
            responses:
                '200':
                    description: Addresses retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Addresses retrieved successfully'}
                                    data:
                                        type: object
                                        properties:
                                            addresses:
                                                type: array
                                                items: {$ref: '#/components/schemas/Address'}
                                            pagination:
                                                type: object
                                                properties:
                                                    current_page: {type: integer, example: 1}
                                                    total_pages: {type: integer, example: 3}
                                                    total_items: {type: integer, example: 8}
                                                    items_per_page: {type: integer, example: 20}
                                                    has_next_page: {type: boolean, example: false}
                                                    has_prev_page: {type: boolean, example: false}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '500': {$ref: '#/components/responses/500'}
        post:
            tags: [User Addresses]
            summary: Create new address
            description: Create a new delivery address for the authenticated user
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema: {$ref: '#/components/schemas/CreateAddressRequest'}
            responses:
                '201':
                    description: Address created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Address created successfully'}
                                    data:
                                        type: object
                                        properties:
                                            address: {$ref: '#/components/schemas/Address'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/user/addresses/{addressId}:
        get:
            tags: [User Addresses]
            summary: Get specific address
            description: Retrieve details of a specific address belonging to the authenticated user
            security: [{BearerAuth: []}]
            parameters:
                - name: addressId
                  in: path
                  required: true
                  schema: {type: string}
                  description: Address ID
            responses:
                '200':
                    description: Address retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Address retrieved successfully'}
                                    data:
                                        type: object
                                        properties:
                                            address: {$ref: '#/components/schemas/Address'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}
        put:
            tags: [User Addresses]
            summary: Update address
            description: Update an existing address belonging to the authenticated user
            security: [{BearerAuth: []}]
            parameters:
                - name: addressId
                  in: path
                  required: true
                  schema: {type: string}
                  description: Address ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema: {$ref: '#/components/schemas/UpdateAddressRequest'}
            responses:
                '200':
                    description: Address updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Address updated successfully'}
                                    data:
                                        type: object
                                        properties:
                                            address: {$ref: '#/components/schemas/Address'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}
        delete:
            tags: [User Addresses]
            summary: Delete address
            description: Soft delete an address belonging to the authenticated user
            security: [{BearerAuth: []}]
            parameters:
                - name: addressId
                  in: path
                  required: true
                  schema: {type: string}
                  description: Address ID
            responses:
                '200':
                    description: Address deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Address deleted successfully'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/user/addresses/{addressId}/default:
        patch:
            tags: [User Addresses]
            summary: Set default address
            description: Set a specific address as the default address for the authenticated user
            security: [{BearerAuth: []}]
            parameters:
                - name: addressId
                  in: path
                  required: true
                  schema: {type: string}
                  description: Address ID
            responses:
                '200':
                    description: Default address set successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Default address set successfully'}
                                    data:
                                        type: object
                                        properties:
                                            address: {$ref: '#/components/schemas/Address'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/user/orders:
        post:
            summary: 'Place a new order'
            description: 'Create a new order for the authenticated user'
            tags: [Orders]
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [cart_id, billing_address, shipping_address]
                            properties:
                                cart_id: {type: string, description: 'ID of the cart to create order from'}
                                billing_address:
                                    type: object
                                    required: [full_name, address_line1, city, state, pincode, country, phone_number]
                                    properties:  
                                        full_name: {type: string, maxLength: 100, description: 'Full name'}
                                        address_line1: {type: string, maxLength: 200, description: 'Primary address line'}
                                        address_line2: {type: string, maxLength: 200, description: 'Secondary address line (optional)'}
                                        city: {type: string, maxLength: 100, description: 'City'}
                                        state: {type: string, maxLength: 100, description: 'State/Province'}
                                        pincode: {type: string, pattern: '^\\d{6}$', description: '6-digit pincode'}
                                        country: {type: string, maxLength: 100, description: 'Country'}
                                        phone_number: {type: string, pattern: '^[+]?[\\d\\s-()]{10,15}$', description: 'Phone number'}
                                shipping_address:
                                    type: object
                                    required: [full_name, address_line1, city, state, pincode, country, phone_number]
                                    properties:
                                        full_name: {type: string, maxLength: 100, description: 'Full name'}
                                        address_line1: {type: string, maxLength: 200, description: 'Primary address line'}
                                        address_line2: {type: string, maxLength: 200, description: 'Secondary address line (optional)'}
                                        city: {type: string, maxLength: 100, description: 'City'}
                                        state: {type: string, maxLength: 100, description: 'State/Province'}
                                        pincode: {type: string, pattern: '^\\d{6}$', description: '6-digit pincode'}
                                        country: {type: string, maxLength: 100, description: 'Country'}
                                        phone_number: {type: string, pattern: '^[+]?[\\d\\s-()]{10,15}$', description: 'Phone number'}
                                payment_method_id: {type: string, description: 'Payment method ID (optional)'}
                                notes: {type: string, maxLength: 1000, description: 'Optional order notes'}
            responses:
                '201': {description: 'Order created successfully', content: {application/json: {schema: {$ref: '#/components/schemas/Order'}}}}
                '400': {description: 'Validation error or invalid cart'}
                '401': {description: 'Unauthorized'}
                '404': {description: 'Cart not found'}
                '500': {description: 'Internal server error'}
        get:
            summary: 'Get user orders'
            description: 'Retrieve orders for the authenticated user'
            tags: [Orders]
            security: [{BearerAuth: []}]
            parameters:
                - {in: query, name: page, schema: {type: integer, minimum: 1, default: 1}, description: 'Page number'}
                - {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 50, default: 10}, description: 'Items per page'}
                - {in: query, name: order_status, schema: {type: string, enum: [PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED, RETURN_REQUESTED, RETURNED]}, description: 'Filter by order status'}
                - {in: query, name: payment_status, schema: {type: string, enum: [PENDING, PAID, FAILED, REFUNDED, PARTIALLY_REFUNDED]}, description: 'Filter by payment status'}
                - {in: query, name: sort_by, schema: {type: string, enum: [createdAt, updatedAt, grand_total_amount], default: createdAt}, description: 'Sort field'}
                - {in: query, name: sort_order, schema: {type: string, enum: [asc, desc], default: desc}, description: 'Sort order'}
            responses:
                '200':
                    description: 'Orders retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean}
                                    data: {type: array, items: {$ref: '#/components/schemas/Order'}}
                                    pagination:
                                        type: object
                                        properties:
                                            current_page: {type: integer, description: 'Current page number'}
                                            total_pages: {type: integer, description: 'Total number of pages'}
                                            total_count: {type: integer, description: 'Total number of records'}
                                            per_page: {type: integer, description: 'Number of items per page'}
                '401': {description: 'Unauthorized'}
                '500': {description: 'Internal server error'}
    /api/v1/user/orders/{orderId}:
        get:
            summary: 'Get order details'
            description: 'Retrieve details of a specific order for the authenticated user'
            tags: [Orders]
            security: [{BearerAuth: []}]
            parameters:
                - {in: path, name: orderId, required: true, schema: {type: string}, description: 'Order ID'}
            responses:
                '200': {description: 'Order details retrieved successfully', content: {application/json: {schema: {$ref: '#/components/schemas/Order'}}}}
                '401': {description: 'Unauthorized'}
                '403': {description: 'Access denied - not your order'}
                '404': {description: 'Order not found'}
                '500': {description: 'Internal server error'}
        patch:
            summary: 'Cancel order'
            description: 'Cancel an order (only PENDING/PROCESSING orders can be cancelled)'
            tags: [Orders]
            security: [{BearerAuth: []}]
            parameters:
                - {in: path, name: orderId, required: true, schema: {type: string}, description: 'Order ID'}
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                reason: {type: string, maxLength: 1000, description: 'Reason for cancellation'}
            responses:
                '200': {description: 'Order cancelled successfully', content: {application/json: {schema: {$ref: '#/components/schemas/Order'}}}}
                '400': {description: 'Order cannot be cancelled (wrong status)'}
                '401': {description: 'Unauthorized'}
                '403': {description: 'Access denied - not your order'}
                '404': {description: 'Order not found'}
                '500': {description: 'Internal server error'}

    # Razorpay Payment Integration
    /api/v1/user/orders/razorpay/create:
        post:
            summary: 'Create Razorpay order for payment'
            description: 'Create a Razorpay order for payment processing'
            tags: [Orders, Payments]
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [shipping_address, billing_address]
                            properties:
                                shipping_address:
                                    type: object
                                    required: [full_name, address_line1, city, state, pincode, country, phone_number]
                                    properties:
                                        full_name: {type: string, maxLength: 100, description: 'Full name'}
                                        address_line1: {type: string, maxLength: 200, description: 'Primary address line'}
                                        address_line2: {type: string, maxLength: 200, description: 'Secondary address line (optional)'}
                                        city: {type: string, maxLength: 100, description: 'City'}
                                        state: {type: string, maxLength: 100, description: 'State/Province'}
                                        pincode: {type: string, pattern: '^\\d{6}$', description: '6-digit pincode'}
                                        country: {type: string, maxLength: 100, description: 'Country'}
                                        phone_number: {type: string, pattern: '^[+]?[\\d\\s-()]{10,15}$', description: 'Phone number'}
                                billing_address:
                                    type: object
                                    required: [full_name, address_line1, city, state, pincode, country, phone_number]
                                    properties:
                                        full_name: {type: string, maxLength: 100, description: 'Full name'}
                                        address_line1: {type: string, maxLength: 200, description: 'Primary address line'}
                                        address_line2: {type: string, maxLength: 200, description: 'Secondary address line (optional)'}
                                        city: {type: string, maxLength: 100, description: 'City'}
                                        state: {type: string, maxLength: 100, description: 'State/Province'}
                                        pincode: {type: string, pattern: '^\\d{6}$', description: '6-digit pincode'}
                                        country: {type: string, maxLength: 100, description: 'Country'}
                                        phone_number: {type: string, pattern: '^[+]?[\\d\\s-()]{10,15}$', description: 'Phone number'}
                                payment_method_id: {type: string, description: 'Payment method ID (optional)'}
            responses:
                '200':
                    description: 'Razorpay order created successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Razorpay order created successfully'}
                                    data:
                                        type: object
                                        properties:
                                            razorpay_order_id: {type: string, example: 'order_MNOPqrstuvwxyz'}
                                            order_number: {type: string, example: 'ORD20250131001'}
                                            amount: {type: integer, example: 129999, description: 'Amount in paise'}
                                            currency: {type: string, example: 'INR'}
                                            key_id: {type: string, example: 'rzp_test_1234567890'}
                                            order_details:
                                                type: object
                                                properties:
                                                    subtotal: {type: number, example: 1199.99}
                                                    shipping: {type: number, example: 50.00}
                                                    tax: {type: number, example: 50.00}
                                                    discount: {type: number, example: 0.00}
                                                    total: {type: number, example: 1299.99}
                '400': {description: 'Bad request - validation failed or cart empty'}
                '401': {description: 'Unauthorized'}
                '500': {description: 'Internal server error or Razorpay order creation failed'}

    /api/v1/user/orders/razorpay/verify:
        post:
            summary: 'Verify Razorpay payment and complete order'
            description: 'Verify payment signature and complete the order creation'
            tags: [Orders, Payments]
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [razorpay_order_id, razorpay_payment_id, razorpay_signature, shipping_address, billing_address]
                            properties:
                                razorpay_order_id: {type: string, description: 'Razorpay order ID'}
                                razorpay_payment_id: {type: string, description: 'Razorpay payment ID'}
                                razorpay_signature: {type: string, description: 'Razorpay payment signature'}
                                shipping_address:
                                    type: object
                                    required: [full_name, address_line1, city, state, pincode, country, phone_number]
                                    properties:
                                        full_name: {type: string, maxLength: 100, description: 'Full name'}
                                        address_line1: {type: string, maxLength: 200, description: 'Primary address line'}
                                        address_line2: {type: string, maxLength: 200, description: 'Secondary address line (optional)'}
                                        city: {type: string, maxLength: 100, description: 'City'}
                                        state: {type: string, maxLength: 100, description: 'State/Province'}
                                        pincode: {type: string, pattern: '^\\d{6}$', description: '6-digit pincode'}
                                        country: {type: string, maxLength: 100, description: 'Country'}
                                        phone_number: {type: string, pattern: '^[+]?[\\d\\s-()]{10,15}$', description: 'Phone number'}
                                billing_address:
                                    type: object
                                    required: [full_name, address_line1, city, state, pincode, country, phone_number]
                                    properties:
                                        full_name: {type: string, maxLength: 100, description: 'Full name'}
                                        address_line1: {type: string, maxLength: 200, description: 'Primary address line'}
                                        address_line2: {type: string, maxLength: 200, description: 'Secondary address line (optional)'}
                                        city: {type: string, maxLength: 100, description: 'City'}
                                        state: {type: string, maxLength: 100, description: 'State/Province'}
                                        pincode: {type: string, pattern: '^\\d{6}$', description: '6-digit pincode'}
                                        country: {type: string, maxLength: 100, description: 'Country'}
                                        phone_number: {type: string, pattern: '^[+]?[\\d\\s-()]{10,15}$', description: 'Phone number'}
                                payment_method_id: {type: string, description: 'Payment method ID (optional)'}
            responses:
                '201':
                    description: 'Order placed successfully with Razorpay payment'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Order placed successfully with Razorpay payment'}
                                    data:
                                        type: object
                                        properties:
                                            order_id: {type: string, example: '64a1b2c3d4e5f6789abcdef0'}
                                            order_number: {type: string, example: 'ORD20250131001'}
                                            payment_status: {type: string, example: 'PAID'}
                                            order_status: {type: string, example: 'PROCESSING'}
                                            grand_total_amount: {type: number, example: 1299.99}
                                            razorpay_payment_id: {type: string, example: 'pay_MNOPqrstuvwxyz'}
                '400': {description: 'Bad request - invalid signature or payment verification failed'}
                '401': {description: 'Unauthorized'}
                '500': {description: 'Internal server error'}

    /api/v1/user/orders/razorpay/failure:
        post:
            summary: 'Handle Razorpay payment failure'
            description: 'Log payment failure for analytics and user notification'
            tags: [Orders, Payments]
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                razorpay_order_id: {type: string, description: 'Razorpay order ID'}
                                razorpay_payment_id: {type: string, description: 'Razorpay payment ID'}
                                error:
                                    type: object
                                    properties:
                                        code: {type: string, description: 'Error code'}
                                        description: {type: string, description: 'Error description'}
            responses:
                '200':
                    description: 'Payment failure logged successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: false}
                                    message: {type: string, example: 'Payment failed'}
                                    data:
                                        type: object
                                        properties:
                                            razorpay_order_id: {type: string}
                                            razorpay_payment_id: {type: string}
                                            error: {type: string, description: 'Error description'}
                '401': {description: 'Unauthorized'}
                '500': {description: 'Internal server error'}

    # Webhook Endpoints
    /api/v1/webhooks/razorpay:
        post:
            summary: 'Razorpay webhook handler'
            description: 'Handle Razorpay webhook events for payment status updates'
            tags: [Webhooks, Payments]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                event: {type: string, example: 'payment.captured'}
                                payload:
                                    type: object
                                    description: 'Webhook payload from Razorpay'
            responses:
                '200': {description: 'Webhook processed successfully'}
                '400': {description: 'Invalid webhook signature'}
                '500': {description: 'Webhook processing failed'}

    /api/v1/admin/orders:
        get:
            summary: 'Get all orders (Admin)'
            description: 'Retrieve all orders with advanced filters and analytics (admin only)'
            tags: [Orders]
            security: [{BearerAuth: []}]
            parameters:
                - {in: query, name: page, schema: {type: integer, minimum: 1, default: 1}, description: 'Page number'}
                - {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 100, default: 10}, description: 'Items per page'}
                - {in: query, name: order_status, schema: {type: string, enum: [PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED, RETURN_REQUESTED, RETURNED]}, description: 'Filter by order status'}
                - {in: query, name: payment_status, schema: {type: string, enum: [PENDING, PAID, FAILED, REFUNDED, PARTIALLY_REFUNDED]}, description: 'Filter by payment status'}
                - {in: query, name: user_id, schema: {type: string}, description: 'Filter by user ID'}
                - {in: query, name: order_number, schema: {type: string}, description: 'Filter by order number'}
                - {in: query, name: date_from, schema: {type: string, format: date}, description: 'Filter orders from date (YYYY-MM-DD)'}
                - {in: query, name: date_to, schema: {type: string, format: date}, description: 'Filter orders to date (YYYY-MM-DD)'}
                - {in: query, name: min_amount, schema: {type: number, minimum: 0}, description: 'Minimum order amount'}
                - {in: query, name: max_amount, schema: {type: number, minimum: 0}, description: 'Maximum order amount'}
                - {in: query, name: search, schema: {type: string}, description: 'Search in order number, user email, or notes'}
                - {in: query, name: sort_by, schema: {type: string, enum: [createdAt, updatedAt, grand_total_amount, order_number], default: createdAt}, description: 'Sort field'}
                - {in: query, name: sort_order, schema: {type: string, enum: [asc, desc], default: desc}, description: 'Sort order'}

    # Support Tickets - User Endpoints
    /api/v1/support-tickets:
        post:
            tags: ['Support Tickets']
            summary: Create a new support ticket
            description: |
                Create a new support ticket from the e-commerce portal. Users can report issues,
                ask questions, or request assistance through this endpoint.
            security: [{bearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [subject, description, priority, category]
                            properties:
                                subject: {type: string, maxLength: 200, example: 'Unable to complete order checkout'}
                                description: {type: string, maxLength: 2000, example: 'I am having trouble completing my order. The checkout page keeps showing an error when I try to submit payment.'}
                                category: {type: string, enum: ['ORDER_ISSUE', 'PAYMENT_ISSUE', 'PRODUCT_INQUIRY', 'TECHNICAL_SUPPORT', 'ACCOUNT_ISSUE', 'SHIPPING_INQUIRY', 'RETURN_REFUND', 'GENERAL_INQUIRY', 'FEATURE_REQUEST', 'BUG_REPORT'], example: 'ORDER_ISSUE'}
                                priority: {type: string, enum: ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL'], example: 'MEDIUM'}
                                tags: {type: array, items: {type: string}, example: ['urgent', 'checkout']}
                                metadata:
                                    type: object
                                    properties:
                                        browser: {type: string, example: 'Chrome 91.0'}
                                        device: {type: string, example: 'Desktop'}
                                        order_id: {type: string, example: '64a1b2c3d4e5f6789abcdef0'}
                                        product_id: {type: string, example: '64a1b2c3d4e5f6789abcdef1'}
            responses:
                '201':
                    description: Support ticket created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Support ticket created successfully'}
                                    data: {$ref: '#/components/schemas/SupportTicket'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '500': {$ref: '#/components/responses/500'}
        get:
            tags: ['Support Tickets']
            summary: Get user's support tickets
            description: |
                Retrieve all support tickets created by the authenticated user.
                Supports pagination and filtering.
            security: [{bearerAuth: []}]
            parameters:
                - {in: query, name: page, schema: {type: integer, minimum: 1, default: 1}, description: 'Page number for pagination'}
                - {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 50, default: 10}, description: 'Number of tickets per page'}
                - {in: query, name: status, schema: {type: string, enum: ['OPEN', 'IN_PROGRESS', 'PENDING_USER', 'RESOLVED', 'CLOSED', 'ESCALATED']}, description: 'Filter by ticket status'}
                - {in: query, name: category, schema: {type: string, enum: ['ORDER_ISSUE', 'PAYMENT_ISSUE', 'PRODUCT_INQUIRY', 'TECHNICAL_SUPPORT', 'ACCOUNT_ISSUE', 'SHIPPING_INQUIRY', 'RETURN_REFUND', 'GENERAL_INQUIRY', 'FEATURE_REQUEST', 'BUG_REPORT']}, description: 'Filter by category'}
                - {in: query, name: priority, schema: {type: string, enum: ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']}, description: 'Filter by priority'}
                - {in: query, name: search, schema: {type: string}, description: 'Search in subject and description'}
                - {in: query, name: sort_by, schema: {type: string, enum: ['createdAt', 'updatedAt', 'priority', 'status'], default: 'createdAt'}, description: 'Sort field'}
                - {in: query, name: sort_order, schema: {type: string, enum: ['asc', 'desc'], default: 'desc'}, description: 'Sort order'}
            responses:
                '200':
                    description: User support tickets retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {type: array, items: {$ref: '#/components/schemas/SupportTicket'}}
                                    pagination: {$ref: '#/components/schemas/PaginationInfo'}
                '401': {$ref: '#/components/responses/401'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/support-tickets/{id}:
        get:
            tags: ['Support Tickets']
            summary: Get support ticket details
            description: Get detailed information about a specific support ticket including messages
            security: [{bearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Support ticket ID'}
            responses:
                '200':
                    description: Support ticket details retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {$ref: '#/components/schemas/SupportTicket'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}
        put:
            tags: ['Support Tickets']
            summary: Update support ticket
            description: Update ticket information (limited fields for users)
            security: [{bearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Support ticket ID'}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                subject: {type: string, maxLength: 200}
                                description: {type: string, maxLength: 2000}
                                priority: {type: string, enum: ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']}
                                tags: {type: array, items: {type: string}}
            responses:
                '200':
                    description: Support ticket updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Support ticket updated successfully'}
                                    data: {$ref: '#/components/schemas/SupportTicket'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/support-tickets/{id}/messages:
        post:
            tags: ['Support Tickets']
            summary: Add message to support ticket
            description: Add a new message to an existing support ticket
            security: [{bearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Support ticket ID'}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SupportTicketMessage'
            responses:
                '201':
                    description: Message added successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Message added successfully'}
                                    data: {$ref: '#/components/schemas/SupportTicket'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/support-tickets/{id}/close:
        patch:
            tags: ['Support Tickets']
            summary: Close support ticket
            description: Close a support ticket and optionally provide satisfaction rating
            security: [{bearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Support ticket ID'}
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                satisfaction_rating: {type: number, minimum: 1, maximum: 5, example: 4}
                                satisfaction_feedback: {type: string, maxLength: 500, example: 'The support team was very helpful and resolved my issue quickly.'}
            responses:
                '200':
                    description: Support ticket closed successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Support ticket closed successfully'}
                                    data: {$ref: '#/components/schemas/SupportTicket'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}

    # Admin Support Tickets Endpoints
    /api/v1/admin/support-tickets:
        get:
            tags: ['Admin Support Tickets']
            summary: Get all support tickets (Admin)
            description: |
                Retrieve all support tickets with advanced filtering, sorting, and analytics.
                Admin-only endpoint with comprehensive ticket management capabilities.
            security: [{bearerAuth: []}]
            parameters:
                - {in: query, name: page, schema: {type: integer, minimum: 1, default: 1}, description: 'Page number for pagination'}
                - {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 100, default: 20}, description: 'Number of tickets per page'}
                - {in: query, name: status, schema: {type: string, enum: ['OPEN', 'IN_PROGRESS', 'PENDING_USER', 'RESOLVED', 'CLOSED', 'ESCALATED']}, description: 'Filter by ticket status'}
                - {in: query, name: category, schema: {type: string, enum: ['ORDER_ISSUE', 'PAYMENT_ISSUE', 'PRODUCT_INQUIRY', 'TECHNICAL_SUPPORT', 'ACCOUNT_ISSUE', 'SHIPPING_INQUIRY', 'RETURN_REFUND', 'GENERAL_INQUIRY', 'FEATURE_REQUEST', 'BUG_REPORT']}, description: 'Filter by category'}
                - {in: query, name: priority, schema: {type: string, enum: ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']}, description: 'Filter by priority'}
                - {in: query, name: assigned_to, schema: {type: string}, description: 'Filter by assigned admin ID'}
                - {in: query, name: escalation_level, schema: {type: integer, minimum: 0, maximum: 3}, description: 'Filter by escalation level'}
                - {in: query, name: sla_breached, schema: {type: boolean}, description: 'Filter tickets with breached SLA'}
                - {in: query, name: user_id, schema: {type: string}, description: 'Filter by user ID'}
                - {in: query, name: search, schema: {type: string}, description: 'Search in subject, description, and ticket number'}
                - {in: query, name: date_from, schema: {type: string, format: date}, description: 'Filter tickets from date (YYYY-MM-DD)'}
                - {in: query, name: date_to, schema: {type: string, format: date}, description: 'Filter tickets to date (YYYY-MM-DD)'}
                - {in: query, name: sort_by, schema: {type: string, enum: ['createdAt', 'updatedAt', 'priority', 'status', 'sla_due_date'], default: 'createdAt'}, description: 'Sort field'}
                - {in: query, name: sort_order, schema: {type: string, enum: ['asc', 'desc'], default: 'desc'}, description: 'Sort order'}
            responses:
                '200':
                    description: Support tickets retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {type: array, items: {$ref: '#/components/schemas/SupportTicket'}}
                                    pagination: {$ref: '#/components/schemas/PaginationInfo'}
                                    summary:
                                        type: object
                                        properties:
                                            totalTickets: {type: number}
                                            openTickets: {type: number}
                                            highPriorityTickets: {type: number}
                                            escalatedTickets: {type: number}
                                            slaBreachedTickets: {type: number}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/admin/support-tickets/stats:
        get:
            tags: ['Admin Support Tickets']
            summary: Get support ticket analytics
            description: Get comprehensive analytics and statistics for support tickets
            security: [{bearerAuth: []}]
            parameters:
                - {in: query, name: date_from, schema: {type: string, format: date}, description: 'Analytics from date (YYYY-MM-DD)'}
                - {in: query, name: date_to, schema: {type: string, format: date}, description: 'Analytics to date (YYYY-MM-DD)'}
                - {in: query, name: granularity, schema: {type: string, enum: ['day', 'week', 'month'], default: 'day'}, description: 'Time granularity for trends'}
            responses:
                '200':
                    description: Support ticket analytics retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {$ref: '#/components/schemas/SupportTicketStats'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/admin/support-tickets/{id}:
        get:
            tags: ['Admin Support Tickets']
            summary: Get support ticket details (Admin)
            description: Get detailed ticket information including internal notes and full history
            security: [{bearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Support ticket ID'}
            responses:
                '200':
                    description: Support ticket details retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    data: {$ref: '#/components/schemas/SupportTicket'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}
        put:
            tags: ['Admin Support Tickets']
            summary: Update support ticket (Admin)
            description: Admin update of ticket with full control over all fields
            security: [{bearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Support ticket ID'}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                assigned_to: {type: string, description: 'Admin ID to assign ticket to'}
                                status: {type: string, enum: ['OPEN', 'IN_PROGRESS', 'PENDING_USER', 'RESOLVED', 'CLOSED', 'ESCALATED']}
                                priority: {type: string, enum: ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']}
                                category: {type: string, enum: ['ORDER_ISSUE', 'PAYMENT_ISSUE', 'PRODUCT_INQUIRY', 'TECHNICAL_SUPPORT', 'ACCOUNT_ISSUE', 'SHIPPING_INQUIRY', 'RETURN_REFUND', 'GENERAL_INQUIRY', 'FEATURE_REQUEST', 'BUG_REPORT']}
                                tags: {type: array, items: {type: string}}
                                escalation_level: {type: integer, minimum: 0, maximum: 3}
                                internal_notes: 
                                    type: array
                                    items:
                                        type: object
                                        properties:
                                            note: {type: string, maxLength: 1000}
            responses:
                '200':
                    description: Support ticket updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Support ticket updated successfully'}
                                    data: {$ref: '#/components/schemas/SupportTicket'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}
        delete:
            tags: ['Admin Support Tickets']
            summary: Delete support ticket (Admin)
            description: Permanently delete a support ticket (admin only)
            security: [{bearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Support ticket ID'}
            responses:
                '200':
                    description: Support ticket deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Support ticket deleted successfully'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/admin/support-tickets/{id}/assign:
        patch:
            tags: ['Admin Support Tickets']
            summary: Assign support ticket to admin
            description: Assign or reassign a support ticket to an admin user
            security: [{bearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Support ticket ID'}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [assigned_to]
                            properties:
                                assigned_to: {type: string, description: 'Admin user ID to assign the ticket to'}
                                notes: {type: string, maxLength: 500, description: 'Optional assignment notes'}
            responses:
                '200':
                    description: Support ticket assigned successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Support ticket assigned successfully'}
                                    data: {$ref: '#/components/schemas/SupportTicket'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/admin/support-tickets/{id}/escalate:
        patch:
            tags: ['Admin Support Tickets']
            summary: Escalate support ticket
            description: Escalate a support ticket to higher level or management
            security: [{bearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Support ticket ID'}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [escalation_reason]
                            properties:
                                escalation_reason: {type: string, maxLength: 500, description: 'Reason for escalation'}
                                escalate_to: {type: string, description: 'Admin ID to escalate to (optional)'}
            responses:
                '200':
                    description: Support ticket escalated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Support ticket escalated successfully'}
                                    data: {$ref: '#/components/schemas/SupportTicket'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/admin/support-tickets/{id}/messages:
        post:
            tags: ['Admin Support Tickets']
            summary: Add admin message to support ticket
            description: Add a message to support ticket from admin side with internal notes option
            security: [{bearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Support ticket ID'}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - {$ref: '#/components/schemas/SupportTicketMessage'}
                                - type: object
                                  properties:
                                      auto_status_update: {type: boolean, description: 'Automatically update ticket status to IN_PROGRESS', default: true}
            responses:
                '201':
                    description: Admin message added successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Message added successfully'}
                                    data: {$ref: '#/components/schemas/SupportTicket'}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '404': {$ref: '#/components/responses/404'}
                '500': {$ref: '#/components/responses/500'}

    /api/v1/admin/support-tickets/bulk-update:
        patch:
            tags: ['Admin Support Tickets']
            summary: Bulk update support tickets
            description: Update multiple support tickets at once (assign, change status, etc.)
            security: [{bearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [ticket_ids, updates]
                            properties:
                                ticket_ids: {type: array, items: {type: string}, description: 'Array of ticket IDs to update'}
                                updates:
                                    type: object
                                    properties:
                                        assigned_to: {type: string, description: 'Admin ID to assign tickets to'}
                                        status: {type: string, enum: ['OPEN', 'IN_PROGRESS', 'PENDING_USER', 'RESOLVED', 'CLOSED', 'ESCALATED']}
                                        priority: {type: string, enum: ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']}
                                        tags: {type: array, items: {type: string}}
            responses:
                '200':
                    description: Bulk update completed successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean, example: true}
                                    message: {type: string, example: 'Bulk update completed successfully'}
                                    data:
                                        type: object
                                        properties:
                                            updated_count: {type: number, example: 5}
                                            failed_count: {type: number, example: 0}
                                            updated_tickets: {type: array, items: {$ref: '#/components/schemas/SupportTicket'}}
                '400': {$ref: '#/components/responses/400'}
                '401': {$ref: '#/components/responses/401'}
                '403': {$ref: '#/components/responses/403'}
                '500': {$ref: '#/components/responses/500'}
    /api/v1/admin/orders/{orderId}:
        get:
            summary: 'Get order details (Admin)'
            description: 'Retrieve detailed information about any order (admin only)'
            tags: [Orders]
            security: [{BearerAuth: []}]
            parameters:
                - {in: path, name: orderId, required: true, schema: {type: string}, description: 'Order ID'}
            responses:
                '200': {description: 'Order details retrieved successfully', content: {application/json: {schema: {$ref: '#/components/schemas/Order'}}}}
                '401': {description: 'Unauthorized'}
                '403': {description: 'Access denied - admin required'}
                '404': {description: 'Order not found'}
                '500': {description: 'Internal server error'}
        patch:
            summary: 'Update order status (Admin)'
            description: 'Update the status of an order (admin only)'
            tags: [Orders]
            security: [{BearerAuth: []}]
            parameters:
                - {in: path, name: orderId, required: true, schema: {type: string}, description: 'Order ID'}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [order_status]
                            properties:
                                order_status: {type: string, enum: [PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED, RETURN_REQUESTED, RETURNED], description: 'New order status'}
                                payment_status: {type: string, enum: [PENDING, PAID, FAILED, REFUNDED, PARTIALLY_REFUNDED], description: 'New payment status (optional)'}
                                tracking_number: {type: string, maxLength: 100, description: 'Tracking number for shipped orders'}
                                shipping_carrier: {type: string, maxLength: 100, description: 'Shipping carrier name'}
                                notes: {type: string, maxLength: 1000, description: 'Admin notes about status change'}
            responses:
                '200': {description: 'Order status updated successfully', content: {application/json: {schema: {$ref: '#/components/schemas/Order'}}}}
                '400': {description: 'Invalid status transition or validation error'}
                '401': {description: 'Unauthorized'}
                '403': {description: 'Access denied - admin required'}
                '404': {description: 'Order not found'}
                '500': {description: 'Internal server error'}
    /api/v1/admin/orders/{orderId}/refund:
        post:
            summary: 'Process order refund (Admin)'
            description: 'Process a full or partial refund for an order (admin only)'
            tags: [Orders]
            security: [{BearerAuth: []}]
            parameters:
                - {in: path, name: orderId, required: true, schema: {type: string}, description: 'Order ID'}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [refund_amount, reason]
                            properties:
                                refund_amount: {type: number, minimum: 0.01, description: 'Amount to refund'}
                                reason: {type: string, maxLength: 1000, description: 'Reason for refund'}
                                refund_shipping: {type: boolean, default: false, description: 'Whether to refund shipping costs'}
                                notes: {type: string, maxLength: 1000, description: 'Additional notes about the refund'}
            responses:
                '200': {description: 'Refund processed successfully', content: {application/json: {schema: {$ref: '#/components/schemas/Order'}}}}
                '400': {description: 'Invalid refund amount or order not eligible'}
                '401': {description: 'Unauthorized'}
                '403': {description: 'Access denied - admin required'}
                '404': {description: 'Order not found'}
                '500': {description: 'Internal server error'}
    
    # Unsplash Integration Endpoints
    /api/v1/unsplash/search:
        get:
            tags: [Unsplash]
            summary: Search for images on Unsplash
            description: Search for images using Unsplash API with various filters and options (Admin only)
            security:
                - BearerAuth: []
            parameters:
                - name: query
                  in: query
                  required: true
                  schema:
                      type: string
                      minLength: 1
                      maxLength: 100
                  description: 'Search query for images'
                  example: 'laptop computer'
                - name: count
                  in: query
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 30
                      default: 10
                  description: 'Number of images to return'
                - name: orientation
                  in: query
                  schema:
                      type: string
                      enum: [landscape, portrait, squarish]
                  description: 'Image orientation filter'
            responses:
                '200':
                    description: 'Images retrieved successfully'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnsplashSearchResponse'
                '400': {$ref: '#/components/responses/ValidationError'}
                '401': {$ref: '#/components/responses/UnauthorizedError'}
                '403': {$ref: '#/components/responses/ForbiddenError'}
                '500': {$ref: '#/components/responses/ServerError'}
    
    /api/v1/unsplash/product/{productId}/suggestions:
        get:
            tags: [Unsplash]
            summary: Get image suggestions for a product
            description: Get curated image suggestions for a specific product based on its name and category (Admin only)
            security:
                - BearerAuth: []
            parameters:
                - name: productId
                  in: path
                  required: true
                  schema:
                      type: string
                      pattern: '^[0-9a-fA-F]{24}$'
                  description: 'MongoDB ObjectId of the product'
                  example: '64a1b2c3d4e5f6789012345'
                - name: count
                  in: query
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 20
                      default: 5
                  description: 'Number of suggestions to return'
            responses:
                '200':
                    description: 'Product image suggestions retrieved successfully'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnsplashSuggestionsResponse'
                '400': {$ref: '#/components/responses/ValidationError'}
                '401': {$ref: '#/components/responses/UnauthorizedError'}
                '403': {$ref: '#/components/responses/ForbiddenError'}
                '404': {$ref: '#/components/responses/NotFoundError'}
                '500': {$ref: '#/components/responses/ServerError'}
    
    /api/v1/unsplash/category/{categoryId}/suggestions:
        get:
            tags: [Unsplash]
            summary: Get image suggestions for a category
            description: Get curated image suggestions for a specific category (Admin only)
            security:
                - BearerAuth: []
            parameters:
                - name: categoryId
                  in: path
                  required: true
                  schema:
                      type: string
                      pattern: '^[0-9a-fA-F]{24}$'
                  description: 'MongoDB ObjectId of the category'
                  example: '64b2c3d4e5f6789012345'
                - name: count
                  in: query
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 20
                      default: 5
                  description: 'Number of suggestions to return'
            responses:
                '200':
                    description: 'Category image suggestions retrieved successfully'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnsplashSuggestionsResponse'
                '400': {$ref: '#/components/responses/ValidationError'}
                '401': {$ref: '#/components/responses/UnauthorizedError'}
                '403': {$ref: '#/components/responses/ForbiddenError'}
                '404': {$ref: '#/components/responses/NotFoundError'}
                '500': {$ref: '#/components/responses/ServerError'}
    
    /api/v1/unsplash/populate:
        post:
            tags: [Unsplash]
            summary: Bulk populate images for products and categories
            description: Start a background job to populate missing images for products and categories using Unsplash (Admin only)
            security:
                - BearerAuth: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UnsplashPopulateRequest'
                        examples:
                            default:
                                summary: 'Default population'
                                value: {}
                            custom:
                                summary: 'Custom population with limits'
                                value:
                                    overwrite: false
                                    skipProducts: false
                                    skipCategories: false
                                    productLimit: 50
                                    categoryLimit: 20
            responses:
                '200':
                    description: 'Image population started successfully'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnsplashPopulateResponse'
                '400': {$ref: '#/components/responses/ValidationError'}
                '401': {$ref: '#/components/responses/UnauthorizedError'}
                '403': {$ref: '#/components/responses/ForbiddenError'}
                '500': {$ref: '#/components/responses/ServerError'}
    
    /api/v1/unsplash/status:
        get:
            tags: [Unsplash]
            summary: Get Unsplash service status
            description: Check the configuration and status of the Unsplash integration service (Admin only)
            security:
                - BearerAuth: []
            responses:
                '200':
                    description: 'Service status retrieved successfully'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnsplashStatusResponse'
                '401': {$ref: '#/components/responses/UnauthorizedError'}
                '403': {$ref: '#/components/responses/ForbiddenError'}
                '500': {$ref: '#/components/responses/ServerError'}
