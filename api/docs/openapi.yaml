openapi: 3.0.0
info:
    title: 'Zyvo API'
    version: 1.0.0
    description: "\n        A secure Node.js API server built with Express.js that implements \n        security best practices including CORS, CSRF protection, rate limiting, \n        and comprehensive error handling.\n        \n        ## Features\n        - JWT Authentication\n        - Role-based Access Control\n        - Rate Limiting\n        - CSRF Protection\n        - Input Validation\n        - Comprehensive Error Handling\n        \n        ## Security\n        This API implements multiple layers of security:\n        - CORS with configurable origins\n        - CSRF token validation\n        - Rate limiting per IP\n        - Secure HTTP headers via Helmet.js\n        - Input sanitization and validation\n      "
    contact:
        name: 'Zyvo API Support'
        email: support@zyvo.com
        url: 'https://zyvo.com'
    license:
        name: ISC
        url: 'https://opensource.org/licenses/ISC'
servers:
    -
        url: 'http://localhost:3000'
        description: 'Development server'
    -
        url: 'https://api.zyvo.com'
        description: 'Production server'
components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
            description: 'JWT Bearer token authentication'
        csrfToken:
            type: apiKey
            in: header
            name: X-CSRF-Token
            description: 'CSRF token for protection against CSRF attacks'
        BearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
    schemas:
        User:
            type: object
            required: [name, email, password]
            properties: {_id: {type: string, description: 'Unique identifier for the user', example: 64a1b2c3d4e5f6789abcdef0}, name: {type: string, description: 'User full name', minLength: 1, maxLength: 100, example: 'John Doe'}, email: {type: string, format: email, description: 'User email address', example: john.doe@example.com}, role: {type: string, enum: [user, admin], description: 'User role', default: user, example: user}, isActive: {type: boolean, description: 'User active status', default: true, example: true}, lastLogin: {type: string, format: date-time, description: 'Last login timestamp', example: '2025-07-12T10:30:00.000Z'}, createdAt: {type: string, format: date-time, description: 'Creation timestamp', example: '2025-07-12T10:30:00.000Z'}, updatedAt: {type: string, format: date-time, description: 'Last update timestamp', example: '2025-07-12T10:30:00.000Z'}, id: {type: string, description: 'User ID'}, password: {type: string, format: password, description: 'User password (hashed)'}, phone: {type: string, description: 'User phone number'}, address: {type: string, description: 'User address'}, loginCount: {type: number, description: 'Total login count'}, deleted_at: {type: string, format: date-time, description: 'Soft delete timestamp'}}
        Product:
            type: object
            required: [name, description, category_id]
            properties: {_id: {type: string, description: 'Product ID', example: 64a1b2c3d4e5f6789abcdef1}, name: {type: string, description: 'Product name', minLength: 2, maxLength: 200, example: 'Premium Wireless Headphones'}, description: {type: string, description: 'Detailed product description', maxLength: 2000, example: 'High-quality wireless headphones with noise cancellation'}, price: {type: number, format: float, minimum: 0, description: 'Price of the product in USD', example: 299.99}, category: {type: string, description: 'Product category', example: Electronics}, stock: {type: integer, minimum: 0, description: 'Available stock quantity', example: 50}, tags: {type: array, items: {type: string}, description: 'Product tags for categorization', example: [wireless, audio, premium]}, images: {type: array, items: {type: string, format: uri}, description: 'Array of image URLs', example: ['https://example.com/image1.jpg', 'https://example.com/image2.jpg']}, isActive: {type: boolean, description: 'Whether the product is active/available', default: true, example: true}, createdAt: {type: string, format: date-time, description: 'Product creation timestamp', example: '2025-07-12T10:30:00.000Z'}, updatedAt: {type: string, format: date-time, description: 'Product last update timestamp', example: '2025-07-12T10:30:00.000Z'}, slug: {type: string, description: 'Product slug (auto-generated from name)'}, short_description: {type: string, description: 'Brief product summary', maxLength: 500}, category_id: {type: string, description: 'Category reference ID'}, brand_id: {type: string, description: 'Brand reference ID'}, score: {type: number, minimum: 0, maximum: 5, description: 'Product score/rating'}, seo_details: {type: object, properties: {meta_title: {type: string, maxLength: 60}, meta_description: {type: string, maxLength: 160}, meta_keywords: {type: array, items: {type: string}}}}, is_active: {type: boolean, description: 'Product active status'}}
        Category:
            type: object
            required: [name]
            properties: {_id: {type: string, description: 'Unique identifier for the category', example: 64a1b2c3d4e5f6789abcdef2}, name: {type: string, description: 'Name of the category', minLength: 1, maxLength: 100, example: Electronics}, description: {type: string, description: 'Description of the category', maxLength: 500, example: 'Electronic devices and accessories'}, slug: {type: string, description: 'URL-friendly slug for the category', example: electronics}, parent_category: {type: string, description: 'Parent category ID for hierarchical structure', example: 64a1b2c3d4e5f6789abcdef1}, image_url: {type: string, format: uri, description: 'Category image URL', example: 'https://example.com/electronics.jpg'}, is_active: {type: boolean, description: 'Whether the category is active', default: true, example: true}, createdAt: {type: string, format: date-time, description: 'Category creation timestamp', example: '2025-07-12T10:30:00.000Z'}, updatedAt: {type: string, format: date-time, description: 'Category last update timestamp', example: '2025-07-12T10:30:00.000Z'}}
        CategoryTree:
            type: object
            properties: {_id: {type: string, description: 'Category ID', example: 64a1b2c3d4e5f6789abcdef2}, name: {type: string, description: 'Category name', example: Electronics}, slug: {type: string, description: 'Category slug', example: electronics}, description: {type: string, description: 'Category description', example: 'Electronic devices and accessories'}, image_url: {type: string, format: uri, description: 'Category image URL', example: 'https://example.com/electronics.jpg'}, children: {type: array, items: {$ref: '#/components/schemas/CategoryTree'}, description: 'Child categories'}}
        CategoryStats:
            type: object
            properties: {totalCategories: {type: integer, description: 'Total number of categories', example: 50}, activeCategories: {type: integer, description: 'Number of active categories', example: 45}, inactiveCategories: {type: integer, description: 'Number of inactive categories', example: 5}, rootCategories: {type: integer, description: 'Number of root categories', example: 10}, categoriesWithChildren: {type: integer, description: 'Number of categories with child categories', example: 15}, categoriesWithoutChildren: {type: integer, description: 'Number of categories without child categories', example: 30}}
        PaginationInfo:
            type: object
            properties: {page: {type: integer, minimum: 1, description: 'Current page number', example: 1}, limit: {type: integer, minimum: 1, maximum: 100, description: 'Number of items per page', example: 10}, total: {type: integer, minimum: 0, description: 'Total number of items', example: 100}, totalPages: {type: integer, minimum: 0, description: 'Total number of pages', example: 10}, hasNext: {type: boolean, description: 'Whether there is a next page', example: true}, hasPrev: {type: boolean, description: 'Whether there is a previous page', example: false}}
        Error:
            type: object
            properties: {error: {type: string, description: 'Error message', example: 'Validation failed'}, details: {type: array, items: {type: string}, description: 'Detailed error information', example: ['Name is required', 'Email must be valid']}, statusCode: {type: integer, description: 'HTTP status code', example: 400}, timestamp: {type: string, format: date-time, description: 'Error timestamp', example: '2025-07-12T10:30:00.000Z'}}
        Success:
            type: object
            properties: {message: {type: string, description: 'Success message', example: 'Operation completed successfully'}, data: {type: object, description: 'Response data'}, statusCode: {type: integer, description: 'HTTP status code', example: 200}, timestamp: {type: string, format: date-time, description: 'Response timestamp', example: '2025-07-12T10:30:00.000Z'}}
        RegisterRequest:
            type: object
            required: [name, email, password]
            properties: {name: {type: string, minLength: 2, maxLength: 50, pattern: '^[a-zA-Z\s]+$', example: 'John Doe'}, email: {type: string, format: email, example: john@example.com}, password: {type: string, format: password, minLength: 8, maxLength: 128, pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]', example: SecurePass123!}, role: {type: string, enum: [user, admin], default: user}}
        LoginRequest:
            type: object
            required: [email, password]
            properties: {email: {type: string, format: email, example: john@example.com}, password: {type: string, format: password, example: SecurePass123!}}
        ForgotPasswordRequest:
            type: object
            required: [email]
            properties: {email: {type: string, format: email, example: john@example.com}}
        ResetPasswordRequest:
            type: object
            required: [password, confirmPassword]
            properties: {password: {type: string, format: password, minLength: 8, maxLength: 128, pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]', example: NewSecurePass123!}, confirmPassword: {type: string, format: password, example: NewSecurePass123!}}
        AuthResponse:
            type: object
            properties: {success: {type: boolean}, message: {type: string}, accessToken: {type: string}, user: {$ref: '#/components/schemas/User'}}
        ErrorResponse:
            type: object
            properties: {success: {type: boolean, example: false}, message: {type: string}, errors: {type: array, items: {type: object, properties: {field: {type: string}, message: {type: string}}}}}
        Brand:
            type: object
            required: [name]
            properties: {_id: {type: string, description: 'The auto-generated id of the brand'}, name: {type: string, description: 'The official name of the brand', maxLength: 100, minLength: 2}, slug: {type: string, description: 'Auto-generated URL-friendly identifier'}, description: {type: string, description: 'A brief description of the brand', maxLength: 1000}, logo_url: {type: string, description: 'URL to the brand''s logo image', format: uri}, website: {type: string, description: 'Official website URL of the brand', format: uri}, contact_email: {type: string, description: 'General contact email for the brand', format: email}, is_active: {type: boolean, description: 'Whether the brand is currently active', default: true}, display_name: {type: string, description: 'Virtual field returning the brand name'}, logo_image: {type: string, description: 'Virtual field returning the logo URL or null'}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}
            example: {_id: 60d0fe4f5311236168a109ca, name: Nike, slug: nike, description: 'Leading athletic footwear and apparel brand', logo_url: 'https://example.com/nike-logo.png', website: 'https://www.nike.com', contact_email: info@nike.com, is_active: true, display_name: Nike, logo_image: 'https://example.com/nike-logo.png', createdAt: '2023-06-22T09:30:00.000Z', updatedAt: '2023-06-22T09:30:00.000Z'}
        BrandResponse:
            type: object
            properties: {success: {type: boolean}, message: {type: string}, data: {$ref: '#/components/schemas/Brand'}}
        BrandsListResponse:
            type: object
            properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/Brand'}}, pagination: {type: object, properties: {currentPage: {type: number}, totalPages: {type: number}, totalItems: {type: number}, itemsPerPage: {type: number}, hasNextPage: {type: boolean}, hasPrevPage: {type: boolean}}}}
        Inventory:
            type: object
            properties: {_id: {type: string, description: 'Unique identifier for the inventory record'}, product_variant_id: {type: string, description: 'Reference to the base unit product variant'}, stock_quantity: {type: number, minimum: 0, description: 'Physical stock quantity for base unit'}, last_restock_date: {type: string, format: date-time, description: 'Last restock timestamp'}, last_sold_date: {type: string, format: date-time, description: 'Last sale timestamp'}, min_stock_level: {type: number, minimum: 0, description: 'Minimum stock threshold'}, location: {type: string, description: 'Physical storage location'}, notes: {type: string, description: 'Internal inventory notes'}, is_active: {type: boolean, description: 'Whether inventory record is active'}, computed_stock_quantity: {type: number, description: 'Computed stock for pack variants'}, stock_status: {type: string, enum: ['Out of Stock', 'Low Stock', 'Medium Stock', 'High Stock'], description: 'Current stock status'}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}
            required: [product_variant_id, stock_quantity]
        Listing:
            type: object
            properties: {_id: {type: string, description: 'Unique identifier for the listing'}, product_variant_id: {type: string, description: 'Reference to the product variant'}, platform_id: {type: string, description: 'Reference to the platform'}, platform_sku: {type: string, description: 'Platform-specific SKU'}, platform_product_id: {type: string, description: 'Platform-specific product ID'}, listing_status: {type: string, enum: [Draft, 'Pending Review', Live, Rejected, Deactivated], description: 'Current status of the listing'}, platform_price: {type: number, minimum: 0, description: 'Price on the platform'}, platform_commission_percentage: {type: number, minimum: 0, maximum: 100, description: 'Commission percentage for this variant'}, platform_fixed_fee: {type: number, minimum: 0, description: 'Fixed fee per sale'}, platform_shipping_fee: {type: number, minimum: 0, description: 'Shipping fee charged by platform'}, last_synced_at: {type: string, format: date-time, description: 'Last synchronization timestamp'}, platform_specific_data: {type: object, description: 'Platform-specific attributes'}, is_active_on_platform: {type: boolean, description: 'Whether listing is active on platform'}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}
            required: [product_variant_id, platform_id]
        Option:
            type: object
            required: [option_type, option_value]
            properties: {_id: {type: string, description: 'The auto-generated id of the option'}, option_type: {type: string, description: 'The type of option (e.g., Color, Size, Weight)', maxLength: 50}, option_value: {type: string, description: 'The value of the option (e.g., Red, Large, 500g)', maxLength: 100}, name: {type: string, description: 'Display name for the option (defaults to option_value)', maxLength: 100}, slug: {type: string, description: 'Auto-generated URL-friendly identifier'}, is_active: {type: boolean, description: 'Whether the option is currently active', default: true}, sort_order: {type: number, description: 'Sort order for displaying options', default: 0}, full_name: {type: string, description: 'Virtual field combining option_type and name'}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}
            example: {_id: 60d0fe4f5311236168a109ca, option_type: Color, option_value: Red, name: 'Bright Red', slug: color-red, is_active: true, sort_order: 1, full_name: 'Color: Bright Red', createdAt: '2023-06-22T09:30:00.000Z', updatedAt: '2023-06-22T09:30:00.000Z'}
        OptionType:
            type: object
            properties: {option_type: {type: string, description: 'The type of option'}, values: {type: array, items: {type: object, properties: {_id: {type: string}, option_value: {type: string}, name: {type: string}, slug: {type: string}, sort_order: {type: number}}}}}
            example: {option_type: Color, values: [{_id: 60d0fe4f5311236168a109ca, option_value: Red, name: 'Bright Red', slug: color-red, sort_order: 1}]}
        OptionResponse:
            type: object
            properties: {success: {type: boolean}, message: {type: string}, data: {$ref: '#/components/schemas/Option'}}
        OptionsListResponse:
            type: object
            properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/Option'}}, pagination: {type: object, properties: {currentPage: {type: number}, totalPages: {type: number}, totalItems: {type: number}, itemsPerPage: {type: number}, hasNextPage: {type: boolean}, hasPrevPage: {type: boolean}}}}
        Platform:
            type: object
            required: [name]
            properties: {_id: {type: string, description: 'Unique platform identifier'}, name: {type: string, description: 'Platform name (e.g., ''Amazon India'', ''Flipkart'')', maxLength: 100}, slug: {type: string, description: 'URL-friendly platform identifier (auto-generated)'}, description: {type: string, description: 'Brief description of the platform', maxLength: 500}, base_url: {type: string, format: uri, description: 'Main URL of the platform', maxLength: 200}, logo_url: {type: string, format: uri, description: 'URL to the platform''s logo', maxLength: 300}, api_credentials_placeholder: {type: string, description: 'Placeholder for API credentials (sensitive data should be stored securely)', maxLength: 200}, is_active: {type: boolean, description: 'Whether the platform is active', default: true}, has_api_credentials: {type: boolean, description: 'Virtual field indicating if API credentials are configured'}, display_name: {type: string, description: 'Virtual field for formatted display name'}, createdAt: {type: string, format: date-time, description: 'Platform creation timestamp'}, updatedAt: {type: string, format: date-time, description: 'Platform last update timestamp'}}
            example: {_id: 64a7b8c9d0e1f2a3b4c5d6e7, name: 'Amazon India', slug: amazon-india, description: 'India''s largest e-commerce marketplace', base_url: 'https://www.amazon.in', logo_url: 'https://example.com/amazon-logo.png', api_credentials_placeholder: 'API credentials configured', is_active: true, has_api_credentials: true, display_name: 'Amazon India', createdAt: '2024-07-14T10:30:00.000Z', updatedAt: '2024-07-14T10:30:00.000Z'}
        PlatformList:
            type: object
            properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/Platform'}}, pagination: {type: object, properties: {currentPage: {type: integer}, totalPages: {type: integer}, totalCount: {type: integer}, limit: {type: integer}, hasNextPage: {type: boolean}, hasPrevPage: {type: boolean}}}, filters: {type: object, properties: {is_active: {type: boolean}, search: {type: string}}}}
        PlatformFee:
            type: object
            properties: {_id: {type: string, description: 'Unique identifier for the platform fee'}, platform_id: {type: string, description: 'Reference to the platform'}, fee_type: {type: string, enum: ['Commission Percentage', 'Fixed Listing Fee', 'Payment Gateway Fee', 'Shipping Fee', 'Storage Fee', Other], description: 'Type of fee'}, description: {type: string, description: 'Detailed description of the fee'}, value: {type: number, minimum: 0, description: 'Fee value (percentage or fixed amount)'}, is_percentage: {type: boolean, description: 'Whether the value is a percentage'}, effective_date: {type: string, format: date-time, description: 'When the fee becomes effective'}, end_date: {type: string, format: date-time, description: 'When the fee expires (optional)'}, is_active: {type: boolean, description: 'Whether the fee is active'}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}
            required: [platform_id, fee_type, value]
        ProductCreateRequest:
            type: object
            required: [name, description, category_id]
            properties: {name: {type: string, minLength: 2, maxLength: 200}, description: {type: string, minLength: 1, maxLength: 2000}, short_description: {type: string, maxLength: 500}, category_id: {type: string}, brand_id: {type: string}, images: {type: array, items: {type: string}}, score: {type: number, minimum: 0, maximum: 5}, seo_details: {type: object, properties: {meta_title: {type: string, maxLength: 60}, meta_description: {type: string, maxLength: 160}, meta_keywords: {type: array, items: {type: string}}}}}
        ProductUpdateRequest:
            type: object
            properties: {name: {type: string, minLength: 2, maxLength: 200}, description: {type: string, minLength: 1, maxLength: 2000}, short_description: {type: string, maxLength: 500}, category_id: {type: string}, brand_id: {type: string}, images: {type: array, items: {type: string}}, score: {type: number, minimum: 0, maximum: 5}, is_active: {type: boolean}, seo_details: {type: object, properties: {meta_title: {type: string, maxLength: 60}, meta_description: {type: string, maxLength: 160}, meta_keywords: {type: array, items: {type: string}}}}}
        ProductStats:
            type: object
            properties: {totalProducts: {type: number}, activeProducts: {type: number}, inactiveProducts: {type: number}}
        PaginatedProducts:
            type: object
            properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/Product'}}, pagination: {type: object, properties: {currentPage: {type: number}, totalPages: {type: number}, totalItems: {type: number}, itemsPerPage: {type: number}, hasNextPage: {type: boolean}, hasPrevPage: {type: boolean}}}}
        DiscountDetails:
            type: object
            properties: {price: {type: number, minimum: 0, description: 'Discounted price'}, percentage: {type: number, minimum: 0, maximum: 100, description: 'Discount percentage'}, end_date: {type: string, format: date-time, description: 'Discount end date'}, is_on_sale: {type: boolean, description: 'Whether variant is currently on sale'}}
        Dimensions:
            type: object
            properties: {length: {type: number, minimum: 0}, width: {type: number, minimum: 0}, height: {type: number, minimum: 0}, unit: {type: string, enum: [cm, in], default: cm}}
        Weight:
            type: object
            properties: {value: {type: number, minimum: 0}, unit: {type: string, enum: [g, kg, lb, oz], default: g}}
        ProductVariant:
            type: object
            required: [product_id, sku_code, price]
            properties: {_id: {type: string, description: 'The auto-generated id of the variant'}, product_id: {type: string, description: 'Reference to the main Product'}, option_values: {type: array, items: {type: string}, description: 'Array of Option IDs defining this variant'}, sku_code: {type: string, description: 'Unique SKU code for inventory tracking', example: TSH-RED-L}, price: {type: number, minimum: 0, description: 'Regular price of the variant'}, discount_details: {$ref: '#/components/schemas/DiscountDetails'}, slug: {type: string, description: 'URL-friendly identifier'}, dimensions: {$ref: '#/components/schemas/Dimensions'}, weight: {$ref: '#/components/schemas/Weight'}, packaging_cost: {type: number, minimum: 0, default: 0}, shipping_cost: {type: number, minimum: 0, default: 0}, images: {type: array, items: {type: string}, description: 'Array of image URLs for this variant'}, is_active: {type: boolean, default: true}, sort_order: {type: number, default: 0}, effective_price: {type: number, description: 'Price after discount (virtual field)'}, savings: {type: number, description: 'Amount saved if on sale (virtual field)'}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}
            example: {_id: 60d0fe4f5311236168a109cb, product_id: 60d0fe4f5311236168a109ca, option_values: [60d0fe4f5311236168a109cc, 60d0fe4f5311236168a109cd], sku_code: TSH-RED-L, price: 29.99, discount_details: {price: 24.99, percentage: 17, is_on_sale: true}, slug: basic-tshirt-red-large, dimensions: {length: 70, width: 50, height: 2, unit: cm}, weight: {value: 200, unit: g}, packaging_cost: 1.5, shipping_cost: 5, images: ['https://example.com/tshirt-red-front.jpg'], is_active: true, sort_order: 1}
        ProductVariantResponse:
            type: object
            properties: {success: {type: boolean}, message: {type: string}, data: {$ref: '#/components/schemas/ProductVariant'}}
        ProductVariantsListResponse:
            type: object
            properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/ProductVariant'}}, pagination: {type: object, properties: {currentPage: {type: number}, totalPages: {type: number}, totalItems: {type: number}, itemsPerPage: {type: number}, hasNextPage: {type: boolean}, hasPrevPage: {type: boolean}}}}
        Supplier:
            type: object
            required: [name]
            properties: {_id: {type: string, description: 'Unique identifier for the supplier'}, name: {type: string, description: 'Official name of the supplier company', minLength: 2, maxLength: 150}, slug: {type: string, description: 'URL-friendly identifier (auto-generated)'}, description: {type: string, description: 'Brief description of the supplier', maxLength: 1000}, logo_url: {type: string, format: uri, description: 'URL to the supplier''s logo'}, address: {type: object, properties: {address_line_1: {type: string, description: 'Primary address line'}, address_line_2: {type: string, description: 'Secondary address line'}, city: {type: string, description: 'City name'}, state: {type: string, description: 'State or province'}, zipcode: {type: string, description: 'Postal/ZIP code'}, country: {type: string, description: 'Country name'}}}, email: {type: string, format: email, description: 'Primary company email'}, website: {type: string, format: uri, description: 'Company website URL'}, rating: {type: number, minimum: 0, maximum: 5, description: 'Internal supplier rating'}, payment_terms: {type: string, description: 'Payment terms and conditions', maxLength: 500}, delivery_terms: {type: string, description: 'Delivery terms and conditions', maxLength: 500}, status: {type: string, enum: [Active, Inactive, 'On Hold', 'Pending Approval'], description: 'Current supplier status'}, notes: {type: string, description: 'Internal notes about the supplier', maxLength: 2000}, product_categories_supplied: {type: array, items: {type: string}, description: 'Array of category IDs this supplier provides'}, is_active: {type: boolean, description: 'Whether the supplier is active'}, createdAt: {type: string, format: date-time, description: 'Creation timestamp'}, updatedAt: {type: string, format: date-time, description: 'Last update timestamp'}}
            example: {name: 'TechSupply Corp', description: 'Leading technology supplier for electronics', email: contact@techsupply.com, website: 'https://www.techsupply.com', address: {address_line_1: '123 Tech Street', city: 'San Francisco', state: CA, zipcode: '94102', country: USA}, rating: 4.5, status: Active, payment_terms: 'Net 30 days', delivery_terms: 'FOB destination'}
        SupplierContactNumber:
            type: object
            required: [supplier_id, contact_number]
            properties: {_id: {type: string, description: 'Unique identifier for the contact number'}, supplier_id: {type: string, description: 'Reference to the supplier'}, contact_number: {type: string, description: 'The actual phone number', minLength: 7, maxLength: 20}, contact_name: {type: string, description: 'Name of the person associated with this number', maxLength: 100}, type: {type: string, enum: [Mobile, Landline, Fax, Whatsapp, Toll-Free, Other], default: Mobile, description: 'Type of contact number'}, extension: {type: string, description: 'Phone extension if applicable', maxLength: 10}, is_primary: {type: boolean, default: false, description: 'Whether this is the primary contact number'}, notes: {type: string, description: 'Additional notes about this contact number', maxLength: 500}, is_active: {type: boolean, default: true, description: 'Whether the contact number is active'}, createdAt: {type: string, format: date-time, description: 'Creation timestamp'}, updatedAt: {type: string, format: date-time, description: 'Last update timestamp'}}
            example: {supplier_id: 60b5d5f5e8b5e5001f8b4567, contact_number: +1-555-123-4567, contact_name: 'John Doe', type: Mobile, extension: '123', is_primary: true, notes: 'Primary contact for urgent matters'}
        Purchase:
            type: object
            required: [product_variant_id, supplier_id, quantity, unit_price_at_purchase, packaging_cost, shipping_cost, landing_price]
            properties: 
                _id: 
                    type: string
                    description: 'Unique identifier for the purchase'
                    example: '60d0fe4f5311236168a109ca'
                product_variant_id: 
                    type: string
                    description: 'Reference to the product variant being purchased'
                    example: '60d0fe4f5311236168a109cb'
                supplier_id: 
                    type: string
                    description: 'Reference to the supplier'
                    example: '60d0fe4f5311236168a109cc'
                purchase_order_number: 
                    type: string
                    description: 'Unique purchase order number'
                    maxLength: 50
                    example: 'PO-2025-001'
                purchase_date: 
                    type: string
                    format: date-time
                    description: 'Date when the purchase was made'
                    example: '2025-07-20T10:30:00.000Z'
                expected_delivery_date: 
                    type: string
                    format: date-time
                    description: 'Expected delivery date'
                    example: '2025-07-25T10:30:00.000Z'
                received_date: 
                    type: string
                    format: date-time
                    description: 'Date when the purchase was received'
                    example: '2025-07-24T14:20:00.000Z'
                quantity: 
                    type: integer
                    minimum: 1
                    description: 'Quantity of items purchased'
                    example: 50
                unit_price_at_purchase: 
                    type: number
                    minimum: 0
                    description: 'Unit price at time of purchase'
                    example: 25.99
                packaging_cost: 
                    type: number
                    minimum: 0
                    description: 'Packaging cost for the purchase'
                    example: 5.00
                shipping_cost: 
                    type: number
                    minimum: 0
                    description: 'Shipping cost for the purchase'
                    example: 15.00
                landing_price: 
                    type: number
                    minimum: 0
                    description: 'Total landing price (unit_price * quantity + packaging + shipping)'
                    example: 1319.50
                status: 
                    type: string
                    enum: [Planned, Pending, Completed, Cancelled, 'Partially Received']
                    default: Planned
                    description: 'Current status of the purchase'
                    example: 'Completed'
                notes: 
                    type: string
                    maxLength: 1000
                    description: 'Additional notes about the purchase'
                    example: 'Bulk discount applied - 10% off total order'
                inventory_updated_on_completion: 
                    type: boolean
                    default: false
                    description: 'Whether inventory was updated when purchase completed'
                    example: true
                is_active: 
                    type: boolean
                    default: true
                    description: 'Whether the purchase record is active'
                    example: true
                createdAt: 
                    type: string
                    format: date-time
                    description: 'Creation timestamp'
                    example: '2025-07-20T10:30:00.000Z'
                updatedAt: 
                    type: string
                    format: date-time
                    description: 'Last update timestamp'
                    example: '2025-07-20T10:30:00.000Z'
            example: 
                _id: '60d0fe4f5311236168a109ca'
                product_variant_id: '60d0fe4f5311236168a109cb'
                supplier_id: '60d0fe4f5311236168a109cc'
                purchase_order_number: 'PO-2025-001'
                purchase_date: '2025-07-20T10:30:00.000Z'
                expected_delivery_date: '2025-07-25T10:30:00.000Z'
                received_date: '2025-07-24T14:20:00.000Z'
                quantity: 50
                unit_price_at_purchase: 25.99
                packaging_cost: 5.00
                shipping_cost: 15.00
                landing_price: 1319.50
                status: 'Completed'
                notes: 'Bulk discount applied - 10% off total order'
                inventory_updated_on_completion: true
                is_active: true
        UserCreateRequest:
            type: object
            required: [name, email, password]
            properties: {name: {type: string}, email: {type: string, format: email}, password: {type: string, format: password}, role: {type: string, enum: [user, admin]}, phone: {type: string}, address: {type: string}}
        UserUpdateRequest:
            type: object
            properties: {name: {type: string}, email: {type: string, format: email}, phone: {type: string}, address: {type: string}, role: {type: string, enum: [user, admin], description: 'Only admin can update role'}, isActive: {type: boolean, description: 'Only admin can update active status'}}
        BlogPost:
            type: object
            required: [author_id, title, content]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                author_id: {type: string, description: 'Reference to User who authored the post'}
                title: {type: string, maxLength: 200, description: 'Blog post title'}
                slug: {type: string, description: 'URL-friendly version of title'}
                content: {type: string, description: 'Main blog post content'}
                excerpt: {type: string, maxLength: 500, description: 'Short summary'}
                featured_image_url: {type: string, description: 'URL of featured image'}
                status: {type: string, enum: [draft, published, archived], default: draft}
                visibility: {type: string, enum: [public, private, members_only], default: public}
                tags: {type: array, items: {type: string}, description: 'Blog post tags'}
                meta_title: {type: string, maxLength: 60, description: 'SEO meta title'}
                meta_description: {type: string, maxLength: 160, description: 'SEO meta description'}
                view_count: {type: integer, default: 0}
                like_count: {type: integer, default: 0}
                comment_count: {type: integer, default: 0}
                published_at: {type: string, format: date-time}
                is_featured: {type: boolean, default: false}
                reading_time_minutes: {type: integer}
                createdAt: {type: string, format: date-time}
                updatedAt: {type: string, format: date-time}
        Cart:
            type: object
            properties:
                _id: {type: string, description: 'Unique identifier'}
                user_id: {type: string, description: 'Reference to User'}
                items: {type: array, items: {$ref: '#/components/schemas/CartItem'}}
                total_amount: {type: number, description: 'Total cart value'}
                total_items: {type: integer, description: 'Total number of items'}
                is_active: {type: boolean, default: true}
                expires_at: {type: string, format: date-time}
                createdAt: {type: string, format: date-time}
                updatedAt: {type: string, format: date-time}
        CartItem:
            type: object
            required: [product_variant_id, quantity]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                cart_id: {type: string, description: 'Reference to Cart'}
                product_variant_id: {type: string, description: 'Reference to ProductVariant'}
                quantity: {type: integer, minimum: 1}
                unit_price: {type: number, description: 'Price at time of adding to cart'}
                total_price: {type: number, description: 'quantity * unit_price'}
                added_at: {type: string, format: date-time}
                is_available: {type: boolean, default: true}
        Order:
            type: object
            required: [user_id, items, total_amount]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                order_number: {type: string, description: 'Unique order number'}
                user_id: {type: string, description: 'Reference to User'}
                items: {type: array, items: {$ref: '#/components/schemas/OrderItem'}}
                status: {type: string, enum: [pending, confirmed, processing, shipped, delivered, cancelled], default: pending}
                payment_status: {type: string, enum: [pending, paid, failed, refunded], default: pending}
                payment_method: {type: string}
                shipping_address: {type: object}
                billing_address: {type: object}
                subtotal: {type: number}
                tax_amount: {type: number}
                shipping_cost: {type: number}
                discount_amount: {type: number}
                total_amount: {type: number}
                notes: {type: string}
                tracking_number: {type: string}
                shipped_at: {type: string, format: date-time}
                delivered_at: {type: string, format: date-time}
                cancelled_at: {type: string, format: date-time}
                createdAt: {type: string, format: date-time}
                updatedAt: {type: string, format: date-time}
        OrderItem:
            type: object
            required: [product_variant_id, quantity, unit_price]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                order_id: {type: string, description: 'Reference to Order'}
                product_variant_id: {type: string, description: 'Reference to ProductVariant'}
                quantity: {type: integer, minimum: 1}
                unit_price: {type: number}
                total_price: {type: number}
                product_name: {type: string}
                variant_details: {type: object}
        CouponCampaign:
            type: object
            required: [code, discount_type, discount_value]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                code: {type: string, description: 'Coupon code'}
                name: {type: string, description: 'Campaign name'}
                description: {type: string}
                discount_type: {type: string, enum: [percentage, fixed_amount]}
                discount_value: {type: number, minimum: 0}
                min_order_value: {type: number, minimum: 0}
                max_discount_amount: {type: number}
                usage_limit: {type: integer}
                usage_count: {type: integer, default: 0}
                is_active: {type: boolean, default: true}
                starts_at: {type: string, format: date-time}
                expires_at: {type: string, format: date-time}
                applicable_products: {type: array, items: {type: string}}
                applicable_categories: {type: array, items: {type: string}}
                createdAt: {type: string, format: date-time}
                updatedAt: {type: string, format: date-time}
        DynamicContent:
            type: object
            required: [key, content_type]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                key: {type: string, description: 'Unique content key'}
                title: {type: string}
                content_type: {type: string, enum: [text, html, json, image]}
                content: {type: string, description: 'Content data'}
                metadata: {type: object}
                is_active: {type: boolean, default: true}
                version: {type: integer, default: 1}
                tags: {type: array, items: {type: string}}
                createdAt: {type: string, format: date-time}
                updatedAt: {type: string, format: date-time}
        Favorite:
            type: object
            required: [user_id, product_id]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                user_id: {type: string, description: 'Reference to User'}
                product_id: {type: string, description: 'Reference to Product'}
                added_at: {type: string, format: date-time}
                is_active: {type: boolean, default: true}
        PaymentMethod:
            type: object
            required: [user_id, type]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                user_id: {type: string, description: 'Reference to User'}
                type: {type: string, enum: [credit_card, debit_card, upi, wallet, net_banking]}
                provider: {type: string}
                masked_details: {type: string}
                is_primary: {type: boolean, default: false}
                is_active: {type: boolean, default: true}
                expires_at: {type: string, format: date-time}
                createdAt: {type: string, format: date-time}
                updatedAt: {type: string, format: date-time}
        ProductReview:
            type: object
            required: [user_id, product_id, rating]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                user_id: {type: string, description: 'Reference to User'}
                product_id: {type: string, description: 'Reference to Product'}
                order_id: {type: string, description: 'Reference to Order'}
                rating: {type: integer, minimum: 1, maximum: 5}
                title: {type: string, maxLength: 100}
                comment: {type: string, maxLength: 2000}
                images: {type: array, items: {type: string}}
                is_verified_purchase: {type: boolean, default: false}
                helpful_count: {type: integer, default: 0}
                status: {type: string, enum: [pending, approved, rejected], default: pending}
                admin_response: {type: string}
                createdAt: {type: string, format: date-time}
                updatedAt: {type: string, format: date-time}
        ReviewReport:
            type: object
            required: [user_id, review_id, reason]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                user_id: {type: string, description: 'Reference to User reporting'}
                review_id: {type: string, description: 'Reference to ProductReview'}
                reason: {type: string, enum: [spam, inappropriate, fake, misleading, other]}
                description: {type: string, maxLength: 500}
                status: {type: string, enum: [pending, reviewed, resolved], default: pending}
                admin_notes: {type: string}
                createdAt: {type: string, format: date-time}
                updatedAt: {type: string, format: date-time}
        Wallet:
            type: object
            required: [user_id]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                user_id: {type: string, description: 'Reference to User'}
                balance: {type: number, default: 0, minimum: 0}
                currency: {type: string, default: INR}
                is_active: {type: boolean, default: true}
                last_transaction_at: {type: string, format: date-time}
                createdAt: {type: string, format: date-time}
                updatedAt: {type: string, format: date-time}
        WalletTransaction:
            type: object
            required: [wallet_id, type, amount]
            properties:
                _id: {type: string, description: 'Unique identifier'}
                wallet_id: {type: string, description: 'Reference to Wallet'}
                transaction_id: {type: string, description: 'Unique transaction ID'}
                type: {type: string, enum: [credit, debit]}
                amount: {type: number, minimum: 0}
                description: {type: string}
                reference_type: {type: string, enum: [order, refund, bonus, cashback, withdrawal]}
                reference_id: {type: string}
                balance_before: {type: number}
                balance_after: {type: number}
                status: {type: string, enum: [pending, completed, failed], default: pending}
                metadata: {type: object}
                processed_at: {type: string, format: date-time}
                createdAt: {type: string, format: date-time}
                updatedAt: {type: string, format: date-time}
    responses:
        '400':
            description: 'Bad Request - Invalid input data'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        '401':
            description: 'Unauthorized - Authentication required'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        '403':
            description: 'Forbidden - Insufficient permissions'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        '404':
            description: 'Not Found - Resource not found'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        '429':
            description: 'Too Many Requests - Rate limit exceeded'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
        '500':
            description: 'Internal Server Error'
            content: {application/json: {schema: {$ref: '#/components/schemas/Error'}}}
tags:
    -
        name: Authentication
        description: 'Authentication and authorization operations'
    -
        name: Brands
        description: 'Brand management endpoints'
    -
        name: Users
        description: 'User management operations'
    -
        name: Categories
        description: 'Category management operations with hierarchical structure'
    -
        name: Products
        description: 'Product catalog operations'
    -
        name: Health
        description: 'System health and monitoring'
    -
        name: Options
        description: 'Product option management endpoints (Color, Size, Weight, etc.)'
    -
        name: 'Product Variants'
        description: 'Product variant management endpoints (SKUs and purchasable versions)'
    -
        name: Suppliers
        description: 'Supplier management endpoints for inventory suppliers'
    -
        name: 'Supplier Contact Numbers'
        description: 'Supplier contact number management endpoints'
    -
        name: Purchases
        description: 'Purchase order management endpoints for inventory purchases'
    -
        name: Inventory
        description: 'Inventory management endpoints for stock tracking and control'
    -
        name: Listings
        description: 'Product listing management endpoints for platform-specific listings'
    -
        name: Blog
        description: 'Blog management endpoints for content publishing'
    -
        name: 'Admin Blog'
        description: 'Admin blog management endpoints'
    -
        name: Cart
        description: 'Shopping cart management endpoints'
    -
        name: Orders
        description: 'Order management endpoints for user orders'
    -
        name: 'Admin Orders'
        description: 'Admin order management endpoints'
    -
        name: Coupons
        description: 'Coupon and discount management endpoints'
    -
        name: 'Admin Coupons'
        description: 'Admin coupon management endpoints'
paths:
    # Authentication
    /api/v1/auth/login:
        post:
            tags: [Authentication]
            summary: User login
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [email, password]
                            properties: {email: {type: string}, password: {type: string}}
            responses:
                '200': {description: Login successful, content: {application/json: {schema: {type: object, properties: {token: {type: string}, user: {$ref: '#/components/schemas/User'}}}}}}
                '401': {description: Invalid credentials}
    /api/v1/auth/register:
        post:
            tags: [Authentication]
            summary: User registration
            requestBody:
                required: true
                content:
                    application/json:
                        schema: {$ref: '#/components/schemas/UserCreateRequest'}
            responses:
                '201': {description: Registration successful, content: {application/json: {schema: {type: object, properties: {token: {type: string}, user: {$ref: '#/components/schemas/User'}}}}}}
                '400': {description: Validation error}
    
    # Blog Posts
    /api/v1/blog:
        get:
            tags: [Blog]
            summary: Get all published blog posts
            parameters:
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
                - {name: search, in: query, schema: {type: string}}
                - {name: tags, in: query, schema: {type: string}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {posts: {type: array, items: {$ref: '#/components/schemas/BlogPost'}}, pagination: {type: object}}}}}}
    /api/v1/blog/{slug}:
        get:
            tags: [Blog]
            summary: Get blog post by slug
            parameters:
                - {name: slug, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/BlogPost'}}}}
                '404': {description: Blog post not found}
    /api/v1/admin/blog:
        get:
            tags: [Admin Blog]
            summary: Get all blog posts (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
                - {name: status, in: query, schema: {type: string, enum: [draft, published, archived]}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {posts: {type: array, items: {$ref: '#/components/schemas/BlogPost'}}, pagination: {type: object}}}}}}
                '401': {description: Unauthorized}
        post:
            tags: [Admin Blog]
            summary: Create new blog post
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [title, content]
                            properties: {title: {type: string}, content: {type: string}, excerpt: {type: string}, status: {type: string, enum: [draft, published]}, tags: {type: array, items: {type: string}}}
            responses:
                '201': {description: Blog post created, content: {application/json: {schema: {$ref: '#/components/schemas/BlogPost'}}}}
                '401': {description: Unauthorized}
    /api/v1/admin/blog/{id}:
        get:
            tags: [Admin Blog]
            summary: Get blog post by ID (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/BlogPost'}}}}
                '404': {description: Blog post not found}
        put:
            tags: [Admin Blog]
            summary: Update blog post
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties: {title: {type: string}, content: {type: string}, excerpt: {type: string}, status: {type: string, enum: [draft, published, archived]}, tags: {type: array, items: {type: string}}}
            responses:
                '200': {description: Blog post updated, content: {application/json: {schema: {$ref: '#/components/schemas/BlogPost'}}}}
                '404': {description: Blog post not found}
        delete:
            tags: [Admin Blog]
            summary: Delete blog post
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Blog post deleted}
                '404': {description: Blog post not found}

    # Cart
    /api/v1/cart:
        get:
            tags: [Cart]
            summary: Get user's cart
            security: [{BearerAuth: []}]
            responses:
                '200': {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/Cart'}}}}
                '401': {description: Unauthorized}
        post:
            tags: [Cart]
            summary: Add item to cart
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [product_variant_id, quantity]
                            properties: {product_variant_id: {type: string}, quantity: {type: integer, minimum: 1}}
            responses:
                '200': {description: Item added to cart, content: {application/json: {schema: {$ref: '#/components/schemas/Cart'}}}}
                '401': {description: Unauthorized}
        delete:
            tags: [Cart]
            summary: Clear cart
            security: [{BearerAuth: []}]
            responses:
                '200': {description: Cart cleared}
                '401': {description: Unauthorized}
    /api/v1/cart/items/{itemId}:
        put:
            tags: [Cart]
            summary: Update cart item quantity
            security: [{BearerAuth: []}]
            parameters:
                - {name: itemId, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [quantity]
                            properties: {quantity: {type: integer, minimum: 1}}
            responses:
                '200': {description: Cart item updated, content: {application/json: {schema: {$ref: '#/components/schemas/Cart'}}}}
                '404': {description: Cart item not found}
        delete:
            tags: [Cart]
            summary: Remove item from cart
            security: [{BearerAuth: []}]
            parameters:
                - {name: itemId, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Item removed from cart}
                '404': {description: Cart item not found}

    # Orders
    /api/v1/orders:
        get:
            tags: [Orders]
            summary: Get user's orders
            security: [{BearerAuth: []}]
            parameters:
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
                - {name: status, in: query, schema: {type: string}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {orders: {type: array, items: {$ref: '#/components/schemas/Order'}}, pagination: {type: object}}}}}}
                '401': {description: Unauthorized}
        post:
            tags: [Orders]
            summary: Create new order
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [shipping_address, payment_method]
                            properties: {shipping_address: {type: object}, billing_address: {type: object}, payment_method: {type: string}, notes: {type: string}}
            responses:
                '201': {description: Order created, content: {application/json: {schema: {$ref: '#/components/schemas/Order'}}}}
                '401': {description: Unauthorized}
    /api/v1/orders/{id}:
        get:
            tags: [Orders]
            summary: Get order by ID
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/Order'}}}}
                '404': {description: Order not found}
        put:
            tags: [Orders]
            summary: Update order status (user cancel only)
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [status]
                            properties: {status: {type: string, enum: [cancelled]}}
            responses:
                '200': {description: Order updated, content: {application/json: {schema: {$ref: '#/components/schemas/Order'}}}}
                '404': {description: Order not found}
    /api/v1/admin/orders:
        get:
            tags: [Admin Orders]
            summary: Get all orders (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
                - {name: status, in: query, schema: {type: string}}
                - {name: user_id, in: query, schema: {type: string}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {orders: {type: array, items: {$ref: '#/components/schemas/Order'}}, pagination: {type: object}}}}}}
                '401': {description: Unauthorized}
    /api/v1/admin/orders/{id}:
        put:
            tags: [Admin Orders]
            summary: Update order status (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties: {status: {type: string, enum: [pending, confirmed, processing, shipped, delivered, cancelled]}, tracking_number: {type: string}, notes: {type: string}}
            responses:
                '200': {description: Order updated, content: {application/json: {schema: {$ref: '#/components/schemas/Order'}}}}
                '404': {description: Order not found}

    # Coupons
    /api/v1/coupons/validate:
        post:
            tags: [Coupons]
            summary: Validate coupon code
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [code, order_value]
                            properties: {code: {type: string}, order_value: {type: number}}
            responses:
                '200': {description: Coupon valid, content: {application/json: {schema: {type: object, properties: {valid: {type: boolean}, discount_amount: {type: number}, coupon: {$ref: '#/components/schemas/CouponCampaign'}}}}}}
                '400': {description: Invalid or expired coupon}
    /api/v1/admin/coupons:
        get:
            tags: [Admin Coupons]
            summary: Get all coupons (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
                - {name: is_active, in: query, schema: {type: boolean}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {coupons: {type: array, items: {$ref: '#/components/schemas/CouponCampaign'}}, pagination: {type: object}}}}}}
                '401': {description: Unauthorized}
        post:
            tags: [Admin Coupons]
            summary: Create new coupon
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [code, discount_type, discount_value]
                            properties: {code: {type: string}, name: {type: string}, discount_type: {type: string, enum: [percentage, fixed_amount]}, discount_value: {type: number}, min_order_value: {type: number}, usage_limit: {type: integer}, starts_at: {type: string, format: date-time}, expires_at: {type: string, format: date-time}}
            responses:
                '201': {description: Coupon created, content: {application/json: {schema: {$ref: '#/components/schemas/CouponCampaign'}}}}
                '401': {description: Unauthorized}
    /api/v1/admin/coupons/{id}:
        get:
            tags: [Admin Coupons]
            summary: Get coupon by ID (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/CouponCampaign'}}}}
                '404': {description: Coupon not found}
        put:
            tags: [Admin Coupons]
            summary: Update coupon
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties: {name: {type: string}, discount_value: {type: number}, min_order_value: {type: number}, usage_limit: {type: integer}, is_active: {type: boolean}, expires_at: {type: string, format: date-time}}
            responses:
                '200': {description: Coupon updated, content: {application/json: {schema: {$ref: '#/components/schemas/CouponCampaign'}}}}
                '404': {description: Coupon not found}
        delete:
            tags: [Admin Coupons]
            summary: Delete coupon
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Coupon deleted}
                '404': {description: Coupon not found}

    # Dynamic Content
    /api/v1/content/{key}:
        get:
            tags: [Dynamic Content]
            summary: Get content by key
            parameters:
                - {name: key, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/DynamicContent'}}}}
                '404': {description: Content not found}
    /api/v1/admin/content:
        get:
            tags: [Admin Dynamic Content]
            summary: Get all content (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
                - {name: content_type, in: query, schema: {type: string}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {content: {type: array, items: {$ref: '#/components/schemas/DynamicContent'}}, pagination: {type: object}}}}}}
                '401': {description: Unauthorized}
        post:
            tags: [Admin Dynamic Content]
            summary: Create new content
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [key, content_type, content]
                            properties: {key: {type: string}, title: {type: string}, content_type: {type: string, enum: [text, html, json, image]}, content: {type: string}, metadata: {type: object}, tags: {type: array, items: {type: string}}}
            responses:
                '201': {description: Content created, content: {application/json: {schema: {$ref: '#/components/schemas/DynamicContent'}}}}
                '401': {description: Unauthorized}
    /api/v1/admin/content/{id}:
        get:
            tags: [Admin Dynamic Content]
            summary: Get content by ID (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/DynamicContent'}}}}
                '404': {description: Content not found}
        put:
            tags: [Admin Dynamic Content]
            summary: Update content
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties: {title: {type: string}, content: {type: string}, metadata: {type: object}, is_active: {type: boolean}, tags: {type: array, items: {type: string}}}
            responses:
                '200': {description: Content updated, content: {application/json: {schema: {$ref: '#/components/schemas/DynamicContent'}}}}
                '404': {description: Content not found}
        delete:
            tags: [Admin Dynamic Content]
            summary: Delete content
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Content deleted}
                '404': {description: Content not found}

    # Favorites
    /api/v1/favorites:
        get:
            tags: [Favorites]
            summary: Get user's favorites
            security: [{BearerAuth: []}]
            parameters:
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {favorites: {type: array, items: {$ref: '#/components/schemas/Favorite'}}, pagination: {type: object}}}}}}
                '401': {description: Unauthorized}
        post:
            tags: [Favorites]
            summary: Add product to favorites
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [product_id]
                            properties: {product_id: {type: string}}
            responses:
                '201': {description: Product added to favorites, content: {application/json: {schema: {$ref: '#/components/schemas/Favorite'}}}}
                '401': {description: Unauthorized}
    /api/v1/favorites/{productId}:
        delete:
            tags: [Favorites]
            summary: Remove product from favorites
            security: [{BearerAuth: []}]
            parameters:
                - {name: productId, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Product removed from favorites}
                '404': {description: Favorite not found}

    # Payment Methods
    /api/v1/payment-methods:
        get:
            tags: [Payment Methods]
            summary: Get user's payment methods
            security: [{BearerAuth: []}]
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/PaymentMethod'}}}}}
                '401': {description: Unauthorized}
        post:
            tags: [Payment Methods]
            summary: Add new payment method
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [type, provider]
                            properties: {type: {type: string, enum: [credit_card, debit_card, upi, wallet, net_banking]}, provider: {type: string}, masked_details: {type: string}, is_primary: {type: boolean}}
            responses:
                '201': {description: Payment method added, content: {application/json: {schema: {$ref: '#/components/schemas/PaymentMethod'}}}}
                '401': {description: Unauthorized}
    /api/v1/payment-methods/{id}:
        put:
            tags: [Payment Methods]
            summary: Update payment method
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties: {is_primary: {type: boolean}, is_active: {type: boolean}}
            responses:
                '200': {description: Payment method updated, content: {application/json: {schema: {$ref: '#/components/schemas/PaymentMethod'}}}}
                '404': {description: Payment method not found}
        delete:
            tags: [Payment Methods]
            summary: Delete payment method
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Payment method deleted}
                '404': {description: Payment method not found}

    # Product Reviews
    /api/v1/products/{productId}/reviews:
        get:
            tags: [Product Reviews]
            summary: Get product reviews
            parameters:
                - {name: productId, in: path, required: true, schema: {type: string}}
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
                - {name: rating, in: query, schema: {type: integer, minimum: 1, maximum: 5}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {reviews: {type: array, items: {$ref: '#/components/schemas/ProductReview'}}, pagination: {type: object}, rating_summary: {type: object}}}}}}
        post:
            tags: [Product Reviews]
            summary: Create product review
            security: [{BearerAuth: []}]
            parameters:
                - {name: productId, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [rating]
                            properties: {rating: {type: integer, minimum: 1, maximum: 5}, title: {type: string}, comment: {type: string}, images: {type: array, items: {type: string}}, order_id: {type: string}}
            responses:
                '201': {description: Review created, content: {application/json: {schema: {$ref: '#/components/schemas/ProductReview'}}}}
                '401': {description: Unauthorized}
    /api/v1/reviews/{id}:
        put:
            tags: [Product Reviews]
            summary: Update review
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties: {rating: {type: integer, minimum: 1, maximum: 5}, title: {type: string}, comment: {type: string}, images: {type: array, items: {type: string}}}
            responses:
                '200': {description: Review updated, content: {application/json: {schema: {$ref: '#/components/schemas/ProductReview'}}}}
                '404': {description: Review not found}
        delete:
            tags: [Product Reviews]
            summary: Delete review
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Review deleted}
                '404': {description: Review not found}
    /api/v1/reviews/{id}/helpful:
        post:
            tags: [Product Reviews]
            summary: Mark review as helpful
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Review marked as helpful}
                '401': {description: Unauthorized}
    /api/v1/admin/reviews:
        get:
            tags: [Admin Reviews]
            summary: Get all reviews (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
                - {name: status, in: query, schema: {type: string, enum: [pending, approved, rejected]}}
                - {name: product_id, in: query, schema: {type: string}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {reviews: {type: array, items: {$ref: '#/components/schemas/ProductReview'}}, pagination: {type: object}}}}}}
                '401': {description: Unauthorized}
    /api/v1/admin/reviews/{id}:
        put:
            tags: [Admin Reviews]
            summary: Update review status (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties: {status: {type: string, enum: [pending, approved, rejected]}, admin_response: {type: string}}
            responses:
                '200': {description: Review updated, content: {application/json: {schema: {$ref: '#/components/schemas/ProductReview'}}}}
                '404': {description: Review not found}

    # Review Reports
    /api/v1/reviews/{reviewId}/report:
        post:
            tags: [Review Reports]
            summary: Report a review
            security: [{BearerAuth: []}]
            parameters:
                - {name: reviewId, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [reason]
                            properties: {reason: {type: string, enum: [spam, inappropriate, fake, misleading, other]}, description: {type: string}}
            responses:
                '201': {description: Review reported, content: {application/json: {schema: {$ref: '#/components/schemas/ReviewReport'}}}}
                '401': {description: Unauthorized}
    /api/v1/admin/review-reports:
        get:
            tags: [Admin Review Reports]
            summary: Get all review reports (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
                - {name: status, in: query, schema: {type: string, enum: [pending, reviewed, resolved]}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {reports: {type: array, items: {$ref: '#/components/schemas/ReviewReport'}}, pagination: {type: object}}}}}}
                '401': {description: Unauthorized}
    /api/v1/admin/review-reports/{id}:
        put:
            tags: [Admin Review Reports]
            summary: Update review report status (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties: {status: {type: string, enum: [pending, reviewed, resolved]}, admin_notes: {type: string}}
            responses:
                '200': {description: Review report updated, content: {application/json: {schema: {$ref: '#/components/schemas/ReviewReport'}}}}
                '404': {description: Review report not found}

    # Wallet
    /api/v1/wallet:
        get:
            tags: [Wallet]
            summary: Get user's wallet
            security: [{BearerAuth: []}]
            responses:
                '200': {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/Wallet'}}}}
                '401': {description: Unauthorized}
    /api/v1/wallet/transactions:
        get:
            tags: [Wallet]
            summary: Get wallet transactions
            security: [{BearerAuth: []}]
            parameters:
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
                - {name: type, in: query, schema: {type: string, enum: [credit, debit]}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {transactions: {type: array, items: {$ref: '#/components/schemas/WalletTransaction'}}, pagination: {type: object}}}}}}
                '401': {description: Unauthorized}
        post:
            tags: [Wallet]
            summary: Add money to wallet
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [amount]
                            properties: {amount: {type: number, minimum: 1}, payment_method: {type: string}}
            responses:
                '201': {description: Money added to wallet, content: {application/json: {schema: {$ref: '#/components/schemas/WalletTransaction'}}}}
                '401': {description: Unauthorized}
    /api/v1/admin/wallets:
        get:
            tags: [Admin Wallets]
            summary: Get all wallets (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
                - {name: user_id, in: query, schema: {type: string}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {wallets: {type: array, items: {$ref: '#/components/schemas/Wallet'}}, pagination: {type: object}}}}}}
                '401': {description: Unauthorized}
    /api/v1/admin/wallets/{id}/adjust:
        post:
            tags: [Admin Wallets]
            summary: Adjust wallet balance (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [type, amount, description]
                            properties: {type: {type: string, enum: [credit, debit]}, amount: {type: number, minimum: 0}, description: {type: string}}
            responses:
                '201': {description: Wallet balance adjusted, content: {application/json: {schema: {$ref: '#/components/schemas/WalletTransaction'}}}}
                '401': {description: Unauthorized}

    # Users
    /api/v1/users/profile:
        get:
            tags: [Users]
            summary: Get user profile
            security: [{BearerAuth: []}]
            responses:
                '200': {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/User'}}}}
                '401': {description: Unauthorized}
        put:
            tags: [Users]
            summary: Update user profile
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema: {$ref: '#/components/schemas/UserUpdateRequest'}
            responses:
                '200': {description: Profile updated, content: {application/json: {schema: {$ref: '#/components/schemas/User'}}}}
                '401': {description: Unauthorized}
    /api/v1/admin/users:
        get:
            tags: [Admin Users]
            summary: Get all users (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: page, in: query, schema: {type: integer, default: 1}}
                - {name: limit, in: query, schema: {type: integer, default: 10}}
                - {name: role, in: query, schema: {type: string, enum: [user, admin]}}
                - {name: isActive, in: query, schema: {type: boolean}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {type: object, properties: {users: {type: array, items: {$ref: '#/components/schemas/User'}}, pagination: {type: object}}}}}}
                '401': {description: Unauthorized}
        post:
            tags: [Admin Users]
            summary: Create new user (admin)
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema: {$ref: '#/components/schemas/UserCreateRequest'}
            responses:
                '201': {description: User created, content: {application/json: {schema: {$ref: '#/components/schemas/User'}}}}
                '401': {description: Unauthorized}
    /api/v1/admin/users/{id}:
        get:
            tags: [Admin Users]
            summary: Get user by ID (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/User'}}}}
                '404': {description: User not found}
        put:
            tags: [Admin Users]
            summary: Update user (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            requestBody:
                required: true
                content:
                    application/json:
                        schema: {$ref: '#/components/schemas/UserUpdateRequest'}
            responses:
                '200': {description: User updated, content: {application/json: {schema: {$ref: '#/components/schemas/User'}}}}
                '404': {description: User not found}
        delete:
            tags: [Admin Users]
            summary: Delete user (admin)
            security: [{BearerAuth: []}]
            parameters:
                - {name: id, in: path, required: true, schema: {type: string}}
            responses:
                '200': {description: User deleted}
                '404': {description: User not found}

    # Platforms
    /api/v1/platforms:
        get:
            tags: [Platforms]
            summary: Get all platforms
            parameters:
                - in: query
                  name: page
                  schema:
                      type: integer
                      minimum: 1
                      default: 1
                  description: Page number for pagination
                - in: query
                  name: limit
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 50
                      default: 10
                  description: Number of platforms per page
                - in: query
                  name: is_active
                  schema:
                      type: boolean
                  description: Filter by active status
                - in: query
                  name: search
                  schema:
                      type: string
                      maxLength: 100
                  description: Search term for name or description
                - in: query
                  name: sort
                  schema:
                      type: string
                      enum: [name, createdAt, updatedAt]
                      default: createdAt
                  description: Field to sort by
                - in: query
                  name: order
                  schema:
                      type: string
                      enum: [asc, desc]
                      default: desc
                  description: Sort order
            responses:
                '200':
                    description: Platforms retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        example: true
                                    data:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Platform'
                                    pagination:
                                        type: object
                                        properties:
                                            currentPage:
                                                type: integer
                                                description: Current page number
                                            totalPages:
                                                type: integer
                                                description: Total number of pages
                                            totalCount:
                                                type: integer
                                                description: Total number of platforms
                                            limit:
                                                type: integer
                                                description: Number of platforms per page
                                            hasNextPage:
                                                type: boolean
                                                description: Whether there is a next page
                                            hasPrevPage:
                                                type: boolean
                                                description: Whether there is a previous page
                                    filters:
                                        type: object
                                        properties:
                                            is_active:
                                                type: boolean
                                                nullable: true
                                                description: Applied active status filter
                                            search:
                                                type: string
                                                nullable: true
                                                description: Applied search term
                                example:
                                    success: true
                                    data:
                                        - _id: "674b1234567890abcdef1234"
                                          name: "Amazon"
                                          slug: "amazon"
                                          description: "Amazon marketplace platform"
                                          base_url: "https://www.amazon.com"
                                          logo_url: "https://logo.clearbit.com/amazon.com"
                                          is_active: true
                                          createdAt: "2024-11-30T12:00:00.000Z"
                                          updatedAt: "2024-11-30T12:00:00.000Z"
                                    pagination:
                                        currentPage: 1
                                        totalPages: 1
                                        totalCount: 5
                                        limit: 10
                                        hasNextPage: false
                                        hasPrevPage: false
                                    filters:
                                        is_active: null
                                        search: null
                '400':
                    description: Bad request - invalid query parameters
                '401':
                    description: Unauthorized - Admin access required
                '500':
                    description: Internal server error
        post:
            tags: [Platforms]
            summary: Create new platform
            security:
                - BearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PlatformCreateRequest'
            responses:
                '201':
                    description: Platform created successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Platform'
                '400':
                    description: Validation error
                '401':
                    description: Unauthorized
    /api/v1/platforms/{id}:
        get:
            tags: [Platforms]
            summary: Get platform by ID
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Platform ID
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Platform'
                '404':
                    description: Platform not found
        put:
            tags: [Platforms]
            summary: Update platform
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Platform ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PlatformUpdateRequest'
            responses:
                '200':
                    description: Platform updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Platform'
                '404':
                    description: Platform not found
                '401':
                    description: Unauthorized
        delete:
            tags: [Platforms]
            summary: Delete platform
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Platform ID
            responses:
                '200':
                    description: Platform deleted successfully
                '404':
                    description: Platform not found
                '401':
                    description: Unauthorized

    # Purchases
    /api/v1/purchases:
        get:
            tags: [Purchases]
            summary: Get all purchases
            security:
                - BearerAuth: []
            parameters:
                - name: page
                  in: query
                  schema:
                      type: integer
                      default: 1
                  description: Page number
                - name: limit
                  in: query
                  schema:
                      type: integer
                      default: 10
                  description: Items per page
                - name: supplier_id
                  in: query
                  schema:
                      type: string
                  description: Filter by supplier ID
                - name: status
                  in: query
                  schema:
                      type: string
                      enum: [pending, approved, rejected, completed]
                  description: Filter by status
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Purchase'
                                    total:
                                        type: integer
                                        description: Total number of purchases
                                    page:
                                        type: integer
                                        description: Current page
                                    totalPages:
                                        type: integer
                                        description: Total number of pages
                '401':
                    description: Unauthorized
        post:
            tags: [Purchases]
            summary: Create new purchase order
            security:
                - BearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PurchaseCreateRequest'
            responses:
                '201':
                    description: Purchase order created successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Purchase'
                '400':
                    description: Validation error
                '401':
                    description: Unauthorized
    /api/v1/purchases/{id}:
        get:
            tags: [Purchases]
            summary: Get purchase by ID
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Purchase ID
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Purchase'
                '404':
                    description: Purchase not found
                '401':
                    description: Unauthorized
        put:
            tags: [Purchases]
            summary: Update purchase order
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Purchase ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PurchaseUpdateRequest'
            responses:
                '200':
                    description: Purchase order updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Purchase'
                '404':
                    description: Purchase not found
                '401':
                    description: Unauthorized
        delete:
            tags: [Purchases]
            summary: Delete purchase order
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Purchase ID
            responses:
                '200':
                    description: Purchase order deleted successfully
                '404':
                    description: Purchase not found
                '401':
                    description: Unauthorized

    # Suppliers
    /api/v1/suppliers:
        get:
            tags: [Suppliers]
            summary: Get all suppliers
            security:
                - BearerAuth: []
            parameters:
                - name: page
                  in: query
                  schema:
                      type: integer
                      default: 1
                  description: Page number
                - name: limit
                  in: query
                  schema:
                      type: integer
                      default: 10
                  description: Items per page
                - name: search
                  in: query
                  schema:
                      type: string
                  description: Search by name or business name
                - name: is_active
                  in: query
                  schema:
                      type: boolean
                  description: Filter by active status
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            allOf:
                                                - $ref: '#/components/schemas/Supplier'
                                                - type: object
                                                  properties:
                                                      contact_numbers:
                                                          type: array
                                                          items:
                                                              $ref: '#/components/schemas/SupplierContactNumber'
                                    total:
                                        type: integer
                                        description: Total number of suppliers
                                    page:
                                        type: integer
                                        description: Current page
                                    totalPages:
                                        type: integer
                                        description: Total number of pages
                '401':
                    description: Unauthorized
        post:
            tags: [Suppliers]
            summary: Create new supplier
            security:
                - BearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SupplierCreateRequest'
            responses:
                '201':
                    description: Supplier created successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Supplier'
                '400':
                    description: Validation error
                '401':
                    description: Unauthorized
    /api/v1/suppliers/{idOrSlug}:
        get:
            tags: [Suppliers]
            summary: Get supplier by ID or slug
            security:
                - BearerAuth: []
            parameters:
                - name: idOrSlug
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Supplier ID or slug
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: '#/components/schemas/Supplier'
                                    - type: object
                                      properties:
                                          contact_numbers:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/SupplierContactNumber'
                '404':
                    description: Supplier not found
                '401':
                    description: Unauthorized
        put:
            tags: [Suppliers]
            summary: Update supplier
            security:
                - BearerAuth: []
            parameters:
                - name: idOrSlug
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Supplier ID or slug
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SupplierUpdateRequest'
            responses:
                '200':
                    description: Supplier updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Supplier'
                '404':
                    description: Supplier not found
                '401':
                    description: Unauthorized
        delete:
            tags: [Suppliers]
            summary: Delete supplier
            security:
                - BearerAuth: []
            parameters:
                - name: idOrSlug
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Supplier ID or slug
            responses:
                '200':
                    description: Supplier deleted successfully
                '404':
                    description: Supplier not found
                '401':
                    description: Unauthorized

    # Supplier Contact Numbers
    /api/v1/supplier-contact-numbers:
        get:
            tags: [Supplier Contact Numbers]
            summary: Get all supplier contact numbers
            description: 'Access Level: Requires authentication and admin privileges'
            security:
                - BearerAuth: []
            parameters:
                - name: page
                  in: query
                  schema:
                      type: integer
                      default: 1
                  description: Page number
                - name: limit
                  in: query
                  schema:
                      type: integer
                      default: 10
                  description: Items per page
                - name: supplier_id
                  in: query
                  schema:
                      type: string
                  description: Filter by supplier ID
                - name: contact_type
                  in: query
                  schema:
                      type: string
                      enum: [primary, secondary, emergency, fax]
                  description: Filter by contact type
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/SupplierContactNumber'
                                    total:
                                        type: integer
                                        description: Total number of contact numbers
                                    page:
                                        type: integer
                                        description: Current page
                                    totalPages:
                                        type: integer
                                        description: Total number of pages
                '401':
                    description: Unauthorized - Valid JWT token required
                '403':
                    description: Forbidden - Admin privileges required
        post:
            tags: [Supplier Contact Numbers]
            summary: Add new contact number for supplier
            description: 'Access Level: Requires authentication and admin privileges'
            security:
                - BearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SupplierContactNumberCreateRequest'
            responses:
                '201':
                    description: Contact number added successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SupplierContactNumber'
                '400':
                    description: Validation error
                '401':
                    description: Unauthorized - Valid JWT token required
                '403':
                    description: Forbidden - Admin privileges required
    /api/v1/supplier-contact-numbers/{id}:
        get:
            tags: [Supplier Contact Numbers]
            summary: Get contact number by ID
            description: 'Access Level: Requires authentication and admin privileges'
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Contact number ID
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SupplierContactNumber'
                '404':
                    description: Contact number not found
                '401':
                    description: Unauthorized - Valid JWT token required
                '403':
                    description: Forbidden - Admin privileges required
        put:
            tags: [Supplier Contact Numbers]
            summary: Update contact number
            description: 'Access Level: Requires authentication and admin privileges'
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Contact number ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SupplierContactNumberUpdateRequest'
            responses:
                '200':
                    description: Contact number updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SupplierContactNumber'
                '404':
                    description: Contact number not found
                '401':
                    description: Unauthorized - Valid JWT token required
                '403':
                    description: Forbidden - Admin privileges required
        delete:
            tags: [Supplier Contact Numbers]
            summary: Delete contact number
            description: 'Access Level: Requires authentication and admin privileges'
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Contact number ID
            responses:
                '200':
                    description: Contact number deleted successfully
                '404':
                    description: Contact number not found
                '401':
                    description: Unauthorized - Valid JWT token required
                '403':
                    description: Forbidden - Admin privileges required
    /api/v1/admin/dashboard:
        get:
            summary: 'Get admin dashboard data'
            description: 'Retrieve administrative dashboard statistics and data'
            tags: [Admin]
            security: [{bearerAuth: []}]
            responses: {'200': {description: 'Dashboard data retrieved successfully'}, '401': {description: 'Admin authentication required'}}
    /api/v1/admin/products:
        post:
            summary: 'Create new product'
            description: 'Create a new product in the system'
            tags: [Admin]
            security: [{bearerAuth: []}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {name: {type: string, description: 'Product name'}, price: {type: number, description: 'Product price'}, category: {type: string, description: 'Product category'}, description: {type: string, description: 'Product description'}, stock: {type: integer, description: 'Initial stock quantity'}}}}}}
            responses: {'201': {description: 'Product created successfully'}, '400': {description: 'Invalid input data'}, '401': {description: 'Admin authentication required'}}
    '/api/v1/admin/products/{id}':
        put:
            summary: 'Update product'
            description: 'Update an existing product'
            tags: [Admin]
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Product ID'}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {name: {type: string}, price: {type: number}, category: {type: string}, description: {type: string}, stock: {type: integer}}}}}}
            responses: {'200': {description: 'Product updated successfully'}, '401': {description: 'Admin authentication required'}, '404': {description: 'Product not found'}}
        delete:
            summary: 'Delete product'
            description: 'Delete a product from the system'
            tags: [Admin]
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: id, required: true, schema: {type: string}, description: 'Product ID'}, {in: query, name: permanent, schema: {type: boolean}, description: 'Whether to permanently delete the product'}]
            responses: {'200': {description: 'Product deleted successfully'}, '401': {description: 'Admin authentication required'}, '404': {description: 'Product not found'}}
    '/api/v1/admin/users/{userId}/manage':
        post:
            summary: 'Manage user account'
            description: 'Perform administrative actions on user accounts'
            tags: [Admin]
            security: [{bearerAuth: []}]
            parameters: [{in: path, name: userId, required: true, schema: {type: string}, description: 'User ID'}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {action: {type: string, enum: [activate, deactivate, suspend, delete], description: 'Action to perform'}, reason: {type: string, description: 'Reason for the action'}}}}}}
            responses: {'200': {description: 'User account managed successfully'}, '401': {description: 'Admin authentication required'}, '404': {description: 'User not found'}}
    /api/v1/admin/settings:
        put:
            summary: 'Update system settings'
            description: 'Update global system configuration'
            tags: [Admin]
            security: [{bearerAuth: []}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {settings: {type: object, description: 'System settings to update'}}}}}}
            responses: {'200': {description: 'System settings updated successfully'}, '401': {description: 'Admin authentication required'}}
    /api/v1/admin/reports/sales:
        get:
            summary: 'Export sales data'
            description: 'Export sales data for reporting purposes'
            tags: [Admin]
            security: [{bearerAuth: []}]
            parameters: [{in: query, name: startDate, schema: {type: string, format: date}, description: 'Start date for the report'}, {in: query, name: endDate, schema: {type: string, format: date}, description: 'End date for the report'}, {in: query, name: format, schema: {type: string, enum: [csv, xlsx, json]}, description: 'Export format'}]
            responses: {'200': {description: 'Sales data exported successfully'}, '401': {description: 'Admin authentication required'}}
    
    # Inventory Management
    /api/v1/inventory:
        post:
            summary: 'Create a new inventory record'
            description: 'Create a new inventory record for a base unit product variant'
            tags: [Inventory]
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [product_variant_id]
                            properties:
                                product_variant_id: {type: string, description: 'ID of the base unit product variant'}
                                stock_quantity: {type: number, minimum: 0, default: 0, description: 'Initial stock quantity'}
                                min_stock_level: {type: number, minimum: 0, default: 0, description: 'Minimum stock threshold'}
                                location: {type: string, maxLength: 200, description: 'Physical storage location'}
                                notes: {type: string, maxLength: 1000, description: 'Internal notes'}
            responses:
                '201': {description: 'Inventory record created successfully', content: {application/json: {schema: {$ref: '#/components/schemas/Inventory'}}}}
                '400': {description: 'Validation error or pack variant provided'}
                '401': {description: 'Unauthorized - admin access required'}
                '500': {description: 'Internal server error'}
        get:
            summary: 'Get all inventory records'
            description: 'Retrieve all inventory records with pagination and filtering'
            tags: [Inventory]
            security: [{BearerAuth: []}]
            parameters:
                - {in: query, name: page, schema: {type: integer, minimum: 1, default: 1}, description: 'Page number for pagination'}
                - {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 100, default: 10}, description: 'Number of items per page'}
                - {in: query, name: is_active, schema: {type: boolean}, description: 'Filter by active status'}
                - {in: query, name: stock_status, schema: {type: string, enum: [out_of_stock, low_stock, in_stock]}, description: 'Filter by stock status'}
                - {in: query, name: location, schema: {type: string}, description: 'Filter by location (partial match)'}
                - {in: query, name: product_id, schema: {type: string}, description: 'Filter by product ID'}
                - {in: query, name: search, schema: {type: string}, description: 'Search across SKU, location, and notes'}
                - {in: query, name: include_computed_packs, schema: {type: boolean, default: false}, description: 'Include computed stock for pack variants'}
                - {in: query, name: sort_by, schema: {type: string, enum: [createdAt, updatedAt, stock_quantity, min_stock_level, last_restock_date], default: createdAt}, description: 'Field to sort by'}
                - {in: query, name: sort_order, schema: {type: string, enum: [asc, desc], default: desc}, description: 'Sort order'}
            responses:
                '200': {description: 'Inventory records retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/Inventory'}}, pagination: {type: object}}}}}}
                '401': {description: 'Unauthorized - admin access required'}
                '500': {description: 'Internal server error'}
    /api/v1/inventory/variant/{productVariantId}:
        get:
            summary: 'Get inventory by product variant ID'
            description: 'Get inventory record by product variant ID with computed stock'
            tags: [Inventory]
            security: [{BearerAuth: []}]
            parameters:
                - {in: path, name: productVariantId, required: true, schema: {type: string}, description: 'Product variant ID (base unit or pack)'}
            responses:
                '200': {description: 'Inventory record retrieved successfully with computed stock', content: {application/json: {schema: {$ref: '#/components/schemas/Inventory'}}}}
                '400': {description: 'Invalid product variant ID'}
                '401': {description: 'Unauthorized - admin access required'}
                '404': {description: 'Inventory record not found'}
                '500': {description: 'Internal server error'}
    /api/v1/inventory/{id}:
        patch:
            summary: 'Update inventory record'
            description: 'Update an existing inventory record'
            tags: [Inventory]
            security: [{BearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Inventory record ID'}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                stock_quantity: {type: number, minimum: 0, description: 'Updated stock quantity'}
                                min_stock_level: {type: number, minimum: 0, description: 'Updated minimum stock level'}
                                location: {type: string, maxLength: 200, description: 'Updated storage location'}
                                notes: {type: string, maxLength: 1000, description: 'Updated notes'}
                                is_active: {type: boolean, description: 'Updated active status'}
            responses:
                '200': {description: 'Inventory record updated successfully', content: {application/json: {schema: {$ref: '#/components/schemas/Inventory'}}}}
                '400': {description: 'Validation error or invalid inventory ID'}
                '401': {description: 'Unauthorized - admin access required'}
                '404': {description: 'Inventory record not found'}
                '500': {description: 'Internal server error'}
        delete:
            summary: 'Delete inventory record'
            description: 'Delete inventory record (soft delete)'
            tags: [Inventory]
            security: [{BearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Inventory record ID'}
            responses:
                '204': {description: 'Inventory record deleted successfully'}
                '400': {description: 'Invalid inventory ID'}
                '401': {description: 'Unauthorized - admin access required'}
                '404': {description: 'Inventory record not found'}
                '500': {description: 'Internal server error'}
    
    # Listing Management
    /api/v1/listings:
        post:
            summary: 'Create a new listing'
            description: 'Create a new product variant listing for a specific platform'
            tags: [Listings]
            security: [{BearerAuth: []}]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [product_variant_id, platform_id]
                            properties:
                                product_variant_id: {type: string, description: 'ID of the product variant'}
                                platform_id: {type: string, description: 'ID of the platform'}
                                platform_sku: {type: string, maxLength: 100, description: 'Platform-specific SKU'}
                                platform_product_id: {type: string, maxLength: 150, description: 'Platform-specific product ID'}
                                listing_status: {type: string, enum: [Draft, 'Pending Review', Live, Rejected, Deactivated], default: Draft, description: 'Current status of the listing'}
                                platform_price: {type: number, minimum: 0, description: 'Price on the platform'}
                                platform_commission_percentage: {type: number, minimum: 0, maximum: 100, description: 'Commission percentage for this variant'}
                                platform_fixed_fee: {type: number, minimum: 0, description: 'Fixed fee per sale'}
                                platform_shipping_fee: {type: number, minimum: 0, description: 'Shipping fee charged by platform'}
                                platform_specific_data: {type: object, description: 'Platform-specific attributes'}
                                is_active_on_platform: {type: boolean, default: true, description: 'Whether listing is active on platform'}
            responses:
                '201': {description: 'Listing created successfully', content: {application/json: {schema: {$ref: '#/components/schemas/Listing'}}}}
                '400': {description: 'Validation error or duplicate variant-platform combination'}
                '401': {description: 'Unauthorized - admin access required'}
                '500': {description: 'Internal server error'}
        get:
            summary: 'Get all listings'
            description: 'Retrieve all listings with pagination and filtering'
            tags: [Listings]
            security: [{BearerAuth: []}]
            parameters:
                - {in: query, name: page, schema: {type: integer, minimum: 1, default: 1}, description: 'Page number for pagination'}
                - {in: query, name: limit, schema: {type: integer, minimum: 1, maximum: 100, default: 10}, description: 'Number of items per page'}
                - {in: query, name: platform_id, schema: {type: string}, description: 'Filter by platform ID'}
                - {in: query, name: product_variant_id, schema: {type: string}, description: 'Filter by product variant ID'}
                - {in: query, name: listing_status, schema: {type: string, enum: [Draft, 'Pending Review', Live, Rejected, Deactivated]}, description: 'Filter by listing status'}
                - {in: query, name: is_active_on_platform, schema: {type: boolean}, description: 'Filter by active status'}
                - {in: query, name: platform_sku, schema: {type: string}, description: 'Filter by platform SKU (partial match)'}
                - {in: query, name: platform_product_id, schema: {type: string}, description: 'Filter by platform product ID (partial match)'}
                - {in: query, name: needs_sync, schema: {type: boolean}, description: 'Filter listings that need synchronization'}
                - {in: query, name: has_price, schema: {type: boolean}, description: 'Filter listings with valid platform price'}
                - {in: query, name: search, schema: {type: string}, description: 'Search across platform SKU and product ID'}
                - {in: query, name: sort_by, schema: {type: string, enum: [createdAt, updatedAt, platform_price, listing_status, last_synced_at], default: createdAt}, description: 'Field to sort by'}
                - {in: query, name: sort_order, schema: {type: string, enum: [asc, desc], default: desc}, description: 'Sort order'}
            responses:
                '200': {description: 'Listings retrieved successfully', content: {application/json: {schema: {type: object, properties: {success: {type: boolean}, data: {type: array, items: {$ref: '#/components/schemas/Listing'}}, pagination: {type: object}}}}}}
                '401': {description: 'Unauthorized - admin access required'}
                '500': {description: 'Internal server error'}
    /api/v1/listings/{id}:
        get:
            summary: 'Get listing by ID'
            description: 'Retrieve a specific listing by its ID'
            tags: [Listings]
            security: [{BearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Listing ID'}
            responses:
                '200': {description: 'Listing retrieved successfully', content: {application/json: {schema: {$ref: '#/components/schemas/Listing'}}}}
                '400': {description: 'Invalid listing ID'}
                '401': {description: 'Unauthorized - admin access required'}
                '404': {description: 'Listing not found'}
                '500': {description: 'Internal server error'}
        patch:
            summary: 'Update listing'
            description: 'Update an existing listing'
            tags: [Listings]
            security: [{BearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Listing ID'}
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                platform_sku: {type: string, maxLength: 100, description: 'Platform-specific SKU'}
                                platform_product_id: {type: string, maxLength: 150, description: 'Platform-specific product ID'}
                                listing_status: {type: string, enum: [Draft, 'Pending Review', Live, Rejected, Deactivated], description: 'Current status of the listing'}
                                platform_price: {type: number, minimum: 0, description: 'Price on the platform'}
                                platform_commission_percentage: {type: number, minimum: 0, maximum: 100, description: 'Commission percentage for this variant'}
                                platform_fixed_fee: {type: number, minimum: 0, description: 'Fixed fee per sale'}
                                platform_shipping_fee: {type: number, minimum: 0, description: 'Shipping fee charged by platform'}
                                platform_specific_data: {type: object, description: 'Platform-specific attributes'}
                                is_active_on_platform: {type: boolean, description: 'Whether listing is active on platform'}
            responses:
                '200': {description: 'Listing updated successfully', content: {application/json: {schema: {$ref: '#/components/schemas/Listing'}}}}
                '400': {description: 'Validation error or invalid listing ID'}
                '401': {description: 'Unauthorized - admin access required'}
                '404': {description: 'Listing not found'}
                '500': {description: 'Internal server error'}
        delete:
            summary: 'Delete listing'
            description: 'Delete listing (soft delete)'
            tags: [Listings]
            security: [{BearerAuth: []}]
            parameters:
                - {in: path, name: id, required: true, schema: {type: string}, description: 'Listing ID'}
            responses:
                '204': {description: 'Listing deleted successfully'}
                '400': {description: 'Invalid listing ID'}
                '401': {description: 'Unauthorized - admin access required'}
                '404': {description: 'Listing not found'}
                '500': {description: 'Internal server error'}
